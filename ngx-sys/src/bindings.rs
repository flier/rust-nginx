/* automatically generated by rust-bindgen 0.68.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const NGX_HAVE_UNISTD_H: u32 = 1;
pub const NGX_HAVE_INTTYPES_H: u32 = 1;
pub const NGX_HAVE_LIMITS_H: u32 = 1;
pub const NGX_HAVE_SYS_PARAM_H: u32 = 1;
pub const NGX_HAVE_SYS_MOUNT_H: u32 = 1;
pub const NGX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const NGX_HAVE_CRYPT_H: u32 = 1;
pub const NGX_LINUX: u32 = 1;
pub const NGX_HAVE_SYS_PRCTL_H: u32 = 1;
pub const NGX_HAVE_SYS_VFS_H: u32 = 1;
pub const NGX_CONFIGURE : & [u8 ; 704] = b" --builddir=/mnt/c/Users/flier/Documents/GitHub/rust-nginx/target/debug/build/ngx-src-f6ba22822754de96/out/build --prefix=/mnt/c/Users/flier/Documents/GitHub/rust-nginx/target/debug/build/ngx-src-f6ba22822754de96/out/dist --with-compat --with-stream --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module\0" ;
pub const NGX_COMPILER: &[u8; 43] = b"gcc 10.5.0 (Ubuntu 10.5.0-1ubuntu1~20.04) \0";
pub const NGX_HAVE_GCC_ATOMIC: u32 = 1;
pub const NGX_HAVE_C99_VARIADIC_MACROS: u32 = 1;
pub const NGX_HAVE_GCC_VARIADIC_MACROS: u32 = 1;
pub const NGX_HAVE_GCC_BSWAP64: u32 = 1;
pub const NGX_HAVE_EPOLL: u32 = 1;
pub const NGX_HAVE_CLEAR_EVENT: u32 = 1;
pub const NGX_HAVE_EPOLLRDHUP: u32 = 1;
pub const NGX_HAVE_EPOLLEXCLUSIVE: u32 = 1;
pub const NGX_HAVE_EVENTFD: u32 = 1;
pub const NGX_HAVE_SYS_EVENTFD_H: u32 = 1;
pub const NGX_HAVE_O_PATH: u32 = 1;
pub const NGX_HAVE_SENDFILE: u32 = 1;
pub const NGX_HAVE_SENDFILE64: u32 = 1;
pub const NGX_HAVE_PR_SET_DUMPABLE: u32 = 1;
pub const NGX_HAVE_PR_SET_KEEPCAPS: u32 = 1;
pub const NGX_HAVE_CAPABILITIES: u32 = 1;
pub const NGX_HAVE_GNU_CRYPT_R: u32 = 1;
pub const NGX_HAVE_UDP_SEGMENT: u32 = 1;
pub const NGX_HAVE_NONALIGNED: u32 = 1;
pub const NGX_CPU_CACHE_LINE: u32 = 64;
pub const NGX_HAVE_POSIX_FADVISE: u32 = 1;
pub const NGX_HAVE_O_DIRECT: u32 = 1;
pub const NGX_HAVE_ALIGNED_DIRECTIO: u32 = 1;
pub const NGX_HAVE_STATFS: u32 = 1;
pub const NGX_HAVE_STATVFS: u32 = 1;
pub const NGX_HAVE_DLOPEN: u32 = 1;
pub const NGX_HAVE_SCHED_YIELD: u32 = 1;
pub const NGX_HAVE_SCHED_SETAFFINITY: u32 = 1;
pub const NGX_HAVE_REUSEPORT: u32 = 1;
pub const NGX_HAVE_TRANSPARENT_PROXY: u32 = 1;
pub const NGX_HAVE_IP_BIND_ADDRESS_NO_PORT: u32 = 1;
pub const NGX_HAVE_IP_PKTINFO: u32 = 1;
pub const NGX_HAVE_IPV6_RECVPKTINFO: u32 = 1;
pub const NGX_HAVE_DEFERRED_ACCEPT: u32 = 1;
pub const NGX_HAVE_KEEPALIVE_TUNABLE: u32 = 1;
pub const NGX_HAVE_TCP_FASTOPEN: u32 = 1;
pub const NGX_HAVE_TCP_INFO: u32 = 1;
pub const NGX_HAVE_ACCEPT4: u32 = 1;
pub const NGX_HAVE_UNIX_DOMAIN: u32 = 1;
pub const NGX_PTR_SIZE: u32 = 8;
pub const NGX_SIG_ATOMIC_T_SIZE: u32 = 4;
pub const NGX_HAVE_LITTLE_ENDIAN: u32 = 1;
pub const NGX_MAX_SIZE_T_VALUE: u64 = 9223372036854775807;
pub const NGX_MAX_OFF_T_VALUE: u64 = 9223372036854775807;
pub const NGX_TIME_T_SIZE: u32 = 8;
pub const NGX_MAX_TIME_T_VALUE: u64 = 9223372036854775807;
pub const NGX_HAVE_INET6: u32 = 1;
pub const NGX_HAVE_PREAD: u32 = 1;
pub const NGX_HAVE_PWRITE: u32 = 1;
pub const NGX_HAVE_PWRITEV: u32 = 1;
pub const NGX_SYS_NERR: u32 = 135;
pub const NGX_HAVE_LOCALTIME_R: u32 = 1;
pub const NGX_HAVE_CLOCK_MONOTONIC: u32 = 1;
pub const NGX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const NGX_HAVE_MEMALIGN: u32 = 1;
pub const NGX_HAVE_MAP_ANON: u32 = 1;
pub const NGX_HAVE_MAP_DEVZERO: u32 = 1;
pub const NGX_HAVE_SYSVSHM: u32 = 1;
pub const NGX_HAVE_POSIX_SEM: u32 = 1;
pub const NGX_HAVE_MSGHDR_MSG_CONTROL: u32 = 1;
pub const NGX_HAVE_FIONBIO: u32 = 1;
pub const NGX_HAVE_FIONREAD: u32 = 1;
pub const NGX_HAVE_GMTOFF: u32 = 1;
pub const NGX_HAVE_D_TYPE: u32 = 1;
pub const NGX_HAVE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const NGX_HAVE_LEVEL1_DCACHE_LINESIZE: u32 = 1;
pub const NGX_HAVE_OPENAT: u32 = 1;
pub const NGX_HAVE_GETADDRINFO: u32 = 1;
pub const NGX_THREADS: u32 = 1;
pub const NGX_HTTP_CACHE: u32 = 1;
pub const NGX_HTTP_GZIP: u32 = 1;
pub const NGX_HTTP_SSI: u32 = 1;
pub const NGX_HTTP_V2: u32 = 1;
pub const NGX_HTTP_HEADERS: u32 = 1;
pub const NGX_CRYPT: u32 = 1;
pub const NGX_HTTP_REALIP: u32 = 1;
pub const NGX_HTTP_X_FORWARDED_FOR: u32 = 1;
pub const NGX_HTTP_SSL: u32 = 1;
pub const NGX_HTTP_UPSTREAM_ZONE: u32 = 1;
pub const NGX_STAT_STUB: u32 = 1;
pub const NGX_STREAM_SSL: u32 = 1;
pub const NGX_STREAM_UPSTREAM_ZONE: u32 = 1;
pub const NGX_COMPAT: u32 = 1;
pub const NGX_HTTP_DAV: u32 = 1;
pub const NGX_PCRE2: u32 = 1;
pub const NGX_PCRE: u32 = 1;
pub const NGX_OPENSSL: u32 = 1;
pub const NGX_SSL: u32 = 1;
pub const NGX_ZLIB: u32 = 1;
pub const NGX_PREFIX : & [u8 ; 101] = b"/mnt/c/Users/flier/Documents/GitHub/rust-nginx/target/debug/build/ngx-src-f6ba22822754de96/out/dist/\0" ;
pub const NGX_CONF_PREFIX: &[u8; 6] = b"conf/\0";
pub const NGX_SBIN_PATH: &[u8; 11] = b"sbin/nginx\0";
pub const NGX_CONF_PATH: &[u8; 16] = b"conf/nginx.conf\0";
pub const NGX_PID_PATH: &[u8; 15] = b"logs/nginx.pid\0";
pub const NGX_LOCK_PATH: &[u8; 16] = b"logs/nginx.lock\0";
pub const NGX_ERROR_LOG_PATH: &[u8; 15] = b"logs/error.log\0";
pub const NGX_HTTP_LOG_PATH: &[u8; 16] = b"logs/access.log\0";
pub const NGX_HTTP_CLIENT_TEMP_PATH: &[u8; 17] = b"client_body_temp\0";
pub const NGX_HTTP_PROXY_TEMP_PATH: &[u8; 11] = b"proxy_temp\0";
pub const NGX_HTTP_FASTCGI_TEMP_PATH: &[u8; 13] = b"fastcgi_temp\0";
pub const NGX_HTTP_UWSGI_TEMP_PATH: &[u8; 11] = b"uwsgi_temp\0";
pub const NGX_HTTP_SCGI_TEMP_PATH: &[u8; 10] = b"scgi_temp\0";
pub const NGX_SUPPRESS_WARN: u32 = 1;
pub const NGX_SMP: u32 = 1;
pub const NGX_USER: &[u8; 7] = b"nobody\0";
pub const NGX_GROUP: &[u8; 8] = b"nogroup\0";
pub const NGX_LISTEN_BACKLOG: u32 = 511;
pub const NGX_HAVE_SO_SNDLOWAT: u32 = 0;
pub const NGX_HAVE_INHERITED_NONBLOCK: u32 = 0;
pub const NGX_HAVE_OS_SPECIFIC_INIT: u32 = 1;
pub const NGX_MAX_INT_T_VALUE: u64 = 9223372036854775807;
pub const NGX_INVALID_ARRAY_INDEX: u32 = 2147483648;
pub const NGX_MAXHOSTNAMELEN: u32 = 256;
pub const NGX_OK: u32 = 0;
pub const NGX_ERROR: i32 = -1;
pub const NGX_AGAIN: i32 = -2;
pub const NGX_BUSY: i32 = -3;
pub const NGX_DONE: i32 = -4;
pub const NGX_DECLINED: i32 = -5;
pub const NGX_ABORT: i32 = -6;
pub const NGX_EPERM: u32 = 1;
pub const NGX_ENOENT: u32 = 2;
pub const NGX_ENOPATH: u32 = 2;
pub const NGX_ESRCH: u32 = 3;
pub const NGX_EINTR: u32 = 4;
pub const NGX_ECHILD: u32 = 10;
pub const NGX_ENOMEM: u32 = 12;
pub const NGX_EACCES: u32 = 13;
pub const NGX_EBUSY: u32 = 16;
pub const NGX_EEXIST: u32 = 17;
pub const NGX_EEXIST_FILE: u32 = 17;
pub const NGX_EXDEV: u32 = 18;
pub const NGX_ENOTDIR: u32 = 20;
pub const NGX_EISDIR: u32 = 21;
pub const NGX_EINVAL: u32 = 22;
pub const NGX_ENFILE: u32 = 23;
pub const NGX_EMFILE: u32 = 24;
pub const NGX_ENOSPC: u32 = 28;
pub const NGX_EPIPE: u32 = 32;
pub const NGX_EINPROGRESS: u32 = 115;
pub const NGX_ENOPROTOOPT: u32 = 92;
pub const NGX_EOPNOTSUPP: u32 = 95;
pub const NGX_EADDRINUSE: u32 = 98;
pub const NGX_ECONNABORTED: u32 = 103;
pub const NGX_ECONNRESET: u32 = 104;
pub const NGX_ENOTCONN: u32 = 107;
pub const NGX_ETIMEDOUT: u32 = 110;
pub const NGX_ECONNREFUSED: u32 = 111;
pub const NGX_ENAMETOOLONG: u32 = 36;
pub const NGX_ENETDOWN: u32 = 100;
pub const NGX_ENETUNREACH: u32 = 101;
pub const NGX_EHOSTDOWN: u32 = 112;
pub const NGX_EHOSTUNREACH: u32 = 113;
pub const NGX_ENOSYS: u32 = 38;
pub const NGX_ECANCELED: u32 = 125;
pub const NGX_EILSEQ: u32 = 84;
pub const NGX_ENOMOREFILES: u32 = 0;
pub const NGX_ELOOP: u32 = 40;
pub const NGX_EBADF: u32 = 9;
pub const NGX_EMLINK: u32 = 31;
pub const NGX_EAGAIN: u32 = 11;
pub const NGX_HAVE_ATOMIC_OPS: u32 = 1;
pub const NGX_TID_T_FMT: &[u8; 3] = b"%P\0";
pub const ngx_socket_n: &[u8; 9] = b"socket()\0";
pub const ngx_nonblocking_n: &[u8; 15] = b"ioctl(FIONBIO)\0";
pub const ngx_blocking_n: &[u8; 16] = b"ioctl(!FIONBIO)\0";
pub const ngx_socket_nread_n: &[u8; 16] = b"ioctl(FIONREAD)\0";
pub const ngx_tcp_nopush_n: &[u8; 21] = b"setsockopt(TCP_CORK)\0";
pub const ngx_tcp_push_n: &[u8; 22] = b"setsockopt(!TCP_CORK)\0";
pub const ngx_shutdown_socket_n: &[u8; 11] = b"shutdown()\0";
pub const ngx_close_socket_n: &[u8; 15] = b"close() socket\0";
pub const NGX_ESCAPE_URI: u32 = 0;
pub const NGX_ESCAPE_ARGS: u32 = 1;
pub const NGX_ESCAPE_URI_COMPONENT: u32 = 2;
pub const NGX_ESCAPE_HTML: u32 = 3;
pub const NGX_ESCAPE_REFRESH: u32 = 4;
pub const NGX_ESCAPE_MEMCACHED: u32 = 5;
pub const NGX_ESCAPE_MAIL_AUTH: u32 = 6;
pub const NGX_UNESCAPE_URI: u32 = 1;
pub const NGX_UNESCAPE_REDIRECT: u32 = 2;
pub const NGX_INVALID_FILE: i32 = -1;
pub const NGX_FILE_ERROR: i32 = -1;
pub const ngx_open_file_n: &[u8; 7] = b"open()\0";
pub const NGX_FILE_RDONLY: u32 = 0;
pub const NGX_FILE_WRONLY: u32 = 1;
pub const NGX_FILE_RDWR: u32 = 2;
pub const NGX_FILE_CREATE_OR_OPEN: u32 = 64;
pub const NGX_FILE_OPEN: u32 = 0;
pub const NGX_FILE_TRUNCATE: u32 = 576;
pub const NGX_FILE_APPEND: u32 = 1025;
pub const NGX_FILE_NONBLOCK: u32 = 2048;
pub const NGX_FILE_NOFOLLOW: u32 = 131072;
pub const NGX_FILE_DIRECTORY: u32 = 65536;
pub const NGX_FILE_SEARCH: u32 = 2162688;
pub const NGX_FILE_DEFAULT_ACCESS: u32 = 420;
pub const NGX_FILE_OWNER_ACCESS: u32 = 384;
pub const ngx_close_file_n: &[u8; 8] = b"close()\0";
pub const ngx_delete_file_n: &[u8; 9] = b"unlink()\0";
pub const ngx_open_tempfile_n: &[u8; 7] = b"open()\0";
pub const ngx_read_file_n: &[u8; 8] = b"pread()\0";
pub const ngx_read_fd_n: &[u8; 7] = b"read()\0";
pub const ngx_write_fd_n: &[u8; 8] = b"write()\0";
pub const NGX_LINEFEED_SIZE: u32 = 1;
pub const NGX_LINEFEED: &[u8; 2] = b"\n\0";
pub const ngx_rename_file_n: &[u8; 9] = b"rename()\0";
pub const ngx_change_file_access_n: &[u8; 8] = b"chmod()\0";
pub const ngx_set_file_time_n: &[u8; 9] = b"utimes()\0";
pub const ngx_file_info_n: &[u8; 7] = b"stat()\0";
pub const ngx_fd_info_n: &[u8; 8] = b"fstat()\0";
pub const ngx_link_info_n: &[u8; 8] = b"lstat()\0";
pub const ngx_realpath_n: &[u8; 11] = b"realpath()\0";
pub const ngx_getcwd_n: &[u8; 9] = b"getcwd()\0";
pub const NGX_HAVE_MAX_PATH: u32 = 1;
pub const NGX_MAX_PATH: u32 = 4096;
pub const ngx_open_dir_n: &[u8; 10] = b"opendir()\0";
pub const ngx_close_dir_n: &[u8; 11] = b"closedir()\0";
pub const ngx_read_dir_n: &[u8; 10] = b"readdir()\0";
pub const ngx_create_dir_n: &[u8; 8] = b"mkdir()\0";
pub const ngx_delete_dir_n: &[u8; 8] = b"rmdir()\0";
pub const ngx_de_info_n: &[u8; 7] = b"stat()\0";
pub const ngx_de_link_info_n: &[u8; 8] = b"lstat()\0";
pub const ngx_open_glob_n: &[u8; 7] = b"glob()\0";
pub const ngx_trylock_fd_n: &[u8; 24] = b"fcntl(F_SETLK, F_WRLCK)\0";
pub const ngx_lock_fd_n: &[u8; 25] = b"fcntl(F_SETLKW, F_WRLCK)\0";
pub const ngx_unlock_fd_n: &[u8; 24] = b"fcntl(F_SETLK, F_UNLCK)\0";
pub const NGX_HAVE_READ_AHEAD: u32 = 1;
pub const ngx_read_ahead_n: &[u8; 37] = b"posix_fadvise(POSIX_FADV_SEQUENTIAL)\0";
pub const ngx_directio_on_n: &[u8; 16] = b"fcntl(O_DIRECT)\0";
pub const ngx_directio_off_n: &[u8; 17] = b"fcntl(!O_DIRECT)\0";
pub const ngx_openat_file_n: &[u8; 9] = b"openat()\0";
pub const ngx_file_at_info_n: &[u8; 10] = b"fstatat()\0";
pub const ngx_stdout: u32 = 1;
pub const ngx_stderr: u32 = 2;
pub const ngx_set_stderr_n: &[u8; 20] = b"dup2(STDERR_FILENO)\0";
pub const NGX_HAVE_CPU_AFFINITY: u32 = 1;
pub const NGX_SETPROCTITLE_USES_ENV: u32 = 1;
pub const NGX_SETPROCTITLE_PAD: u8 = 0u8;
pub const NGX_INVALID_PID: i32 = -1;
pub const NGX_MAX_PROCESSES: u32 = 1024;
pub const NGX_PROCESS_NORESPAWN: i32 = -1;
pub const NGX_PROCESS_JUST_SPAWN: i32 = -2;
pub const NGX_PROCESS_RESPAWN: i32 = -3;
pub const NGX_PROCESS_JUST_RESPAWN: i32 = -4;
pub const NGX_PROCESS_DETACHED: i32 = -5;
pub const ngx_dlopen_n: &[u8; 9] = b"dlopen()\0";
pub const ngx_dlsym_n: &[u8; 8] = b"dlsym()\0";
pub const ngx_dlclose_n: &[u8; 10] = b"dlclose()\0";
pub const NGX_LOG_STDERR: u32 = 0;
pub const NGX_LOG_EMERG: u32 = 1;
pub const NGX_LOG_ALERT: u32 = 2;
pub const NGX_LOG_CRIT: u32 = 3;
pub const NGX_LOG_ERR: u32 = 4;
pub const NGX_LOG_WARN: u32 = 5;
pub const NGX_LOG_NOTICE: u32 = 6;
pub const NGX_LOG_INFO: u32 = 7;
pub const NGX_LOG_DEBUG: u32 = 8;
pub const NGX_LOG_DEBUG_CORE: u32 = 16;
pub const NGX_LOG_DEBUG_ALLOC: u32 = 32;
pub const NGX_LOG_DEBUG_MUTEX: u32 = 64;
pub const NGX_LOG_DEBUG_EVENT: u32 = 128;
pub const NGX_LOG_DEBUG_HTTP: u32 = 256;
pub const NGX_LOG_DEBUG_MAIL: u32 = 512;
pub const NGX_LOG_DEBUG_STREAM: u32 = 1024;
pub const NGX_LOG_DEBUG_FIRST: u32 = 16;
pub const NGX_LOG_DEBUG_LAST: u32 = 1024;
pub const NGX_LOG_DEBUG_CONNECTION: u32 = 2147483648;
pub const NGX_LOG_DEBUG_ALL: u32 = 2147483632;
pub const NGX_MAX_ERROR_STR: u32 = 2048;
pub const NGX_HAVE_VARIADIC_MACROS: u32 = 1;
pub const NGX_DEFAULT_POOL_SIZE: u32 = 16384;
pub const NGX_POOL_ALIGNMENT: u32 = 16;
pub const NGX_HASH_SMALL: u32 = 1;
pub const NGX_HASH_LARGE: u32 = 2;
pub const NGX_HASH_LARGE_ASIZE: u32 = 16384;
pub const NGX_HASH_LARGE_HSIZE: u32 = 10007;
pub const NGX_HASH_WILDCARD_KEY: u32 = 1;
pub const NGX_HASH_READONLY_KEY: u32 = 2;
pub const NGX_MAX_PATH_LEVEL: u32 = 3;
pub const NGX_REGEX_NO_MATCHED: i32 = -1;
pub const NGX_REGEX_CASELESS: u32 = 1;
pub const NGX_REGEX_MULTILINE: u32 = 2;
pub const ngx_regex_exec_n: &[u8; 14] = b"pcre2_match()\0";
pub const ngx_next_time_n: &[u8; 9] = b"mktime()\0";
pub const NGX_CYCLE_POOL_SIZE: u32 = 16384;
pub const NGX_DEBUG_POINTS_STOP: u32 = 1;
pub const NGX_DEBUG_POINTS_ABORT: u32 = 2;
pub const NGX_RESOLVE_A: u32 = 1;
pub const NGX_RESOLVE_CNAME: u32 = 5;
pub const NGX_RESOLVE_PTR: u32 = 12;
pub const NGX_RESOLVE_MX: u32 = 15;
pub const NGX_RESOLVE_TXT: u32 = 16;
pub const NGX_RESOLVE_AAAA: u32 = 28;
pub const NGX_RESOLVE_SRV: u32 = 33;
pub const NGX_RESOLVE_DNAME: u32 = 39;
pub const NGX_RESOLVE_FORMERR: u32 = 1;
pub const NGX_RESOLVE_SERVFAIL: u32 = 2;
pub const NGX_RESOLVE_NXDOMAIN: u32 = 3;
pub const NGX_RESOLVE_NOTIMP: u32 = 4;
pub const NGX_RESOLVE_REFUSED: u32 = 5;
pub const NGX_RESOLVE_TIMEDOUT: u32 = 110;
pub const NGX_RESOLVER_MAX_RECURSION: u32 = 50;
pub const NGX_SSL_NAME: &[u8; 8] = b"OpenSSL\0";
pub const NGX_SSL_NO_SCACHE: i32 = -2;
pub const NGX_SSL_NONE_SCACHE: i32 = -3;
pub const NGX_SSL_NO_BUILTIN_SCACHE: i32 = -4;
pub const NGX_SSL_DFLT_BUILTIN_SCACHE: i32 = -5;
pub const NGX_SSL_MAX_SESSION_SIZE: u32 = 4096;
pub const NGX_SSL_SSLv2: u32 = 2;
pub const NGX_SSL_SSLv3: u32 = 4;
pub const NGX_SSL_TLSv1: u32 = 8;
pub const NGX_SSL_TLSv1_1: u32 = 16;
pub const NGX_SSL_TLSv1_2: u32 = 32;
pub const NGX_SSL_TLSv1_3: u32 = 64;
pub const NGX_SSL_BUFFER: u32 = 1;
pub const NGX_SSL_CLIENT: u32 = 2;
pub const NGX_SSL_BUFSIZE: u32 = 16384;
pub const NGX_CMD_OPEN_CHANNEL: u32 = 1;
pub const NGX_CMD_CLOSE_CHANNEL: u32 = 2;
pub const NGX_CMD_QUIT: u32 = 3;
pub const NGX_CMD_TERMINATE: u32 = 4;
pub const NGX_CMD_REOPEN: u32 = 5;
pub const NGX_PROCESS_SINGLE: u32 = 0;
pub const NGX_PROCESS_MASTER: u32 = 1;
pub const NGX_PROCESS_SIGNALLER: u32 = 2;
pub const NGX_PROCESS_WORKER: u32 = 3;
pub const NGX_PROCESS_HELPER: u32 = 4;
pub const NGX_CONF_NOARGS: u32 = 1;
pub const NGX_CONF_TAKE1: u32 = 2;
pub const NGX_CONF_TAKE2: u32 = 4;
pub const NGX_CONF_TAKE3: u32 = 8;
pub const NGX_CONF_TAKE4: u32 = 16;
pub const NGX_CONF_TAKE5: u32 = 32;
pub const NGX_CONF_TAKE6: u32 = 64;
pub const NGX_CONF_TAKE7: u32 = 128;
pub const NGX_CONF_MAX_ARGS: u32 = 8;
pub const NGX_CONF_TAKE12: u32 = 6;
pub const NGX_CONF_TAKE13: u32 = 10;
pub const NGX_CONF_TAKE23: u32 = 12;
pub const NGX_CONF_TAKE123: u32 = 14;
pub const NGX_CONF_TAKE1234: u32 = 30;
pub const NGX_CONF_ARGS_NUMBER: u32 = 255;
pub const NGX_CONF_BLOCK: u32 = 256;
pub const NGX_CONF_FLAG: u32 = 512;
pub const NGX_CONF_ANY: u32 = 1024;
pub const NGX_CONF_1MORE: u32 = 2048;
pub const NGX_CONF_2MORE: u32 = 4096;
pub const NGX_DIRECT_CONF: u32 = 65536;
pub const NGX_MAIN_CONF: u32 = 16777216;
pub const NGX_ANY_CONF: u32 = 4278190080;
pub const NGX_CONF_UNSET: i32 = -1;
pub const NGX_CONF_BLOCK_START: u32 = 1;
pub const NGX_CONF_BLOCK_DONE: u32 = 2;
pub const NGX_CONF_FILE_DONE: u32 = 3;
pub const NGX_CORE_MODULE: u32 = 1163022147;
pub const NGX_CONF_MODULE: u32 = 1179537219;
pub const NGX_MAX_CONF_ERRSTR: u32 = 1024;
pub const NGX_CONF_BITMASK_SET: u32 = 1;
pub const NGX_OLDPID_EXT: &[u8; 8] = b".oldbin\0";
pub const NGX_MODULE_SIGNATURE_1: &[u8; 2] = b"0\0";
pub const NGX_MODULE_SIGNATURE_2: &[u8; 2] = b"0\0";
pub const NGX_MODULE_SIGNATURE_3: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_4: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_5: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_6: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_7: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_8: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_9: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_10: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_11: &[u8; 2] = b"0\0";
pub const NGX_MODULE_SIGNATURE_12: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_13: &[u8; 2] = b"0\0";
pub const NGX_MODULE_SIGNATURE_14: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_15: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_16: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_17: &[u8; 2] = b"0\0";
pub const NGX_MODULE_SIGNATURE_18: &[u8; 2] = b"0\0";
pub const NGX_MODULE_SIGNATURE_19: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_20: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_21: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_22: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_23: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_24: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_25: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_26: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_27: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_28: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_29: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_30: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_31: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_32: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_33: &[u8; 2] = b"1\0";
pub const NGX_MODULE_SIGNATURE_34: &[u8; 2] = b"1\0";
pub const NGX_OPEN_FILE_DIRECTIO_OFF: u64 = 9223372036854775807;
pub const NGX_IO_SENDFILE: u32 = 1;
pub const NGX_IOVS_PREALLOCATE: u32 = 64;
pub const NGX_LOWLEVEL_BUFFERED: u32 = 15;
pub const NGX_SSL_BUFFERED: u32 = 1;
pub const NGX_HTTP_V2_BUFFERED: u32 = 2;
pub const NGX_PROXY_PROTOCOL_V1_MAX_HEADER: u32 = 107;
pub const NGX_PROXY_PROTOCOL_MAX_HEADER: u32 = 4096;
pub const NGX_DISABLE_SYMLINKS_OFF: u32 = 0;
pub const NGX_DISABLE_SYMLINKS_ON: u32 = 1;
pub const NGX_DISABLE_SYMLINKS_NOTOWNER: u32 = 2;
pub const NGX_INVALID_INDEX: u32 = 3503345872;
pub const NGX_USE_LEVEL_EVENT: u32 = 1;
pub const NGX_USE_ONESHOT_EVENT: u32 = 2;
pub const NGX_USE_CLEAR_EVENT: u32 = 4;
pub const NGX_USE_KQUEUE_EVENT: u32 = 8;
pub const NGX_USE_LOWAT_EVENT: u32 = 16;
pub const NGX_USE_GREEDY_EVENT: u32 = 32;
pub const NGX_USE_EPOLL_EVENT: u32 = 64;
pub const NGX_USE_RTSIG_EVENT: u32 = 128;
pub const NGX_USE_AIO_EVENT: u32 = 256;
pub const NGX_USE_IOCP_EVENT: u32 = 512;
pub const NGX_USE_FD_EVENT: u32 = 1024;
pub const NGX_USE_TIMER_EVENT: u32 = 2048;
pub const NGX_USE_EVENTPORT_EVENT: u32 = 4096;
pub const NGX_USE_VNODE_EVENT: u32 = 8192;
pub const NGX_CLOSE_EVENT: u32 = 1;
pub const NGX_DISABLE_EVENT: u32 = 2;
pub const NGX_FLUSH_EVENT: u32 = 4;
pub const NGX_LOWAT_EVENT: u32 = 0;
pub const NGX_VNODE_EVENT: u32 = 0;
pub const NGX_LEVEL_EVENT: u32 = 0;
pub const NGX_ONESHOT_EVENT: u32 = 1879048192;
pub const NGX_EVENT_MODULE: u32 = 1414420037;
pub const NGX_EVENT_CONF: u32 = 33554432;
pub const NGX_UPDATE_TIME: u32 = 1;
pub const NGX_POST_EVENTS: u32 = 2;
pub const NGX_TIMER_LAZY_DELAY: u32 = 300;
pub const NGX_HAVE_ADDRINFO_CMSG: u32 = 1;
pub const NGX_HTTP_VAR_CHANGEABLE: u32 = 1;
pub const NGX_HTTP_VAR_NOCACHEABLE: u32 = 2;
pub const NGX_HTTP_VAR_INDEXED: u32 = 4;
pub const NGX_HTTP_VAR_NOHASH: u32 = 8;
pub const NGX_HTTP_VAR_WEAK: u32 = 16;
pub const NGX_HTTP_VAR_PREFIX: u32 = 32;
pub const NGX_HTTP_MODULE: u32 = 1347703880;
pub const NGX_HTTP_MAIN_CONF: u32 = 33554432;
pub const NGX_HTTP_SRV_CONF: u32 = 67108864;
pub const NGX_HTTP_LOC_CONF: u32 = 134217728;
pub const NGX_HTTP_UPS_CONF: u32 = 268435456;
pub const NGX_HTTP_SIF_CONF: u32 = 536870912;
pub const NGX_HTTP_LIF_CONF: u32 = 1073741824;
pub const NGX_HTTP_LMT_CONF: u32 = 2147483648;
pub const NGX_HTTP_MAX_URI_CHANGES: u32 = 10;
pub const NGX_HTTP_MAX_SUBREQUESTS: u32 = 50;
pub const NGX_HTTP_LC_HEADER_LEN: u32 = 32;
pub const NGX_HTTP_DISCARD_BUFFER_SIZE: u32 = 4096;
pub const NGX_HTTP_LINGERING_BUFFER_SIZE: u32 = 4096;
pub const NGX_HTTP_VERSION_9: u32 = 9;
pub const NGX_HTTP_VERSION_10: u32 = 1000;
pub const NGX_HTTP_VERSION_11: u32 = 1001;
pub const NGX_HTTP_VERSION_20: u32 = 2000;
pub const NGX_HTTP_UNKNOWN: u32 = 1;
pub const NGX_HTTP_GET: u32 = 2;
pub const NGX_HTTP_HEAD: u32 = 4;
pub const NGX_HTTP_POST: u32 = 8;
pub const NGX_HTTP_PUT: u32 = 16;
pub const NGX_HTTP_DELETE: u32 = 32;
pub const NGX_HTTP_MKCOL: u32 = 64;
pub const NGX_HTTP_COPY: u32 = 128;
pub const NGX_HTTP_MOVE: u32 = 256;
pub const NGX_HTTP_OPTIONS: u32 = 512;
pub const NGX_HTTP_PROPFIND: u32 = 1024;
pub const NGX_HTTP_PROPPATCH: u32 = 2048;
pub const NGX_HTTP_LOCK: u32 = 4096;
pub const NGX_HTTP_UNLOCK: u32 = 8192;
pub const NGX_HTTP_PATCH: u32 = 16384;
pub const NGX_HTTP_TRACE: u32 = 32768;
pub const NGX_HTTP_CONNECT: u32 = 65536;
pub const NGX_HTTP_CONNECTION_CLOSE: u32 = 1;
pub const NGX_HTTP_CONNECTION_KEEP_ALIVE: u32 = 2;
pub const NGX_NONE: u32 = 1;
pub const NGX_HTTP_PARSE_HEADER_DONE: u32 = 1;
pub const NGX_HTTP_CLIENT_ERROR: u32 = 10;
pub const NGX_HTTP_PARSE_INVALID_METHOD: u32 = 10;
pub const NGX_HTTP_PARSE_INVALID_REQUEST: u32 = 11;
pub const NGX_HTTP_PARSE_INVALID_VERSION: u32 = 12;
pub const NGX_HTTP_PARSE_INVALID_09_METHOD: u32 = 13;
pub const NGX_HTTP_PARSE_INVALID_HEADER: u32 = 14;
pub const NGX_HTTP_SUBREQUEST_IN_MEMORY: u32 = 2;
pub const NGX_HTTP_SUBREQUEST_WAITED: u32 = 4;
pub const NGX_HTTP_SUBREQUEST_CLONE: u32 = 8;
pub const NGX_HTTP_SUBREQUEST_BACKGROUND: u32 = 16;
pub const NGX_HTTP_LOG_UNSAFE: u32 = 1;
pub const NGX_HTTP_CONTINUE: u32 = 100;
pub const NGX_HTTP_SWITCHING_PROTOCOLS: u32 = 101;
pub const NGX_HTTP_PROCESSING: u32 = 102;
pub const NGX_HTTP_OK: u32 = 200;
pub const NGX_HTTP_CREATED: u32 = 201;
pub const NGX_HTTP_ACCEPTED: u32 = 202;
pub const NGX_HTTP_NO_CONTENT: u32 = 204;
pub const NGX_HTTP_PARTIAL_CONTENT: u32 = 206;
pub const NGX_HTTP_SPECIAL_RESPONSE: u32 = 300;
pub const NGX_HTTP_MOVED_PERMANENTLY: u32 = 301;
pub const NGX_HTTP_MOVED_TEMPORARILY: u32 = 302;
pub const NGX_HTTP_SEE_OTHER: u32 = 303;
pub const NGX_HTTP_NOT_MODIFIED: u32 = 304;
pub const NGX_HTTP_TEMPORARY_REDIRECT: u32 = 307;
pub const NGX_HTTP_PERMANENT_REDIRECT: u32 = 308;
pub const NGX_HTTP_BAD_REQUEST: u32 = 400;
pub const NGX_HTTP_UNAUTHORIZED: u32 = 401;
pub const NGX_HTTP_FORBIDDEN: u32 = 403;
pub const NGX_HTTP_NOT_FOUND: u32 = 404;
pub const NGX_HTTP_NOT_ALLOWED: u32 = 405;
pub const NGX_HTTP_REQUEST_TIME_OUT: u32 = 408;
pub const NGX_HTTP_CONFLICT: u32 = 409;
pub const NGX_HTTP_LENGTH_REQUIRED: u32 = 411;
pub const NGX_HTTP_PRECONDITION_FAILED: u32 = 412;
pub const NGX_HTTP_REQUEST_ENTITY_TOO_LARGE: u32 = 413;
pub const NGX_HTTP_REQUEST_URI_TOO_LARGE: u32 = 414;
pub const NGX_HTTP_UNSUPPORTED_MEDIA_TYPE: u32 = 415;
pub const NGX_HTTP_RANGE_NOT_SATISFIABLE: u32 = 416;
pub const NGX_HTTP_MISDIRECTED_REQUEST: u32 = 421;
pub const NGX_HTTP_TOO_MANY_REQUESTS: u32 = 429;
pub const NGX_HTTP_CLOSE: u32 = 444;
pub const NGX_HTTP_NGINX_CODES: u32 = 494;
pub const NGX_HTTP_REQUEST_HEADER_TOO_LARGE: u32 = 494;
pub const NGX_HTTPS_CERT_ERROR: u32 = 495;
pub const NGX_HTTPS_NO_CERT: u32 = 496;
pub const NGX_HTTP_TO_HTTPS: u32 = 497;
pub const NGX_HTTP_CLIENT_CLOSED_REQUEST: u32 = 499;
pub const NGX_HTTP_INTERNAL_SERVER_ERROR: u32 = 500;
pub const NGX_HTTP_NOT_IMPLEMENTED: u32 = 501;
pub const NGX_HTTP_BAD_GATEWAY: u32 = 502;
pub const NGX_HTTP_SERVICE_UNAVAILABLE: u32 = 503;
pub const NGX_HTTP_GATEWAY_TIME_OUT: u32 = 504;
pub const NGX_HTTP_VERSION_NOT_SUPPORTED: u32 = 505;
pub const NGX_HTTP_INSUFFICIENT_STORAGE: u32 = 507;
pub const NGX_HTTP_LOWLEVEL_BUFFERED: u32 = 240;
pub const NGX_HTTP_WRITE_BUFFERED: u32 = 16;
pub const NGX_HTTP_GZIP_BUFFERED: u32 = 32;
pub const NGX_HTTP_SSI_BUFFERED: u32 = 1;
pub const NGX_HTTP_SUB_BUFFERED: u32 = 2;
pub const NGX_HTTP_COPY_BUFFERED: u32 = 4;
pub const NGX_PEER_KEEPALIVE: u32 = 1;
pub const NGX_PEER_NEXT: u32 = 2;
pub const NGX_PEER_FAILED: u32 = 4;
pub const NGX_HTTP_UPSTREAM_FT_ERROR: u32 = 2;
pub const NGX_HTTP_UPSTREAM_FT_TIMEOUT: u32 = 4;
pub const NGX_HTTP_UPSTREAM_FT_INVALID_HEADER: u32 = 8;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_500: u32 = 16;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_502: u32 = 32;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_503: u32 = 64;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_504: u32 = 128;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_403: u32 = 256;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_404: u32 = 512;
pub const NGX_HTTP_UPSTREAM_FT_HTTP_429: u32 = 1024;
pub const NGX_HTTP_UPSTREAM_FT_UPDATING: u32 = 2048;
pub const NGX_HTTP_UPSTREAM_FT_BUSY_LOCK: u32 = 4096;
pub const NGX_HTTP_UPSTREAM_FT_MAX_WAITING: u32 = 8192;
pub const NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT: u32 = 16384;
pub const NGX_HTTP_UPSTREAM_FT_NOLIVE: u32 = 1073741824;
pub const NGX_HTTP_UPSTREAM_FT_OFF: u32 = 2147483648;
pub const NGX_HTTP_UPSTREAM_FT_STATUS: u32 = 2032;
pub const NGX_HTTP_UPSTREAM_INVALID_HEADER: u32 = 40;
pub const NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT: u32 = 2;
pub const NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES: u32 = 4;
pub const NGX_HTTP_UPSTREAM_IGN_EXPIRES: u32 = 8;
pub const NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL: u32 = 16;
pub const NGX_HTTP_UPSTREAM_IGN_SET_COOKIE: u32 = 32;
pub const NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE: u32 = 64;
pub const NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING: u32 = 128;
pub const NGX_HTTP_UPSTREAM_IGN_XA_CHARSET: u32 = 256;
pub const NGX_HTTP_UPSTREAM_IGN_VARY: u32 = 512;
pub const NGX_HTTP_UPSTREAM_CREATE: u32 = 1;
pub const NGX_HTTP_UPSTREAM_WEIGHT: u32 = 2;
pub const NGX_HTTP_UPSTREAM_MAX_FAILS: u32 = 4;
pub const NGX_HTTP_UPSTREAM_FAIL_TIMEOUT: u32 = 8;
pub const NGX_HTTP_UPSTREAM_DOWN: u32 = 16;
pub const NGX_HTTP_UPSTREAM_BACKUP: u32 = 32;
pub const NGX_HTTP_UPSTREAM_MAX_CONNS: u32 = 256;
pub const NGX_HTTP_GZIP_PROXIED_OFF: u32 = 2;
pub const NGX_HTTP_GZIP_PROXIED_EXPIRED: u32 = 4;
pub const NGX_HTTP_GZIP_PROXIED_NO_CACHE: u32 = 8;
pub const NGX_HTTP_GZIP_PROXIED_NO_STORE: u32 = 16;
pub const NGX_HTTP_GZIP_PROXIED_PRIVATE: u32 = 32;
pub const NGX_HTTP_GZIP_PROXIED_NO_LM: u32 = 64;
pub const NGX_HTTP_GZIP_PROXIED_NO_ETAG: u32 = 128;
pub const NGX_HTTP_GZIP_PROXIED_AUTH: u32 = 256;
pub const NGX_HTTP_GZIP_PROXIED_ANY: u32 = 512;
pub const NGX_HTTP_AIO_OFF: u32 = 0;
pub const NGX_HTTP_AIO_ON: u32 = 1;
pub const NGX_HTTP_AIO_THREADS: u32 = 2;
pub const NGX_HTTP_SATISFY_ALL: u32 = 0;
pub const NGX_HTTP_SATISFY_ANY: u32 = 1;
pub const NGX_HTTP_LINGERING_OFF: u32 = 0;
pub const NGX_HTTP_LINGERING_ON: u32 = 1;
pub const NGX_HTTP_LINGERING_ALWAYS: u32 = 2;
pub const NGX_HTTP_IMS_OFF: u32 = 0;
pub const NGX_HTTP_IMS_EXACT: u32 = 1;
pub const NGX_HTTP_IMS_BEFORE: u32 = 2;
pub const NGX_HTTP_KEEPALIVE_DISABLE_NONE: u32 = 2;
pub const NGX_HTTP_KEEPALIVE_DISABLE_MSIE6: u32 = 4;
pub const NGX_HTTP_KEEPALIVE_DISABLE_SAFARI: u32 = 8;
pub const NGX_HTTP_SERVER_TOKENS_OFF: u32 = 0;
pub const NGX_HTTP_SERVER_TOKENS_ON: u32 = 1;
pub const NGX_HTTP_SERVER_TOKENS_BUILD: u32 = 2;
pub const NGX_HTTP_V2_ALPN_PROTO: &[u8; 4] = b"\x02h2\0";
pub const NGX_HTTP_V2_STATE_BUFFER_SIZE: u32 = 16;
pub const NGX_HTTP_V2_DEFAULT_FRAME_SIZE: u32 = 16384;
pub const NGX_HTTP_V2_MAX_FRAME_SIZE: u32 = 16777215;
pub const NGX_HTTP_V2_INT_OCTETS: u32 = 4;
pub const NGX_HTTP_V2_MAX_FIELD: u32 = 2097278;
pub const NGX_HTTP_V2_STREAM_ID_SIZE: u32 = 4;
pub const NGX_HTTP_V2_FRAME_HEADER_SIZE: u32 = 9;
pub const NGX_HTTP_V2_DATA_FRAME: u32 = 0;
pub const NGX_HTTP_V2_HEADERS_FRAME: u32 = 1;
pub const NGX_HTTP_V2_PRIORITY_FRAME: u32 = 2;
pub const NGX_HTTP_V2_RST_STREAM_FRAME: u32 = 3;
pub const NGX_HTTP_V2_SETTINGS_FRAME: u32 = 4;
pub const NGX_HTTP_V2_PUSH_PROMISE_FRAME: u32 = 5;
pub const NGX_HTTP_V2_PING_FRAME: u32 = 6;
pub const NGX_HTTP_V2_GOAWAY_FRAME: u32 = 7;
pub const NGX_HTTP_V2_WINDOW_UPDATE_FRAME: u32 = 8;
pub const NGX_HTTP_V2_CONTINUATION_FRAME: u32 = 9;
pub const NGX_HTTP_V2_NO_FLAG: u32 = 0;
pub const NGX_HTTP_V2_ACK_FLAG: u32 = 1;
pub const NGX_HTTP_V2_END_STREAM_FLAG: u32 = 1;
pub const NGX_HTTP_V2_END_HEADERS_FLAG: u32 = 4;
pub const NGX_HTTP_V2_PADDED_FLAG: u32 = 8;
pub const NGX_HTTP_V2_PRIORITY_FLAG: u32 = 32;
pub const NGX_HTTP_V2_MAX_WINDOW: u32 = 2147483647;
pub const NGX_HTTP_V2_DEFAULT_WINDOW: u32 = 65535;
pub const NGX_HTTP_V2_DEFAULT_WEIGHT: u32 = 16;
pub const NGX_HTTP_V2_ENCODE_RAW: u32 = 0;
pub const NGX_HTTP_V2_ENCODE_HUFF: u32 = 128;
pub const NGX_HTTP_V2_AUTHORITY_INDEX: u32 = 1;
pub const NGX_HTTP_V2_METHOD_INDEX: u32 = 2;
pub const NGX_HTTP_V2_METHOD_GET_INDEX: u32 = 2;
pub const NGX_HTTP_V2_METHOD_POST_INDEX: u32 = 3;
pub const NGX_HTTP_V2_PATH_INDEX: u32 = 4;
pub const NGX_HTTP_V2_PATH_ROOT_INDEX: u32 = 4;
pub const NGX_HTTP_V2_SCHEME_HTTP_INDEX: u32 = 6;
pub const NGX_HTTP_V2_SCHEME_HTTPS_INDEX: u32 = 7;
pub const NGX_HTTP_V2_STATUS_INDEX: u32 = 8;
pub const NGX_HTTP_V2_STATUS_200_INDEX: u32 = 8;
pub const NGX_HTTP_V2_STATUS_204_INDEX: u32 = 9;
pub const NGX_HTTP_V2_STATUS_206_INDEX: u32 = 10;
pub const NGX_HTTP_V2_STATUS_304_INDEX: u32 = 11;
pub const NGX_HTTP_V2_STATUS_400_INDEX: u32 = 12;
pub const NGX_HTTP_V2_STATUS_404_INDEX: u32 = 13;
pub const NGX_HTTP_V2_STATUS_500_INDEX: u32 = 14;
pub const NGX_HTTP_V2_ACCEPT_ENCODING_INDEX: u32 = 16;
pub const NGX_HTTP_V2_ACCEPT_LANGUAGE_INDEX: u32 = 17;
pub const NGX_HTTP_V2_CONTENT_LENGTH_INDEX: u32 = 28;
pub const NGX_HTTP_V2_CONTENT_TYPE_INDEX: u32 = 31;
pub const NGX_HTTP_V2_DATE_INDEX: u32 = 33;
pub const NGX_HTTP_V2_LAST_MODIFIED_INDEX: u32 = 44;
pub const NGX_HTTP_V2_LOCATION_INDEX: u32 = 46;
pub const NGX_HTTP_V2_SERVER_INDEX: u32 = 54;
pub const NGX_HTTP_V2_USER_AGENT_INDEX: u32 = 58;
pub const NGX_HTTP_V2_VARY_INDEX: u32 = 59;
pub const NGX_HTTP_CACHE_MISS: u32 = 1;
pub const NGX_HTTP_CACHE_BYPASS: u32 = 2;
pub const NGX_HTTP_CACHE_EXPIRED: u32 = 3;
pub const NGX_HTTP_CACHE_STALE: u32 = 4;
pub const NGX_HTTP_CACHE_UPDATING: u32 = 5;
pub const NGX_HTTP_CACHE_REVALIDATED: u32 = 6;
pub const NGX_HTTP_CACHE_HIT: u32 = 7;
pub const NGX_HTTP_CACHE_SCARCE: u32 = 8;
pub const NGX_HTTP_CACHE_KEY_LEN: u32 = 16;
pub const NGX_HTTP_CACHE_ETAG_LEN: u32 = 128;
pub const NGX_HTTP_CACHE_VARY_LEN: u32 = 128;
pub const NGX_HTTP_CACHE_VERSION: u32 = 5;
pub const NGX_HTTP_SSI_MAX_PARAMS: u32 = 16;
pub const NGX_HTTP_SSI_COMMAND_LEN: u32 = 32;
pub const NGX_HTTP_SSI_PARAM_LEN: u32 = 32;
pub const NGX_HTTP_SSI_PARAMS_N: u32 = 4;
pub const NGX_HTTP_SSI_COND_IF: u32 = 1;
pub const NGX_HTTP_SSI_COND_ELSE: u32 = 2;
pub const NGX_HTTP_SSI_NO_ENCODING: u32 = 0;
pub const NGX_HTTP_SSI_URL_ENCODING: u32 = 1;
pub const NGX_HTTP_SSI_ENTITY_ENCODING: u32 = 2;
pub const NGX_HTTP_LAST: u32 = 1;
pub const NGX_HTTP_FLUSH: u32 = 2;
pub const NGX_MAIL_POP3_PROTOCOL: u32 = 0;
pub const NGX_MAIL_IMAP_PROTOCOL: u32 = 1;
pub const NGX_MAIL_SMTP_PROTOCOL: u32 = 2;
pub const NGX_POP3_USER: u32 = 1;
pub const NGX_POP3_PASS: u32 = 2;
pub const NGX_POP3_CAPA: u32 = 3;
pub const NGX_POP3_QUIT: u32 = 4;
pub const NGX_POP3_NOOP: u32 = 5;
pub const NGX_POP3_STLS: u32 = 6;
pub const NGX_POP3_APOP: u32 = 7;
pub const NGX_POP3_AUTH: u32 = 8;
pub const NGX_POP3_STAT: u32 = 9;
pub const NGX_POP3_LIST: u32 = 10;
pub const NGX_POP3_RETR: u32 = 11;
pub const NGX_POP3_DELE: u32 = 12;
pub const NGX_POP3_RSET: u32 = 13;
pub const NGX_POP3_TOP: u32 = 14;
pub const NGX_POP3_UIDL: u32 = 15;
pub const NGX_IMAP_LOGIN: u32 = 1;
pub const NGX_IMAP_LOGOUT: u32 = 2;
pub const NGX_IMAP_CAPABILITY: u32 = 3;
pub const NGX_IMAP_NOOP: u32 = 4;
pub const NGX_IMAP_STARTTLS: u32 = 5;
pub const NGX_IMAP_NEXT: u32 = 6;
pub const NGX_IMAP_AUTHENTICATE: u32 = 7;
pub const NGX_SMTP_HELO: u32 = 1;
pub const NGX_SMTP_EHLO: u32 = 2;
pub const NGX_SMTP_AUTH: u32 = 3;
pub const NGX_SMTP_QUIT: u32 = 4;
pub const NGX_SMTP_NOOP: u32 = 5;
pub const NGX_SMTP_MAIL: u32 = 6;
pub const NGX_SMTP_RSET: u32 = 7;
pub const NGX_SMTP_RCPT: u32 = 8;
pub const NGX_SMTP_DATA: u32 = 9;
pub const NGX_SMTP_VRFY: u32 = 10;
pub const NGX_SMTP_EXPN: u32 = 11;
pub const NGX_SMTP_HELP: u32 = 12;
pub const NGX_SMTP_STARTTLS: u32 = 13;
pub const NGX_MAIL_AUTH_PLAIN: u32 = 0;
pub const NGX_MAIL_AUTH_LOGIN: u32 = 1;
pub const NGX_MAIL_AUTH_LOGIN_USERNAME: u32 = 2;
pub const NGX_MAIL_AUTH_APOP: u32 = 3;
pub const NGX_MAIL_AUTH_CRAM_MD5: u32 = 4;
pub const NGX_MAIL_AUTH_EXTERNAL: u32 = 5;
pub const NGX_MAIL_AUTH_NONE: u32 = 6;
pub const NGX_MAIL_AUTH_PLAIN_ENABLED: u32 = 2;
pub const NGX_MAIL_AUTH_LOGIN_ENABLED: u32 = 4;
pub const NGX_MAIL_AUTH_APOP_ENABLED: u32 = 8;
pub const NGX_MAIL_AUTH_CRAM_MD5_ENABLED: u32 = 16;
pub const NGX_MAIL_AUTH_EXTERNAL_ENABLED: u32 = 32;
pub const NGX_MAIL_AUTH_NONE_ENABLED: u32 = 64;
pub const NGX_MAIL_PARSE_INVALID_COMMAND: u32 = 20;
pub const NGX_MAIL_MODULE: u32 = 1279869261;
pub const NGX_MAIL_MAIN_CONF: u32 = 33554432;
pub const NGX_MAIL_SRV_CONF: u32 = 67108864;
pub const NGX_STREAM_VAR_CHANGEABLE: u32 = 1;
pub const NGX_STREAM_VAR_NOCACHEABLE: u32 = 2;
pub const NGX_STREAM_VAR_INDEXED: u32 = 4;
pub const NGX_STREAM_VAR_NOHASH: u32 = 8;
pub const NGX_STREAM_VAR_WEAK: u32 = 16;
pub const NGX_STREAM_VAR_PREFIX: u32 = 32;
pub const NGX_STREAM_UPSTREAM_CREATE: u32 = 1;
pub const NGX_STREAM_UPSTREAM_WEIGHT: u32 = 2;
pub const NGX_STREAM_UPSTREAM_MAX_FAILS: u32 = 4;
pub const NGX_STREAM_UPSTREAM_FAIL_TIMEOUT: u32 = 8;
pub const NGX_STREAM_UPSTREAM_DOWN: u32 = 16;
pub const NGX_STREAM_UPSTREAM_BACKUP: u32 = 32;
pub const NGX_STREAM_UPSTREAM_MAX_CONNS: u32 = 256;
pub const NGX_STREAM_UPSTREAM_NOTIFY_CONNECT: u32 = 1;
pub const NGX_STREAM_OK: u32 = 200;
pub const NGX_STREAM_BAD_REQUEST: u32 = 400;
pub const NGX_STREAM_FORBIDDEN: u32 = 403;
pub const NGX_STREAM_INTERNAL_SERVER_ERROR: u32 = 500;
pub const NGX_STREAM_BAD_GATEWAY: u32 = 502;
pub const NGX_STREAM_SERVICE_UNAVAILABLE: u32 = 503;
pub const NGX_STREAM_MODULE: u32 = 1297241171;
pub const NGX_STREAM_MAIN_CONF: u32 = 33554432;
pub const NGX_STREAM_SRV_CONF: u32 = 67108864;
pub const NGX_STREAM_UPS_CONF: u32 = 134217728;
pub const NGX_STREAM_WRITE_BUFFERED: u32 = 16;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __time_t = ::std::os::raw::c_long;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type ino_t = __ino64_t;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off64_t;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub type va_list = __builtin_va_list;
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino64_t,
    pub d_off: __off64_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
pub type __size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glob_t {
    pub gl_pathc: __size_t,
    pub gl_pathv: *mut *mut ::std::os::raw::c_char,
    pub gl_offs: __size_t,
    pub gl_flags: ::std::os::raw::c_int,
    pub gl_closedir: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub gl_readdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut dirent,
    >,
    pub gl_opendir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_lstat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_stat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_glob_t() {
    const UNINIT: ::std::mem::MaybeUninit<glob_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<glob_t>(),
        72usize,
        concat!("Size of: ", stringify!(glob_t))
    );
    assert_eq!(
        ::std::mem::align_of::<glob_t>(),
        8usize,
        concat!("Alignment of ", stringify!(glob_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_pathc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_pathc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_pathv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_pathv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_offs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_closedir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_closedir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_readdir) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_readdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_opendir) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_opendir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_lstat) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_lstat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gl_stat) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(glob_t),
            "::",
            stringify!(gl_stat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub type in_port_t = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__in6_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_in6_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in6_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_pktinfo>(),
        20usize,
        concat!("Size of: ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi6_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi6_ifindex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_pktinfo),
            "::",
            stringify!(ipi6_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 108usize],
}
#[test]
fn bindgen_test_layout_sockaddr_un() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_un> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_un>(),
        110usize,
        concat!("Size of: ", stringify!(sockaddr_un))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_un>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_un))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sun_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sun_path) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_un),
            "::",
            stringify!(sun_path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sem_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_sem_t() {
    const UNINIT: ::std::mem::MaybeUninit<sem_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sem_t>(),
        32usize,
        concat!("Size of: ", stringify!(sem_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sem_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sem_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sem_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sem_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type ngx_int_t = isize;
pub type ngx_uint_t = usize;
pub type ngx_flag_t = isize;
pub type ngx_module_t = ngx_module_s;
pub type ngx_conf_t = ngx_conf_s;
pub type ngx_cycle_t = ngx_cycle_s;
pub type ngx_pool_t = ngx_pool_s;
pub type ngx_chain_t = ngx_chain_s;
pub type ngx_log_t = ngx_log_s;
pub type ngx_open_file_t = ngx_open_file_s;
pub type ngx_command_t = ngx_command_s;
pub type ngx_file_t = ngx_file_s;
pub type ngx_event_t = ngx_event_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_event_aio_s {
    _unused: [u8; 0],
}
pub type ngx_event_aio_t = ngx_event_aio_s;
pub type ngx_connection_t = ngx_connection_s;
pub type ngx_thread_task_t = ngx_thread_task_s;
pub type ngx_ssl_t = ngx_ssl_s;
pub type ngx_proxy_protocol_t = ngx_proxy_protocol_s;
pub type ngx_ssl_connection_t = ngx_ssl_connection_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_udp_connection_s {
    _unused: [u8; 0],
}
pub type ngx_udp_connection_t = ngx_udp_connection_s;
pub type ngx_event_handler_pt = ::std::option::Option<unsafe extern "C" fn(ev: *mut ngx_event_t)>;
pub type ngx_connection_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(c: *mut ngx_connection_t)>;
pub type ngx_err_t = ::std::os::raw::c_int;
extern "C" {
    pub fn ngx_strerror(err: ngx_err_t, errstr: *mut u_char, size: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_strerror_init() -> ngx_int_t;
}
pub type ngx_atomic_int_t = ::std::os::raw::c_long;
pub type ngx_atomic_uint_t = ::std::os::raw::c_ulong;
pub type ngx_atomic_t = ngx_atomic_uint_t;
extern "C" {
    pub fn ngx_spinlock(lock: *mut ngx_atomic_t, value: ngx_atomic_int_t, spin: ngx_uint_t);
}
pub type ngx_thread_mutex_t = pthread_mutex_t;
extern "C" {
    pub fn ngx_thread_mutex_create(mtx: *mut ngx_thread_mutex_t, log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_thread_mutex_destroy(mtx: *mut ngx_thread_mutex_t, log: *mut ngx_log_t)
        -> ngx_int_t;
}
extern "C" {
    pub fn ngx_thread_mutex_lock(mtx: *mut ngx_thread_mutex_t, log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_thread_mutex_unlock(mtx: *mut ngx_thread_mutex_t, log: *mut ngx_log_t) -> ngx_int_t;
}
pub type ngx_thread_cond_t = pthread_cond_t;
extern "C" {
    pub fn ngx_thread_cond_create(cond: *mut ngx_thread_cond_t, log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_thread_cond_destroy(cond: *mut ngx_thread_cond_t, log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_thread_cond_signal(cond: *mut ngx_thread_cond_t, log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_thread_cond_wait(
        cond: *mut ngx_thread_cond_t,
        mtx: *mut ngx_thread_mutex_t,
        log: *mut ngx_log_t,
    ) -> ngx_int_t;
}
pub type ngx_tid_t = pid_t;
extern "C" {
    pub fn ngx_thread_tid() -> ngx_tid_t;
}
pub type ngx_rbtree_key_t = ngx_uint_t;
pub type ngx_rbtree_key_int_t = ngx_int_t;
pub type ngx_rbtree_node_t = ngx_rbtree_node_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_rbtree_node_s {
    pub key: ngx_rbtree_key_t,
    pub left: *mut ngx_rbtree_node_t,
    pub right: *mut ngx_rbtree_node_t,
    pub parent: *mut ngx_rbtree_node_t,
    pub color: u_char,
    pub data: u_char,
}
#[test]
fn bindgen_test_layout_ngx_rbtree_node_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_rbtree_node_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_rbtree_node_s>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_rbtree_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_rbtree_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_rbtree_node_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_node_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_node_s),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_node_s),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_node_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_node_s),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_node_s),
            "::",
            stringify!(data)
        )
    );
}
pub type ngx_rbtree_t = ngx_rbtree_s;
pub type ngx_rbtree_insert_pt = ::std::option::Option<
    unsafe extern "C" fn(
        root: *mut ngx_rbtree_node_t,
        node: *mut ngx_rbtree_node_t,
        sentinel: *mut ngx_rbtree_node_t,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_rbtree_s {
    pub root: *mut ngx_rbtree_node_t,
    pub sentinel: *mut ngx_rbtree_node_t,
    pub insert: ngx_rbtree_insert_pt,
}
#[test]
fn bindgen_test_layout_ngx_rbtree_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_rbtree_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_rbtree_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_rbtree_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_rbtree_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_rbtree_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_s),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sentinel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_s),
            "::",
            stringify!(sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insert) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_rbtree_s),
            "::",
            stringify!(insert)
        )
    );
}
extern "C" {
    pub fn ngx_rbtree_insert(tree: *mut ngx_rbtree_t, node: *mut ngx_rbtree_node_t);
}
extern "C" {
    pub fn ngx_rbtree_delete(tree: *mut ngx_rbtree_t, node: *mut ngx_rbtree_node_t);
}
extern "C" {
    pub fn ngx_rbtree_insert_value(
        root: *mut ngx_rbtree_node_t,
        node: *mut ngx_rbtree_node_t,
        sentinel: *mut ngx_rbtree_node_t,
    );
}
extern "C" {
    pub fn ngx_rbtree_insert_timer_value(
        root: *mut ngx_rbtree_node_t,
        node: *mut ngx_rbtree_node_t,
        sentinel: *mut ngx_rbtree_node_t,
    );
}
extern "C" {
    pub fn ngx_rbtree_next(
        tree: *mut ngx_rbtree_t,
        node: *mut ngx_rbtree_node_t,
    ) -> *mut ngx_rbtree_node_t;
}
pub type ngx_msec_t = ngx_rbtree_key_t;
pub type ngx_msec_int_t = ngx_rbtree_key_int_t;
pub type ngx_tm_t = tm;
extern "C" {
    pub fn ngx_timezone_update();
}
extern "C" {
    pub fn ngx_localtime(s: time_t, tm: *mut ngx_tm_t);
}
extern "C" {
    pub fn ngx_libc_localtime(s: time_t, tm: *mut tm);
}
extern "C" {
    pub fn ngx_libc_gmtime(s: time_t, tm: *mut tm);
}
pub type ngx_socket_t = ::std::os::raw::c_int;
extern "C" {
    pub fn ngx_nonblocking(s: ngx_socket_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngx_blocking(s: ngx_socket_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngx_tcp_nopush(s: ngx_socket_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngx_tcp_push(s: ngx_socket_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_str_t {
    pub len: usize,
    pub data: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_str_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_str_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_str_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_str_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_str_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_str_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_str_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_str_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_keyval_t {
    pub key: ngx_str_t,
    pub value: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_keyval_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_keyval_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_keyval_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_keyval_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_keyval_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_keyval_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_keyval_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_keyval_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_variable_value_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub data: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_variable_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_variable_value_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_variable_value_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_variable_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_variable_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_variable_value_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_variable_value_t),
            "::",
            stringify!(data)
        )
    );
}
impl ngx_variable_value_t {
    #[inline]
    pub fn len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn valid(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cacheable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cacheable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn not_found(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_not_found(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn escape(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_escape(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        len: ::std::os::raw::c_uint,
        valid: ::std::os::raw::c_uint,
        no_cacheable: ::std::os::raw::c_uint,
        not_found: ::std::os::raw::c_uint,
        escape: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let len: u32 = unsafe { ::std::mem::transmute(len) };
            len as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let valid: u32 = unsafe { ::std::mem::transmute(valid) };
            valid as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let no_cacheable: u32 = unsafe { ::std::mem::transmute(no_cacheable) };
            no_cacheable as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let not_found: u32 = unsafe { ::std::mem::transmute(not_found) };
            not_found as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let escape: u32 = unsafe { ::std::mem::transmute(escape) };
            escape as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_strlow(dst: *mut u_char, src: *mut u_char, n: usize);
}
extern "C" {
    pub fn ngx_strnlen(p: *mut u_char, n: usize) -> usize;
}
extern "C" {
    pub fn ngx_explicit_memzero(buf: *mut ::std::os::raw::c_void, n: usize);
}
extern "C" {
    pub fn ngx_cpystrn(dst: *mut u_char, src: *mut u_char, n: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_pstrdup(pool: *mut ngx_pool_t, src: *mut ngx_str_t) -> *mut u_char;
}
extern "C" {
    pub fn ngx_sprintf(buf: *mut u_char, fmt: *const ::std::os::raw::c_char, ...) -> *mut u_char;
}
extern "C" {
    pub fn ngx_snprintf(
        buf: *mut u_char,
        max: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_slprintf(
        buf: *mut u_char,
        last: *mut u_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_vslprintf(
        buf: *mut u_char,
        last: *mut u_char,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_strcasecmp(s1: *mut u_char, s2: *mut u_char) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_strncasecmp(s1: *mut u_char, s2: *mut u_char, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_strnstr(s1: *mut u_char, s2: *mut ::std::os::raw::c_char, n: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_strstrn(s1: *mut u_char, s2: *mut ::std::os::raw::c_char, n: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_strcasestrn(
        s1: *mut u_char,
        s2: *mut ::std::os::raw::c_char,
        n: usize,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_strlcasestrn(
        s1: *mut u_char,
        last: *mut u_char,
        s2: *mut u_char,
        n: usize,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_rstrncmp(s1: *mut u_char, s2: *mut u_char, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_rstrncasecmp(s1: *mut u_char, s2: *mut u_char, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_memn2cmp(s1: *mut u_char, s2: *mut u_char, n1: usize, n2: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_dns_strcmp(s1: *mut u_char, s2: *mut u_char) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_filename_cmp(s1: *mut u_char, s2: *mut u_char, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_atoi(line: *mut u_char, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_atofp(line: *mut u_char, n: usize, point: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_atosz(line: *mut u_char, n: usize) -> isize;
}
extern "C" {
    pub fn ngx_atoof(line: *mut u_char, n: usize) -> off_t;
}
extern "C" {
    pub fn ngx_atotm(line: *mut u_char, n: usize) -> time_t;
}
extern "C" {
    pub fn ngx_hextoi(line: *mut u_char, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_hex_dump(dst: *mut u_char, src: *mut u_char, len: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_encode_base64(dst: *mut ngx_str_t, src: *mut ngx_str_t);
}
extern "C" {
    pub fn ngx_encode_base64url(dst: *mut ngx_str_t, src: *mut ngx_str_t);
}
extern "C" {
    pub fn ngx_decode_base64(dst: *mut ngx_str_t, src: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_decode_base64url(dst: *mut ngx_str_t, src: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_utf8_decode(p: *mut *mut u_char, n: usize) -> u32;
}
extern "C" {
    pub fn ngx_utf8_length(p: *mut u_char, n: usize) -> usize;
}
extern "C" {
    pub fn ngx_utf8_cpystrn(
        dst: *mut u_char,
        src: *mut u_char,
        n: usize,
        len: usize,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_escape_uri(
        dst: *mut u_char,
        src: *mut u_char,
        size: usize,
        type_: ngx_uint_t,
    ) -> usize;
}
extern "C" {
    pub fn ngx_unescape_uri(
        dst: *mut *mut u_char,
        src: *mut *mut u_char,
        size: usize,
        type_: ngx_uint_t,
    );
}
extern "C" {
    pub fn ngx_escape_html(dst: *mut u_char, src: *mut u_char, size: usize) -> usize;
}
extern "C" {
    pub fn ngx_escape_json(dst: *mut u_char, src: *mut u_char, size: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_str_node_t {
    pub node: ngx_rbtree_node_t,
    pub str_: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_str_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_str_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_str_node_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_str_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_str_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_str_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_str_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_str_node_t),
            "::",
            stringify!(str_)
        )
    );
}
extern "C" {
    pub fn ngx_str_rbtree_insert_value(
        temp: *mut ngx_rbtree_node_t,
        node: *mut ngx_rbtree_node_t,
        sentinel: *mut ngx_rbtree_node_t,
    );
}
extern "C" {
    pub fn ngx_str_rbtree_lookup(
        rbtree: *mut ngx_rbtree_t,
        name: *mut ngx_str_t,
        hash: u32,
    ) -> *mut ngx_str_node_t;
}
extern "C" {
    pub fn ngx_sort(
        base: *mut ::std::os::raw::c_void,
        n: usize,
        size: usize,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ngx_int_t,
        >,
    );
}
pub type ngx_fd_t = ::std::os::raw::c_int;
pub type ngx_file_info_t = stat;
pub type ngx_file_uniq_t = ino_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_file_mapping_t {
    pub name: *mut u_char,
    pub size: usize,
    pub addr: *mut ::std::os::raw::c_void,
    pub fd: ngx_fd_t,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_file_mapping_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_file_mapping_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_file_mapping_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_file_mapping_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_file_mapping_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_file_mapping_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_mapping_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_mapping_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_mapping_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_mapping_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_mapping_t),
            "::",
            stringify!(log)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_dir_t {
    pub dir: *mut DIR,
    pub de: *mut dirent,
    pub info: stat,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_dir_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_dir_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_dir_t>(),
        168usize,
        concat!("Size of: ", stringify!(ngx_dir_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_dir_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_dir_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_dir_t),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).de) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_dir_t),
            "::",
            stringify!(de)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_dir_t),
            "::",
            stringify!(info)
        )
    );
}
impl ngx_dir_t {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn valid_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        valid_info: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let valid_info: u32 = unsafe { ::std::mem::transmute(valid_info) };
            valid_info as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_glob_t {
    pub n: usize,
    pub pglob: glob_t,
    pub pattern: *mut u_char,
    pub log: *mut ngx_log_t,
    pub test: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_glob_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_glob_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_glob_t>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_glob_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_glob_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_glob_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_glob_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pglob) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_glob_t),
            "::",
            stringify!(pglob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_glob_t),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_glob_t),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).test) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_glob_t),
            "::",
            stringify!(test)
        )
    );
}
extern "C" {
    pub fn ngx_open_tempfile(
        name: *mut u_char,
        persistent: ngx_uint_t,
        access: ngx_uint_t,
    ) -> ngx_fd_t;
}
extern "C" {
    pub fn ngx_read_file(
        file: *mut ngx_file_t,
        buf: *mut u_char,
        size: usize,
        offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn ngx_write_file(
        file: *mut ngx_file_t,
        buf: *mut u_char,
        size: usize,
        offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn ngx_write_chain_to_file(
        file: *mut ngx_file_t,
        ce: *mut ngx_chain_t,
        offset: off_t,
        pool: *mut ngx_pool_t,
    ) -> isize;
}
extern "C" {
    pub fn ngx_set_file_time(name: *mut u_char, fd: ngx_fd_t, s: time_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_create_file_mapping(fm: *mut ngx_file_mapping_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_close_file_mapping(fm: *mut ngx_file_mapping_t);
}
extern "C" {
    pub fn ngx_open_dir(name: *mut ngx_str_t, dir: *mut ngx_dir_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_read_dir(dir: *mut ngx_dir_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_open_glob(gl: *mut ngx_glob_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_read_glob(gl: *mut ngx_glob_t, name: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_close_glob(gl: *mut ngx_glob_t);
}
extern "C" {
    pub fn ngx_trylock_fd(fd: ngx_fd_t) -> ngx_err_t;
}
extern "C" {
    pub fn ngx_lock_fd(fd: ngx_fd_t) -> ngx_err_t;
}
extern "C" {
    pub fn ngx_unlock_fd(fd: ngx_fd_t) -> ngx_err_t;
}
extern "C" {
    pub fn ngx_read_ahead(fd: ngx_fd_t, n: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_directio_on(fd: ngx_fd_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_directio_off(fd: ngx_fd_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_fs_bsize(name: *mut u_char) -> usize;
}
extern "C" {
    pub fn ngx_fs_available(name: *mut u_char) -> off_t;
}
extern "C" {
    pub fn ngx_thread_read(
        file: *mut ngx_file_t,
        buf: *mut u_char,
        size: usize,
        offset: off_t,
        pool: *mut ngx_pool_t,
    ) -> isize;
}
extern "C" {
    pub fn ngx_thread_write_chain_to_file(
        file: *mut ngx_file_t,
        cl: *mut ngx_chain_t,
        offset: off_t,
        pool: *mut ngx_pool_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_shm_t {
    pub addr: *mut u_char,
    pub size: usize,
    pub name: ngx_str_t,
    pub log: *mut ngx_log_t,
    pub exists: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_shm_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_shm_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_shm_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_shm_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_shm_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_shm_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_t),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exists) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_t),
            "::",
            stringify!(exists)
        )
    );
}
extern "C" {
    pub fn ngx_shm_alloc(shm: *mut ngx_shm_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_shm_free(shm: *mut ngx_shm_t);
}
pub type ngx_cpuset_t = cpu_set_t;
extern "C" {
    pub fn ngx_setaffinity(cpu_affinity: *mut ngx_cpuset_t, log: *mut ngx_log_t);
}
extern "C" {
    pub fn ngx_init_setproctitle(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_setproctitle(title: *mut ::std::os::raw::c_char);
}
pub type ngx_pid_t = pid_t;
pub type ngx_spawn_proc_pt = ::std::option::Option<
    unsafe extern "C" fn(cycle: *mut ngx_cycle_t, data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_process_t {
    pub pid: ngx_pid_t,
    pub status: ::std::os::raw::c_int,
    pub channel: [ngx_socket_t; 2usize],
    pub proc_: ngx_spawn_proc_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub name: *mut ::std::os::raw::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_process_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_process_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_process_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_process_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_process_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_process_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_process_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_process_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_process_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_process_t),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_process_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_process_t),
            "::",
            stringify!(name)
        )
    );
}
impl ngx_process_t {
    #[inline]
    pub fn respawn(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_respawn(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn just_spawn(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_just_spawn(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn detached(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_detached(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exiting(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exiting(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exited(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exited(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        respawn: ::std::os::raw::c_uint,
        just_spawn: ::std::os::raw::c_uint,
        detached: ::std::os::raw::c_uint,
        exiting: ::std::os::raw::c_uint,
        exited: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let respawn: u32 = unsafe { ::std::mem::transmute(respawn) };
            respawn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let just_spawn: u32 = unsafe { ::std::mem::transmute(just_spawn) };
            just_spawn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let detached: u32 = unsafe { ::std::mem::transmute(detached) };
            detached as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let exiting: u32 = unsafe { ::std::mem::transmute(exiting) };
            exiting as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let exited: u32 = unsafe { ::std::mem::transmute(exited) };
            exited as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_exec_ctx_t {
    pub path: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub argv: *const *mut ::std::os::raw::c_char,
    pub envp: *const *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ngx_exec_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_exec_ctx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_exec_ctx_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_exec_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_exec_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_exec_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_exec_ctx_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_exec_ctx_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_exec_ctx_t),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_exec_ctx_t),
            "::",
            stringify!(envp)
        )
    );
}
extern "C" {
    pub fn ngx_spawn_process(
        cycle: *mut ngx_cycle_t,
        proc_: ngx_spawn_proc_pt,
        data: *mut ::std::os::raw::c_void,
        name: *mut ::std::os::raw::c_char,
        respawn: ngx_int_t,
    ) -> ngx_pid_t;
}
extern "C" {
    pub fn ngx_execute(cycle: *mut ngx_cycle_t, ctx: *mut ngx_exec_ctx_t) -> ngx_pid_t;
}
extern "C" {
    pub fn ngx_init_signals(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_debug_point();
}
extern "C" {
    pub static mut ngx_argc: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_argv: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ngx_os_argv: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ngx_pid: ngx_pid_t;
}
extern "C" {
    pub static mut ngx_parent: ngx_pid_t;
}
extern "C" {
    pub static mut ngx_channel: ngx_socket_t;
}
extern "C" {
    pub static mut ngx_process_slot: ngx_int_t;
}
extern "C" {
    pub static mut ngx_last_process: ngx_int_t;
}
extern "C" {
    pub static mut ngx_processes: [ngx_process_t; 1024usize];
}
pub type ngx_uid_t = uid_t;
pub type ngx_gid_t = gid_t;
extern "C" {
    pub fn ngx_libc_crypt(
        pool: *mut ngx_pool_t,
        key: *mut u_char,
        salt: *mut u_char,
        encrypted: *mut *mut u_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_parse_size(line: *mut ngx_str_t) -> isize;
}
extern "C" {
    pub fn ngx_parse_offset(line: *mut ngx_str_t) -> off_t;
}
extern "C" {
    pub fn ngx_parse_time(line: *mut ngx_str_t, is_sec: ngx_uint_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_parse_http_time(value: *mut u_char, len: usize) -> time_t;
}
pub type ngx_log_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(log: *mut ngx_log_t, buf: *mut u_char, len: usize) -> *mut u_char,
>;
pub type ngx_log_writer_pt = ::std::option::Option<
    unsafe extern "C" fn(log: *mut ngx_log_t, level: ngx_uint_t, buf: *mut u_char, len: usize),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_log_s {
    pub log_level: ngx_uint_t,
    pub file: *mut ngx_open_file_t,
    pub connection: ngx_atomic_uint_t,
    pub disk_full_time: time_t,
    pub handler: ngx_log_handler_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub writer: ngx_log_writer_pt,
    pub wdata: *mut ::std::os::raw::c_void,
    pub action: *mut ::std::os::raw::c_char,
    pub next: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_log_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_log_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_log_s>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_log_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_log_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_log_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(log_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disk_full_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(disk_full_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wdata) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(wdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_log_s),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn ngx_log_error_core(
        level: ngx_uint_t,
        log: *mut ngx_log_t,
        err: ngx_err_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ngx_log_init(prefix: *mut u_char, error_log: *mut u_char) -> *mut ngx_log_t;
}
extern "C" {
    pub fn ngx_log_abort(err: ngx_err_t, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ngx_log_stderr(err: ngx_err_t, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ngx_log_errno(buf: *mut u_char, last: *mut u_char, err: ngx_err_t) -> *mut u_char;
}
extern "C" {
    pub fn ngx_log_open_default(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_log_redirect_stderr(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_log_get_file_log(head: *mut ngx_log_t) -> *mut ngx_log_t;
}
extern "C" {
    pub fn ngx_log_set_log(
        cf: *mut ngx_conf_t,
        head: *mut *mut ngx_log_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ngx_errlog_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_use_stderr: ngx_uint_t;
}
extern "C" {
    pub fn ngx_alloc(size: usize, log: *mut ngx_log_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_calloc(size: usize, log: *mut ngx_log_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_memalign(
        alignment: usize,
        size: usize,
        log: *mut ngx_log_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub static mut ngx_pagesize: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_pagesize_shift: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_cacheline_size: ngx_uint_t;
}
pub type ngx_pool_cleanup_pt =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type ngx_pool_cleanup_t = ngx_pool_cleanup_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_pool_cleanup_s {
    pub handler: ngx_pool_cleanup_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub next: *mut ngx_pool_cleanup_t,
}
#[test]
fn bindgen_test_layout_ngx_pool_cleanup_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_pool_cleanup_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_pool_cleanup_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_pool_cleanup_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_pool_cleanup_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_pool_cleanup_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_cleanup_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_cleanup_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_cleanup_s),
            "::",
            stringify!(next)
        )
    );
}
pub type ngx_pool_large_t = ngx_pool_large_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_pool_large_s {
    pub next: *mut ngx_pool_large_t,
    pub alloc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_pool_large_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_pool_large_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_pool_large_s>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_pool_large_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_pool_large_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_pool_large_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_large_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_large_s),
            "::",
            stringify!(alloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_pool_data_t {
    pub last: *mut u_char,
    pub end: *mut u_char,
    pub next: *mut ngx_pool_t,
    pub failed: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_pool_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_pool_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_pool_data_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_pool_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_pool_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_pool_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_data_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_data_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_data_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_data_t),
            "::",
            stringify!(failed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_pool_s {
    pub d: ngx_pool_data_t,
    pub max: usize,
    pub current: *mut ngx_pool_t,
    pub chain: *mut ngx_chain_t,
    pub large: *mut ngx_pool_large_t,
    pub cleanup: *mut ngx_pool_cleanup_t,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_pool_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_pool_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_pool_s>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_pool_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_pool_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_pool_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(large)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_s),
            "::",
            stringify!(log)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_pool_cleanup_file_t {
    pub fd: ngx_fd_t,
    pub name: *mut u_char,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_pool_cleanup_file_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_pool_cleanup_file_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_pool_cleanup_file_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_pool_cleanup_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_pool_cleanup_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_pool_cleanup_file_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_cleanup_file_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_cleanup_file_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_pool_cleanup_file_t),
            "::",
            stringify!(log)
        )
    );
}
extern "C" {
    pub fn ngx_create_pool(size: usize, log: *mut ngx_log_t) -> *mut ngx_pool_t;
}
extern "C" {
    pub fn ngx_destroy_pool(pool: *mut ngx_pool_t);
}
extern "C" {
    pub fn ngx_reset_pool(pool: *mut ngx_pool_t);
}
extern "C" {
    pub fn ngx_palloc(pool: *mut ngx_pool_t, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_pnalloc(pool: *mut ngx_pool_t, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_pcalloc(pool: *mut ngx_pool_t, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_pmemalign(
        pool: *mut ngx_pool_t,
        size: usize,
        alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_pfree(pool: *mut ngx_pool_t, p: *mut ::std::os::raw::c_void) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_pool_cleanup_add(p: *mut ngx_pool_t, size: usize) -> *mut ngx_pool_cleanup_t;
}
extern "C" {
    pub fn ngx_pool_run_cleanup_file(p: *mut ngx_pool_t, fd: ngx_fd_t);
}
extern "C" {
    pub fn ngx_pool_cleanup_file(data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ngx_pool_delete_file(data: *mut ::std::os::raw::c_void);
}
pub type ngx_buf_tag_t = *mut ::std::os::raw::c_void;
pub type ngx_buf_t = ngx_buf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_buf_s {
    pub pos: *mut u_char,
    pub last: *mut u_char,
    pub file_pos: off_t,
    pub file_last: off_t,
    pub start: *mut u_char,
    pub end: *mut u_char,
    pub tag: ngx_buf_tag_t,
    pub file: *mut ngx_file_t,
    pub shadow: *mut ngx_buf_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ngx_buf_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_buf_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_buf_s>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_buf_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_buf_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_buf_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_pos) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(file_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_last) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(file_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(shadow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_buf_s),
            "::",
            stringify!(num)
        )
    );
}
impl ngx_buf_s {
    #[inline]
    pub fn temporary(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_temporary(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mmap(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mmap(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn recycled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_recycled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flush(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flush(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sync(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sync(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_buf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_buf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_in_chain(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_in_chain(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_shadow(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_shadow(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn temp_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_temp_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        temporary: ::std::os::raw::c_uint,
        memory: ::std::os::raw::c_uint,
        mmap: ::std::os::raw::c_uint,
        recycled: ::std::os::raw::c_uint,
        in_file: ::std::os::raw::c_uint,
        flush: ::std::os::raw::c_uint,
        sync: ::std::os::raw::c_uint,
        last_buf: ::std::os::raw::c_uint,
        last_in_chain: ::std::os::raw::c_uint,
        last_shadow: ::std::os::raw::c_uint,
        temp_file: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let temporary: u32 = unsafe { ::std::mem::transmute(temporary) };
            temporary as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let memory: u32 = unsafe { ::std::mem::transmute(memory) };
            memory as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mmap: u32 = unsafe { ::std::mem::transmute(mmap) };
            mmap as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let recycled: u32 = unsafe { ::std::mem::transmute(recycled) };
            recycled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let in_file: u32 = unsafe { ::std::mem::transmute(in_file) };
            in_file as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let flush: u32 = unsafe { ::std::mem::transmute(flush) };
            flush as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sync: u32 = unsafe { ::std::mem::transmute(sync) };
            sync as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let last_buf: u32 = unsafe { ::std::mem::transmute(last_buf) };
            last_buf as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let last_in_chain: u32 = unsafe { ::std::mem::transmute(last_in_chain) };
            last_in_chain as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let last_shadow: u32 = unsafe { ::std::mem::transmute(last_shadow) };
            last_shadow as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let temp_file: u32 = unsafe { ::std::mem::transmute(temp_file) };
            temp_file as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_chain_s {
    pub buf: *mut ngx_buf_t,
    pub next: *mut ngx_chain_t,
}
#[test]
fn bindgen_test_layout_ngx_chain_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_chain_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_chain_s>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_chain_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_chain_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_chain_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_s),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_bufs_t {
    pub num: ngx_int_t,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_ngx_bufs_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_bufs_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_bufs_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_bufs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_bufs_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_bufs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_bufs_t),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_bufs_t),
            "::",
            stringify!(size)
        )
    );
}
pub type ngx_output_chain_ctx_t = ngx_output_chain_ctx_s;
pub type ngx_output_chain_filter_pt = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, in_: *mut ngx_chain_t) -> ngx_int_t,
>;
pub type ngx_output_chain_aio_pt = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ngx_output_chain_ctx_t, file: *mut ngx_file_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_output_chain_ctx_s {
    pub buf: *mut ngx_buf_t,
    pub in_: *mut ngx_chain_t,
    pub free: *mut ngx_chain_t,
    pub busy: *mut ngx_chain_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub aio_handler: ngx_output_chain_aio_pt,
    pub thread_handler: ::std::option::Option<
        unsafe extern "C" fn(task: *mut ngx_thread_task_t, file: *mut ngx_file_t) -> ngx_int_t,
    >,
    pub thread_task: *mut ngx_thread_task_t,
    pub alignment: off_t,
    pub pool: *mut ngx_pool_t,
    pub allocated: ngx_int_t,
    pub bufs: ngx_bufs_t,
    pub tag: ngx_buf_tag_t,
    pub output_filter: ngx_output_chain_filter_pt,
    pub filter_ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_output_chain_ctx_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_output_chain_ctx_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_output_chain_ctx_s>(),
        128usize,
        concat!("Size of: ", stringify!(ngx_output_chain_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_output_chain_ctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_output_chain_ctx_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_handler) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(aio_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_handler) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(thread_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_task) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(thread_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_filter) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(output_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_ctx) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_output_chain_ctx_s),
            "::",
            stringify!(filter_ctx)
        )
    );
}
impl ngx_output_chain_ctx_s {
    #[inline]
    pub fn sendfile(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sendfile(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn directio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_directio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unaligned(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unaligned(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn need_in_memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_need_in_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn need_in_temp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_need_in_temp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sendfile: ::std::os::raw::c_uint,
        directio: ::std::os::raw::c_uint,
        unaligned: ::std::os::raw::c_uint,
        need_in_memory: ::std::os::raw::c_uint,
        need_in_temp: ::std::os::raw::c_uint,
        aio: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sendfile: u32 = unsafe { ::std::mem::transmute(sendfile) };
            sendfile as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let directio: u32 = unsafe { ::std::mem::transmute(directio) };
            directio as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let unaligned: u32 = unsafe { ::std::mem::transmute(unaligned) };
            unaligned as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let need_in_memory: u32 = unsafe { ::std::mem::transmute(need_in_memory) };
            need_in_memory as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let need_in_temp: u32 = unsafe { ::std::mem::transmute(need_in_temp) };
            need_in_temp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let aio: u32 = unsafe { ::std::mem::transmute(aio) };
            aio as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_chain_writer_ctx_t {
    pub out: *mut ngx_chain_t,
    pub last: *mut *mut ngx_chain_t,
    pub connection: *mut ngx_connection_t,
    pub pool: *mut ngx_pool_t,
    pub limit: off_t,
}
#[test]
fn bindgen_test_layout_ngx_chain_writer_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_chain_writer_ctx_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_chain_writer_ctx_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_chain_writer_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_chain_writer_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_chain_writer_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_writer_ctx_t),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_writer_ctx_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_writer_ctx_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_writer_ctx_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_chain_writer_ctx_t),
            "::",
            stringify!(limit)
        )
    );
}
extern "C" {
    pub fn ngx_create_temp_buf(pool: *mut ngx_pool_t, size: usize) -> *mut ngx_buf_t;
}
extern "C" {
    pub fn ngx_create_chain_of_bufs(
        pool: *mut ngx_pool_t,
        bufs: *mut ngx_bufs_t,
    ) -> *mut ngx_chain_t;
}
extern "C" {
    pub fn ngx_alloc_chain_link(pool: *mut ngx_pool_t) -> *mut ngx_chain_t;
}
extern "C" {
    pub fn ngx_output_chain(ctx: *mut ngx_output_chain_ctx_t, in_: *mut ngx_chain_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_chain_writer(ctx: *mut ::std::os::raw::c_void, in_: *mut ngx_chain_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_chain_add_copy(
        pool: *mut ngx_pool_t,
        chain: *mut *mut ngx_chain_t,
        in_: *mut ngx_chain_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_chain_get_free_buf(
        p: *mut ngx_pool_t,
        free: *mut *mut ngx_chain_t,
    ) -> *mut ngx_chain_t;
}
extern "C" {
    pub fn ngx_chain_update_chains(
        p: *mut ngx_pool_t,
        free: *mut *mut ngx_chain_t,
        busy: *mut *mut ngx_chain_t,
        out: *mut *mut ngx_chain_t,
        tag: ngx_buf_tag_t,
    );
}
extern "C" {
    pub fn ngx_chain_coalesce_file(in_: *mut *mut ngx_chain_t, limit: off_t) -> off_t;
}
extern "C" {
    pub fn ngx_chain_update_sent(in_: *mut ngx_chain_t, sent: off_t) -> *mut ngx_chain_t;
}
pub type ngx_queue_t = ngx_queue_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_queue_s {
    pub prev: *mut ngx_queue_t,
    pub next: *mut ngx_queue_t,
}
#[test]
fn bindgen_test_layout_ngx_queue_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_queue_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_queue_s>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_queue_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_queue_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_queue_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_queue_s),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_queue_s),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn ngx_queue_middle(queue: *mut ngx_queue_t) -> *mut ngx_queue_t;
}
extern "C" {
    pub fn ngx_queue_sort(
        queue: *mut ngx_queue_t,
        cmp: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ngx_queue_t, arg2: *const ngx_queue_t) -> ngx_int_t,
        >,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_array_t {
    pub elts: *mut ::std::os::raw::c_void,
    pub nelts: ngx_uint_t,
    pub size: usize,
    pub nalloc: ngx_uint_t,
    pub pool: *mut ngx_pool_t,
}
#[test]
fn bindgen_test_layout_ngx_array_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_array_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_array_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_array_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_array_t),
            "::",
            stringify!(elts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nelts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_array_t),
            "::",
            stringify!(nelts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_array_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nalloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_array_t),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_array_t),
            "::",
            stringify!(pool)
        )
    );
}
extern "C" {
    pub fn ngx_array_create(p: *mut ngx_pool_t, n: ngx_uint_t, size: usize) -> *mut ngx_array_t;
}
extern "C" {
    pub fn ngx_array_destroy(a: *mut ngx_array_t);
}
extern "C" {
    pub fn ngx_array_push(a: *mut ngx_array_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_array_push_n(a: *mut ngx_array_t, n: ngx_uint_t) -> *mut ::std::os::raw::c_void;
}
pub type ngx_list_part_t = ngx_list_part_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_list_part_s {
    pub elts: *mut ::std::os::raw::c_void,
    pub nelts: ngx_uint_t,
    pub next: *mut ngx_list_part_t,
}
#[test]
fn bindgen_test_layout_ngx_list_part_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_list_part_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_list_part_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_list_part_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_list_part_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_list_part_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_part_s),
            "::",
            stringify!(elts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nelts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_part_s),
            "::",
            stringify!(nelts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_part_s),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_list_t {
    pub last: *mut ngx_list_part_t,
    pub part: ngx_list_part_t,
    pub size: usize,
    pub nalloc: ngx_uint_t,
    pub pool: *mut ngx_pool_t,
}
#[test]
fn bindgen_test_layout_ngx_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_list_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).part) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_t),
            "::",
            stringify!(part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nalloc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_t),
            "::",
            stringify!(nalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_list_t),
            "::",
            stringify!(pool)
        )
    );
}
extern "C" {
    pub fn ngx_list_create(pool: *mut ngx_pool_t, n: ngx_uint_t, size: usize) -> *mut ngx_list_t;
}
extern "C" {
    pub fn ngx_list_push(list: *mut ngx_list_t) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_elt_t {
    pub value: *mut ::std::os::raw::c_void,
    pub len: u_short,
    pub name: [u_char; 1usize],
}
#[test]
fn bindgen_test_layout_ngx_hash_elt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_elt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_elt_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_hash_elt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_elt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_elt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_elt_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_elt_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_elt_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_t {
    pub buckets: *mut *mut ngx_hash_elt_t,
    pub size: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_hash_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_hash_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buckets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_t),
            "::",
            stringify!(buckets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_t),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_wildcard_t {
    pub hash: ngx_hash_t,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_hash_wildcard_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_wildcard_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_wildcard_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_hash_wildcard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_wildcard_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_wildcard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_wildcard_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_wildcard_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_key_t {
    pub key: ngx_str_t,
    pub key_hash: ngx_uint_t,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_hash_key_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_key_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_key_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_hash_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_key_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_key_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_key_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_hash) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_key_t),
            "::",
            stringify!(key_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_key_t),
            "::",
            stringify!(value)
        )
    );
}
pub type ngx_hash_key_pt =
    ::std::option::Option<unsafe extern "C" fn(data: *mut u_char, len: usize) -> ngx_uint_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_combined_t {
    pub hash: ngx_hash_t,
    pub wc_head: *mut ngx_hash_wildcard_t,
    pub wc_tail: *mut ngx_hash_wildcard_t,
}
#[test]
fn bindgen_test_layout_ngx_hash_combined_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_combined_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_combined_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_hash_combined_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_combined_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_combined_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_combined_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_head) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_combined_t),
            "::",
            stringify!(wc_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_tail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_combined_t),
            "::",
            stringify!(wc_tail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_init_t {
    pub hash: *mut ngx_hash_t,
    pub key: ngx_hash_key_pt,
    pub max_size: ngx_uint_t,
    pub bucket_size: ngx_uint_t,
    pub name: *mut ::std::os::raw::c_char,
    pub pool: *mut ngx_pool_t,
    pub temp_pool: *mut ngx_pool_t,
}
#[test]
fn bindgen_test_layout_ngx_hash_init_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_init_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_init_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_hash_init_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_init_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_init_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bucket_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(bucket_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_pool) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_init_t),
            "::",
            stringify!(temp_pool)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_hash_keys_arrays_t {
    pub hsize: ngx_uint_t,
    pub pool: *mut ngx_pool_t,
    pub temp_pool: *mut ngx_pool_t,
    pub keys: ngx_array_t,
    pub keys_hash: *mut ngx_array_t,
    pub dns_wc_head: ngx_array_t,
    pub dns_wc_head_hash: *mut ngx_array_t,
    pub dns_wc_tail: ngx_array_t,
    pub dns_wc_tail_hash: *mut ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_hash_keys_arrays_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_hash_keys_arrays_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_hash_keys_arrays_t>(),
        168usize,
        concat!("Size of: ", stringify!(ngx_hash_keys_arrays_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_hash_keys_arrays_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_hash_keys_arrays_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(hsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_pool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(temp_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys_hash) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(keys_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dns_wc_head) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(dns_wc_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dns_wc_head_hash) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(dns_wc_head_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dns_wc_tail) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(dns_wc_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dns_wc_tail_hash) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_hash_keys_arrays_t),
            "::",
            stringify!(dns_wc_tail_hash)
        )
    );
}
pub type ngx_table_elt_t = ngx_table_elt_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_table_elt_s {
    pub hash: ngx_uint_t,
    pub key: ngx_str_t,
    pub value: ngx_str_t,
    pub lowcase_key: *mut u_char,
    pub next: *mut ngx_table_elt_t,
}
#[test]
fn bindgen_test_layout_ngx_table_elt_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_table_elt_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_table_elt_s>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_table_elt_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_table_elt_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_table_elt_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_table_elt_s),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_table_elt_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_table_elt_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowcase_key) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_table_elt_s),
            "::",
            stringify!(lowcase_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_table_elt_s),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn ngx_hash_find(
        hash: *mut ngx_hash_t,
        key: ngx_uint_t,
        name: *mut u_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_hash_find_wc_head(
        hwc: *mut ngx_hash_wildcard_t,
        name: *mut u_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_hash_find_wc_tail(
        hwc: *mut ngx_hash_wildcard_t,
        name: *mut u_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_hash_find_combined(
        hash: *mut ngx_hash_combined_t,
        key: ngx_uint_t,
        name: *mut u_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_hash_init(
        hinit: *mut ngx_hash_init_t,
        names: *mut ngx_hash_key_t,
        nelts: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_hash_wildcard_init(
        hinit: *mut ngx_hash_init_t,
        names: *mut ngx_hash_key_t,
        nelts: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_hash_key(data: *mut u_char, len: usize) -> ngx_uint_t;
}
extern "C" {
    pub fn ngx_hash_key_lc(data: *mut u_char, len: usize) -> ngx_uint_t;
}
extern "C" {
    pub fn ngx_hash_strlow(dst: *mut u_char, src: *mut u_char, n: usize) -> ngx_uint_t;
}
extern "C" {
    pub fn ngx_hash_keys_array_init(
        ha: *mut ngx_hash_keys_arrays_t,
        type_: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_hash_add_key(
        ha: *mut ngx_hash_keys_arrays_t,
        key: *mut ngx_str_t,
        value: *mut ::std::os::raw::c_void,
        flags: ngx_uint_t,
    ) -> ngx_int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_file_s {
    pub fd: ngx_fd_t,
    pub name: ngx_str_t,
    pub info: ngx_file_info_t,
    pub offset: off_t,
    pub sys_offset: off_t,
    pub log: *mut ngx_log_t,
    pub thread_handler: ::std::option::Option<
        unsafe extern "C" fn(task: *mut ngx_thread_task_t, file: *mut ngx_file_t) -> ngx_int_t,
    >,
    pub thread_ctx: *mut ::std::os::raw::c_void,
    pub thread_task: *mut ngx_thread_task_t,
    pub aio: *mut ngx_event_aio_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_file_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_file_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_file_s>(),
        232usize,
        concat!("Size of: ", stringify!(ngx_file_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_file_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_file_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_offset) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(sys_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_handler) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(thread_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_ctx) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(thread_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_task) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(thread_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_file_s),
            "::",
            stringify!(aio)
        )
    );
}
impl ngx_file_s {
    #[inline]
    pub fn valid_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn directio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_directio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        valid_info: ::std::os::raw::c_uint,
        directio: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let valid_info: u32 = unsafe { ::std::mem::transmute(valid_info) };
            valid_info as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let directio: u32 = unsafe { ::std::mem::transmute(directio) };
            directio as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_path_manager_pt =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ngx_msec_t>;
pub type ngx_path_purger_pt =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ngx_msec_t>;
pub type ngx_path_loader_pt =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_path_t {
    pub name: ngx_str_t,
    pub len: usize,
    pub level: [usize; 3usize],
    pub manager: ngx_path_manager_pt,
    pub purger: ngx_path_purger_pt,
    pub loader: ngx_path_loader_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub conf_file: *mut u_char,
    pub line: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_path_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_path_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_path_t>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_path_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_path_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_path_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manager) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(manager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purger) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(purger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(loader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_file) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(conf_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_t),
            "::",
            stringify!(line)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_path_init_t {
    pub name: ngx_str_t,
    pub level: [usize; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_path_init_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_path_init_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_path_init_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_path_init_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_path_init_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_path_init_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_init_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_path_init_t),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_temp_file_t {
    pub file: ngx_file_t,
    pub offset: off_t,
    pub path: *mut ngx_path_t,
    pub pool: *mut ngx_pool_t,
    pub warn: *mut ::std::os::raw::c_char,
    pub access: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_temp_file_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_temp_file_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_temp_file_t>(),
        280usize,
        concat!("Size of: ", stringify!(ngx_temp_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_temp_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_temp_file_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_temp_file_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_temp_file_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_temp_file_t),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_temp_file_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warn) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_temp_file_t),
            "::",
            stringify!(warn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_temp_file_t),
            "::",
            stringify!(access)
        )
    );
}
impl ngx_temp_file_t {
    #[inline]
    pub fn log_level(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_log_level(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn persistent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_persistent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn clean(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clean(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn thread_write(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_thread_write(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        log_level: ::std::os::raw::c_uint,
        persistent: ::std::os::raw::c_uint,
        clean: ::std::os::raw::c_uint,
        thread_write: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let log_level: u32 = unsafe { ::std::mem::transmute(log_level) };
            log_level as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let persistent: u32 = unsafe { ::std::mem::transmute(persistent) };
            persistent as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let clean: u32 = unsafe { ::std::mem::transmute(clean) };
            clean as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let thread_write: u32 = unsafe { ::std::mem::transmute(thread_write) };
            thread_write as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ext_rename_file_t {
    pub access: ngx_uint_t,
    pub path_access: ngx_uint_t,
    pub time: time_t,
    pub fd: ngx_fd_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_ext_rename_file_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_ext_rename_file_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_ext_rename_file_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_ext_rename_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_ext_rename_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_ext_rename_file_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ext_rename_file_t),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_access) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ext_rename_file_t),
            "::",
            stringify!(path_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ext_rename_file_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ext_rename_file_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ext_rename_file_t),
            "::",
            stringify!(log)
        )
    );
}
impl ngx_ext_rename_file_t {
    #[inline]
    pub fn create_path(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_create_path(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delete_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delete_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        create_path: ::std::os::raw::c_uint,
        delete_file: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let create_path: u32 = unsafe { ::std::mem::transmute(create_path) };
            create_path as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let delete_file: u32 = unsafe { ::std::mem::transmute(delete_file) };
            delete_file as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_copy_file_t {
    pub size: off_t,
    pub buf_size: usize,
    pub access: ngx_uint_t,
    pub time: time_t,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_copy_file_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_copy_file_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_copy_file_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_copy_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_copy_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_copy_file_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_copy_file_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_copy_file_t),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_copy_file_t),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_copy_file_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_copy_file_t),
            "::",
            stringify!(log)
        )
    );
}
pub type ngx_tree_ctx_t = ngx_tree_ctx_s;
pub type ngx_tree_init_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        prev: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t,
>;
pub type ngx_tree_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ngx_tree_ctx_t, name: *mut ngx_str_t) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_tree_ctx_s {
    pub size: off_t,
    pub fs_size: off_t,
    pub access: ngx_uint_t,
    pub mtime: time_t,
    pub init_handler: ngx_tree_init_handler_pt,
    pub file_handler: ngx_tree_handler_pt,
    pub pre_tree_handler: ngx_tree_handler_pt,
    pub post_tree_handler: ngx_tree_handler_pt,
    pub spec_handler: ngx_tree_handler_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub alloc: usize,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_tree_ctx_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_tree_ctx_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_tree_ctx_s>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_tree_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_tree_ctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_tree_ctx_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(fs_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_handler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(init_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_handler) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(file_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pre_tree_handler) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(pre_tree_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_tree_handler) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(post_tree_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spec_handler) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(spec_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_tree_ctx_s),
            "::",
            stringify!(log)
        )
    );
}
extern "C" {
    pub fn ngx_get_full_name(
        pool: *mut ngx_pool_t,
        prefix: *mut ngx_str_t,
        name: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_write_chain_to_temp_file(tf: *mut ngx_temp_file_t, chain: *mut ngx_chain_t)
        -> isize;
}
extern "C" {
    pub fn ngx_create_temp_file(
        file: *mut ngx_file_t,
        path: *mut ngx_path_t,
        pool: *mut ngx_pool_t,
        persistent: ngx_uint_t,
        clean: ngx_uint_t,
        access: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_create_hashed_filename(path: *mut ngx_path_t, file: *mut u_char, len: usize);
}
extern "C" {
    pub fn ngx_create_path(file: *mut ngx_file_t, path: *mut ngx_path_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_create_full_path(dir: *mut u_char, access: ngx_uint_t) -> ngx_err_t;
}
extern "C" {
    pub fn ngx_add_path(cf: *mut ngx_conf_t, slot: *mut *mut ngx_path_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_create_paths(cycle: *mut ngx_cycle_t, user: ngx_uid_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ext_rename_file(
        src: *mut ngx_str_t,
        to: *mut ngx_str_t,
        ext: *mut ngx_ext_rename_file_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_copy_file(from: *mut u_char, to: *mut u_char, cf: *mut ngx_copy_file_t)
        -> ngx_int_t;
}
extern "C" {
    pub fn ngx_walk_tree(ctx: *mut ngx_tree_ctx_t, tree: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_next_temp_number(collision: ngx_uint_t) -> ngx_atomic_uint_t;
}
extern "C" {
    pub fn ngx_conf_set_path_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_merge_path_value(
        cf: *mut ngx_conf_t,
        path: *mut *mut ngx_path_t,
        prev: *mut ngx_path_t,
        init: *mut ngx_path_init_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_access_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ngx_temp_number: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_random_number: ngx_atomic_int_t;
}
extern "C" {
    pub static mut ngx_crc32_table_short: *mut u32;
}
extern "C" {
    pub static mut ngx_crc32_table256: [u32; 0usize];
}
extern "C" {
    pub fn ngx_crc32_table_init() -> ngx_int_t;
}
extern "C" {
    pub fn ngx_murmur_hash2(data: *mut u_char, len: usize) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_code_8 {
    _unused: [u8; 0],
}
pub type pcre2_code_8 = pcre2_real_code_8;
pub type ngx_regex_t = pcre2_code_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_regex_compile_t {
    pub pattern: ngx_str_t,
    pub pool: *mut ngx_pool_t,
    pub options: ngx_uint_t,
    pub regex: *mut ngx_regex_t,
    pub captures: ::std::os::raw::c_int,
    pub named_captures: ::std::os::raw::c_int,
    pub name_size: ::std::os::raw::c_int,
    pub names: *mut u_char,
    pub err: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_regex_compile_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_regex_compile_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_regex_compile_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_regex_compile_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_regex_compile_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_regex_compile_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pattern) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(captures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_captures) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(named_captures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(name_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_compile_t),
            "::",
            stringify!(err)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_regex_elt_t {
    pub regex: *mut ngx_regex_t,
    pub name: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_regex_elt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_regex_elt_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_regex_elt_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_regex_elt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_regex_elt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_regex_elt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_elt_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_regex_elt_t),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn ngx_regex_init();
}
extern "C" {
    pub fn ngx_regex_compile(rc: *mut ngx_regex_compile_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_regex_exec(
        re: *mut ngx_regex_t,
        s: *mut ngx_str_t,
        captures: *mut ::std::os::raw::c_int,
        size: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_regex_exec_array(
        a: *mut ngx_array_t,
        s: *mut ngx_str_t,
        log: *mut ngx_log_t,
    ) -> ngx_int_t;
}
pub type ngx_radix_node_t = ngx_radix_node_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_radix_node_s {
    pub right: *mut ngx_radix_node_t,
    pub left: *mut ngx_radix_node_t,
    pub parent: *mut ngx_radix_node_t,
    pub value: usize,
}
#[test]
fn bindgen_test_layout_ngx_radix_node_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_radix_node_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_radix_node_s>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_radix_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_radix_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_radix_node_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_node_s),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_node_s),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_node_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_node_s),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_radix_tree_t {
    pub root: *mut ngx_radix_node_t,
    pub pool: *mut ngx_pool_t,
    pub free: *mut ngx_radix_node_t,
    pub start: *mut ::std::os::raw::c_char,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_ngx_radix_tree_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_radix_tree_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_radix_tree_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_radix_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_radix_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_radix_tree_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_tree_t),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_tree_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_tree_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_tree_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_radix_tree_t),
            "::",
            stringify!(size)
        )
    );
}
extern "C" {
    pub fn ngx_radix_tree_create(
        pool: *mut ngx_pool_t,
        preallocate: ngx_int_t,
    ) -> *mut ngx_radix_tree_t;
}
extern "C" {
    pub fn ngx_radix32tree_insert(
        tree: *mut ngx_radix_tree_t,
        key: u32,
        mask: u32,
        value: usize,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_radix32tree_delete(tree: *mut ngx_radix_tree_t, key: u32, mask: u32) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_radix32tree_find(tree: *mut ngx_radix_tree_t, key: u32) -> usize;
}
extern "C" {
    pub fn ngx_radix128tree_insert(
        tree: *mut ngx_radix_tree_t,
        key: *mut u_char,
        mask: *mut u_char,
        value: usize,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_radix128tree_delete(
        tree: *mut ngx_radix_tree_t,
        key: *mut u_char,
        mask: *mut u_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_radix128tree_find(tree: *mut ngx_radix_tree_t, key: *mut u_char) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_time_t {
    pub sec: time_t,
    pub msec: ngx_uint_t,
    pub gmtoff: ngx_int_t,
}
#[test]
fn bindgen_test_layout_ngx_time_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_time_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_time_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_time_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_time_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_time_t),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_time_t),
            "::",
            stringify!(msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmtoff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_time_t),
            "::",
            stringify!(gmtoff)
        )
    );
}
extern "C" {
    pub fn ngx_time_init();
}
extern "C" {
    pub fn ngx_time_update();
}
extern "C" {
    pub fn ngx_time_sigsafe_update();
}
extern "C" {
    pub fn ngx_http_time(buf: *mut u_char, t: time_t) -> *mut u_char;
}
extern "C" {
    pub fn ngx_http_cookie_time(buf: *mut u_char, t: time_t) -> *mut u_char;
}
extern "C" {
    pub fn ngx_gmtime(t: time_t, tp: *mut ngx_tm_t);
}
extern "C" {
    pub fn ngx_next_time(when: time_t) -> time_t;
}
extern "C" {
    pub static mut ngx_cached_time: *mut ngx_time_t;
}
extern "C" {
    pub static mut ngx_cached_err_log_time: ngx_str_t;
}
extern "C" {
    pub static mut ngx_cached_http_time: ngx_str_t;
}
extern "C" {
    pub static mut ngx_cached_http_log_time: ngx_str_t;
}
extern "C" {
    pub static mut ngx_cached_http_log_iso8601: ngx_str_t;
}
extern "C" {
    pub static mut ngx_cached_syslog_time: ngx_str_t;
}
extern "C" {
    pub static mut ngx_current_msec: ngx_msec_t;
}
extern "C" {
    pub fn ngx_rwlock_wlock(lock: *mut ngx_atomic_t);
}
extern "C" {
    pub fn ngx_rwlock_rlock(lock: *mut ngx_atomic_t);
}
extern "C" {
    pub fn ngx_rwlock_unlock(lock: *mut ngx_atomic_t);
}
extern "C" {
    pub fn ngx_rwlock_downgrade(lock: *mut ngx_atomic_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_shmtx_sh_t {
    pub lock: ngx_atomic_t,
    pub wait: ngx_atomic_t,
}
#[test]
fn bindgen_test_layout_ngx_shmtx_sh_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_shmtx_sh_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_shmtx_sh_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_shmtx_sh_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_shmtx_sh_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_shmtx_sh_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_sh_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_sh_t),
            "::",
            stringify!(wait)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_shmtx_t {
    pub lock: *mut ngx_atomic_t,
    pub wait: *mut ngx_atomic_t,
    pub semaphore: ngx_uint_t,
    pub sem: sem_t,
    pub spin: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_shmtx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_shmtx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_shmtx_t>(),
        64usize,
        concat!("Size of: ", stringify!(ngx_shmtx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_shmtx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_shmtx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_t),
            "::",
            stringify!(wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_t),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_t),
            "::",
            stringify!(sem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spin) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shmtx_t),
            "::",
            stringify!(spin)
        )
    );
}
extern "C" {
    pub fn ngx_shmtx_create(
        mtx: *mut ngx_shmtx_t,
        addr: *mut ngx_shmtx_sh_t,
        name: *mut u_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_shmtx_destroy(mtx: *mut ngx_shmtx_t);
}
extern "C" {
    pub fn ngx_shmtx_trylock(mtx: *mut ngx_shmtx_t) -> ngx_uint_t;
}
extern "C" {
    pub fn ngx_shmtx_lock(mtx: *mut ngx_shmtx_t);
}
extern "C" {
    pub fn ngx_shmtx_unlock(mtx: *mut ngx_shmtx_t);
}
extern "C" {
    pub fn ngx_shmtx_force_unlock(mtx: *mut ngx_shmtx_t, pid: ngx_pid_t) -> ngx_uint_t;
}
pub type ngx_slab_page_t = ngx_slab_page_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_slab_page_s {
    pub slab: usize,
    pub next: *mut ngx_slab_page_t,
    pub prev: usize,
}
#[test]
fn bindgen_test_layout_ngx_slab_page_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_slab_page_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_slab_page_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_slab_page_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_slab_page_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_slab_page_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slab) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_page_s),
            "::",
            stringify!(slab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_page_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_page_s),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_slab_stat_t {
    pub total: ngx_uint_t,
    pub used: ngx_uint_t,
    pub reqs: ngx_uint_t,
    pub fails: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_slab_stat_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_slab_stat_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_slab_stat_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_slab_stat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_slab_stat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_slab_stat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_stat_t),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_stat_t),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reqs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_stat_t),
            "::",
            stringify!(reqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fails) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_stat_t),
            "::",
            stringify!(fails)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_slab_pool_t {
    pub lock: ngx_shmtx_sh_t,
    pub min_size: usize,
    pub min_shift: usize,
    pub pages: *mut ngx_slab_page_t,
    pub last: *mut ngx_slab_page_t,
    pub free: ngx_slab_page_t,
    pub stats: *mut ngx_slab_stat_t,
    pub pfree: ngx_uint_t,
    pub start: *mut u_char,
    pub end: *mut u_char,
    pub mutex: ngx_shmtx_t,
    pub log_ctx: *mut u_char,
    pub zero: u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub data: *mut ::std::os::raw::c_void,
    pub addr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_slab_pool_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_slab_pool_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_slab_pool_t>(),
        200usize,
        concat!("Size of: ", stringify!(ngx_slab_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_slab_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_slab_pool_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(min_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_shift) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(min_shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stats) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfree) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(pfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_ctx) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(log_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_slab_pool_t),
            "::",
            stringify!(addr)
        )
    );
}
impl ngx_slab_pool_t {
    #[inline]
    pub fn log_nomem(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_log_nomem(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        log_nomem: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let log_nomem: u32 = unsafe { ::std::mem::transmute(log_nomem) };
            log_nomem as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_slab_sizes_init();
}
extern "C" {
    pub fn ngx_slab_init(pool: *mut ngx_slab_pool_t);
}
extern "C" {
    pub fn ngx_slab_alloc(pool: *mut ngx_slab_pool_t, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_slab_alloc_locked(
        pool: *mut ngx_slab_pool_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_slab_calloc(pool: *mut ngx_slab_pool_t, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_slab_calloc_locked(
        pool: *mut ngx_slab_pool_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_slab_free(pool: *mut ngx_slab_pool_t, p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ngx_slab_free_locked(pool: *mut ngx_slab_pool_t, p: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_sockaddr_t {
    pub sockaddr: sockaddr,
    pub sockaddr_in: sockaddr_in,
    pub sockaddr_in6: sockaddr_in6,
    pub sockaddr_un: sockaddr_un,
}
#[test]
fn bindgen_test_layout_ngx_sockaddr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_sockaddr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_sockaddr_t>(),
        112usize,
        concat!("Size of: ", stringify!(ngx_sockaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_sockaddr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ngx_sockaddr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_sockaddr_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_sockaddr_t),
            "::",
            stringify!(sockaddr_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr_in6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_sockaddr_t),
            "::",
            stringify!(sockaddr_in6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr_un) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_sockaddr_t),
            "::",
            stringify!(sockaddr_un)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_in_cidr_t {
    pub addr: in_addr_t,
    pub mask: in_addr_t,
}
#[test]
fn bindgen_test_layout_ngx_in_cidr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_in_cidr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_in_cidr_t>(),
        8usize,
        concat!("Size of: ", stringify!(ngx_in_cidr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_in_cidr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ngx_in_cidr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_in_cidr_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_in_cidr_t),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_in6_cidr_t {
    pub addr: in6_addr,
    pub mask: in6_addr,
}
#[test]
fn bindgen_test_layout_ngx_in6_cidr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_in6_cidr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_in6_cidr_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_in6_cidr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_in6_cidr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ngx_in6_cidr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_in6_cidr_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_in6_cidr_t),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_cidr_t {
    pub family: ngx_uint_t,
    pub u: ngx_cidr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_cidr_t__bindgen_ty_1 {
    pub in_: ngx_in_cidr_t,
    pub in6: ngx_in6_cidr_t,
}
#[test]
fn bindgen_test_layout_ngx_cidr_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_cidr_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_cidr_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_cidr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_cidr_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ngx_cidr_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cidr_t__bindgen_ty_1),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cidr_t__bindgen_ty_1),
            "::",
            stringify!(in6)
        )
    );
}
#[test]
fn bindgen_test_layout_ngx_cidr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_cidr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_cidr_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_cidr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_cidr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_cidr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cidr_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cidr_t),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_addr_t {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_addr_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_addr_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_addr_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_addr_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_url_t {
    pub url: ngx_str_t,
    pub host: ngx_str_t,
    pub port_text: ngx_str_t,
    pub uri: ngx_str_t,
    pub port: in_port_t,
    pub default_port: in_port_t,
    pub last_port: in_port_t,
    pub family: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub socklen: socklen_t,
    pub sockaddr: ngx_sockaddr_t,
    pub addrs: *mut ngx_addr_t,
    pub naddrs: ngx_uint_t,
    pub err: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ngx_url_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_url_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_url_t>(),
        224usize,
        concat!("Size of: ", stringify!(ngx_url_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_url_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_url_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_text) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(port_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_port) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(default_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_port) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(last_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_url_t),
            "::",
            stringify!(err)
        )
    );
}
impl ngx_url_t {
    #[inline]
    pub fn listen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_listen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uri_part(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uri_part(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_resolve(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_resolve(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_port(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_port(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wildcard(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wildcard(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        listen: ::std::os::raw::c_uint,
        uri_part: ::std::os::raw::c_uint,
        no_resolve: ::std::os::raw::c_uint,
        no_port: ::std::os::raw::c_uint,
        wildcard: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let listen: u32 = unsafe { ::std::mem::transmute(listen) };
            listen as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let uri_part: u32 = unsafe { ::std::mem::transmute(uri_part) };
            uri_part as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_resolve: u32 = unsafe { ::std::mem::transmute(no_resolve) };
            no_resolve as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let no_port: u32 = unsafe { ::std::mem::transmute(no_port) };
            no_port as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let wildcard: u32 = unsafe { ::std::mem::transmute(wildcard) };
            wildcard as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_inet_addr(text: *mut u_char, len: usize) -> in_addr_t;
}
extern "C" {
    pub fn ngx_inet6_addr(p: *mut u_char, len: usize, addr: *mut u_char) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_inet6_ntop(p: *mut u_char, text: *mut u_char, len: usize) -> usize;
}
extern "C" {
    pub fn ngx_sock_ntop(
        sa: *mut sockaddr,
        socklen: socklen_t,
        text: *mut u_char,
        len: usize,
        port: ngx_uint_t,
    ) -> usize;
}
extern "C" {
    pub fn ngx_inet_ntop(
        family: ::std::os::raw::c_int,
        addr: *mut ::std::os::raw::c_void,
        text: *mut u_char,
        len: usize,
    ) -> usize;
}
extern "C" {
    pub fn ngx_ptocidr(text: *mut ngx_str_t, cidr: *mut ngx_cidr_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_cidr_match(sa: *mut sockaddr, cidrs: *mut ngx_array_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_parse_addr(
        pool: *mut ngx_pool_t,
        addr: *mut ngx_addr_t,
        text: *mut u_char,
        len: usize,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_parse_addr_port(
        pool: *mut ngx_pool_t,
        addr: *mut ngx_addr_t,
        text: *mut u_char,
        len: usize,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_parse_url(pool: *mut ngx_pool_t, u: *mut ngx_url_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_inet_resolve_host(pool: *mut ngx_pool_t, u: *mut ngx_url_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_cmp_sockaddr(
        sa1: *mut sockaddr,
        slen1: socklen_t,
        sa2: *mut sockaddr,
        slen2: socklen_t,
        cmp_port: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_inet_get_port(sa: *mut sockaddr) -> in_port_t;
}
extern "C" {
    pub fn ngx_inet_set_port(sa: *mut sockaddr, port: in_port_t);
}
extern "C" {
    pub fn ngx_inet_wildcard(sa: *mut sockaddr) -> ngx_uint_t;
}
pub type ngx_shm_zone_t = ngx_shm_zone_s;
pub type ngx_shm_zone_init_pt = ::std::option::Option<
    unsafe extern "C" fn(zone: *mut ngx_shm_zone_t, data: *mut ::std::os::raw::c_void) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_shm_zone_s {
    pub data: *mut ::std::os::raw::c_void,
    pub shm: ngx_shm_t,
    pub init: ngx_shm_zone_init_pt,
    pub tag: *mut ::std::os::raw::c_void,
    pub sync: *mut ::std::os::raw::c_void,
    pub noreuse: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_shm_zone_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_shm_zone_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_shm_zone_s>(),
        88usize,
        concat!("Size of: ", stringify!(ngx_shm_zone_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_shm_zone_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_shm_zone_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_zone_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_zone_s),
            "::",
            stringify!(shm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_zone_s),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_zone_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_zone_s),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noreuse) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_shm_zone_s),
            "::",
            stringify!(noreuse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_cycle_s {
    pub conf_ctx: *mut *mut *mut *mut ::std::os::raw::c_void,
    pub pool: *mut ngx_pool_t,
    pub log: *mut ngx_log_t,
    pub new_log: ngx_log_t,
    pub log_use_stderr: ngx_uint_t,
    pub files: *mut *mut ngx_connection_t,
    pub free_connections: *mut ngx_connection_t,
    pub free_connection_n: ngx_uint_t,
    pub modules: *mut *mut ngx_module_t,
    pub modules_n: ngx_uint_t,
    pub modules_used: ngx_uint_t,
    pub reusable_connections_queue: ngx_queue_t,
    pub reusable_connections_n: ngx_uint_t,
    pub connections_reuse_time: time_t,
    pub listening: ngx_array_t,
    pub paths: ngx_array_t,
    pub config_dump: ngx_array_t,
    pub config_dump_rbtree: ngx_rbtree_t,
    pub config_dump_sentinel: ngx_rbtree_node_t,
    pub open_files: ngx_list_t,
    pub shared_memory: ngx_list_t,
    pub connection_n: ngx_uint_t,
    pub files_n: ngx_uint_t,
    pub connections: *mut ngx_connection_t,
    pub read_events: *mut ngx_event_t,
    pub write_events: *mut ngx_event_t,
    pub old_cycle: *mut ngx_cycle_t,
    pub conf_file: ngx_str_t,
    pub conf_param: ngx_str_t,
    pub conf_prefix: ngx_str_t,
    pub prefix: ngx_str_t,
    pub error_log: ngx_str_t,
    pub lock_file: ngx_str_t,
    pub hostname: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_cycle_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_cycle_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_cycle_s>(),
        648usize,
        concat!("Size of: ", stringify!(ngx_cycle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_cycle_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_cycle_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(conf_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_log) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(new_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_use_stderr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(log_use_stderr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_connections) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(free_connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_connection_n) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(free_connection_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modules) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(modules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modules_n) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(modules_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modules_used) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(modules_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reusable_connections_queue) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(reusable_connections_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reusable_connections_n) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(reusable_connections_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connections_reuse_time) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(connections_reuse_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listening) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(listening)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paths) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(paths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_dump) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(config_dump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_dump_rbtree) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(config_dump_rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_dump_sentinel) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(config_dump_sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_files) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(open_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_memory) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(shared_memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_n) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(connection_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files_n) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(files_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connections) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_events) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(read_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_events) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(write_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_cycle) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(old_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_file) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(conf_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_param) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(conf_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_prefix) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(conf_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_log) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(error_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_file) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(lock_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostname) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cycle_s),
            "::",
            stringify!(hostname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_core_conf_t {
    pub daemon: ngx_flag_t,
    pub master: ngx_flag_t,
    pub timer_resolution: ngx_msec_t,
    pub shutdown_timeout: ngx_msec_t,
    pub worker_processes: ngx_int_t,
    pub debug_points: ngx_int_t,
    pub rlimit_nofile: ngx_int_t,
    pub rlimit_core: off_t,
    pub priority: ::std::os::raw::c_int,
    pub cpu_affinity_auto: ngx_uint_t,
    pub cpu_affinity_n: ngx_uint_t,
    pub cpu_affinity: *mut ngx_cpuset_t,
    pub username: *mut ::std::os::raw::c_char,
    pub user: ngx_uid_t,
    pub group: ngx_gid_t,
    pub working_directory: ngx_str_t,
    pub lock_file: ngx_str_t,
    pub pid: ngx_str_t,
    pub oldpid: ngx_str_t,
    pub env: ngx_array_t,
    pub environment: *mut *mut ::std::os::raw::c_char,
    pub transparent: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_core_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_core_conf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_core_conf_t>(),
        232usize,
        concat!("Size of: ", stringify!(ngx_core_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_core_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_core_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).daemon) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(daemon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timer_resolution) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(timer_resolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shutdown_timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(shutdown_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).worker_processes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(worker_processes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug_points) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(debug_points)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlimit_nofile) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(rlimit_nofile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlimit_core) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(rlimit_core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_affinity_auto) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(cpu_affinity_auto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_affinity_n) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(cpu_affinity_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_affinity) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(cpu_affinity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).username) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).working_directory) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(working_directory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_file) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(lock_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldpid) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(oldpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).env) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).environment) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(environment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transparent) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_conf_t),
            "::",
            stringify!(transparent)
        )
    );
}
extern "C" {
    pub fn ngx_init_cycle(old_cycle: *mut ngx_cycle_t) -> *mut ngx_cycle_t;
}
extern "C" {
    pub fn ngx_create_pidfile(name: *mut ngx_str_t, log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_delete_pidfile(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub fn ngx_signal_process(
        cycle: *mut ngx_cycle_t,
        sig: *mut ::std::os::raw::c_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_reopen_files(cycle: *mut ngx_cycle_t, user: ngx_uid_t);
}
extern "C" {
    pub fn ngx_set_environment(
        cycle: *mut ngx_cycle_t,
        last: *mut ngx_uint_t,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_exec_new_binary(
        cycle: *mut ngx_cycle_t,
        argv: *const *mut ::std::os::raw::c_char,
    ) -> ngx_pid_t;
}
extern "C" {
    pub fn ngx_get_cpu_affinity(n: ngx_uint_t) -> *mut ngx_cpuset_t;
}
extern "C" {
    pub fn ngx_shared_memory_add(
        cf: *mut ngx_conf_t,
        name: *mut ngx_str_t,
        size: usize,
        tag: *mut ::std::os::raw::c_void,
    ) -> *mut ngx_shm_zone_t;
}
extern "C" {
    pub fn ngx_set_shutdown_timer(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub static mut ngx_cycle: *mut ngx_cycle_t;
}
extern "C" {
    pub static mut ngx_old_cycles: ngx_array_t;
}
extern "C" {
    pub static mut ngx_core_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_test_config: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_dump_config: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_quiet_mode: ngx_uint_t;
}
pub type ngx_resolver_t = ngx_resolver_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_resolver_connection_t {
    pub udp: *mut ngx_connection_t,
    pub tcp: *mut ngx_connection_t,
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub server: ngx_str_t,
    pub log: ngx_log_t,
    pub read_buf: *mut ngx_buf_t,
    pub write_buf: *mut ngx_buf_t,
    pub resolver: *mut ngx_resolver_t,
}
#[test]
fn bindgen_test_layout_ngx_resolver_connection_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_connection_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_connection_t>(),
        152usize,
        concat!("Size of: ", stringify!(ngx_resolver_connection_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_connection_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_connection_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(udp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(tcp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_buf) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(read_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_buf) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(write_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_connection_t),
            "::",
            stringify!(resolver)
        )
    );
}
pub type ngx_resolver_ctx_t = ngx_resolver_ctx_s;
pub type ngx_resolver_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ngx_resolver_ctx_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_resolver_addr_t {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: ngx_str_t,
    pub priority: u_short,
    pub weight: u_short,
}
#[test]
fn bindgen_test_layout_ngx_resolver_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_addr_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_resolver_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_addr_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_addr_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_addr_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_addr_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_addr_t),
            "::",
            stringify!(weight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_resolver_srv_t {
    pub name: ngx_str_t,
    pub priority: u_short,
    pub weight: u_short,
    pub port: u_short,
}
#[test]
fn bindgen_test_layout_ngx_resolver_srv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_srv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_srv_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_resolver_srv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_srv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_srv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_t),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_t),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_resolver_srv_name_t {
    pub name: ngx_str_t,
    pub priority: u_short,
    pub weight: u_short,
    pub port: u_short,
    pub ctx: *mut ngx_resolver_ctx_t,
    pub state: ngx_int_t,
    pub naddrs: ngx_uint_t,
    pub addrs: *mut ngx_addr_t,
}
#[test]
fn bindgen_test_layout_ngx_resolver_srv_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_srv_name_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_srv_name_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_resolver_srv_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_srv_name_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_srv_name_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_srv_name_t),
            "::",
            stringify!(addrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_resolver_node_t {
    pub node: ngx_rbtree_node_t,
    pub queue: ngx_queue_t,
    pub name: *mut u_char,
    pub addr6: in6_addr,
    pub nlen: u_short,
    pub qlen: u_short,
    pub query: *mut u_char,
    pub query6: *mut u_char,
    pub u: ngx_resolver_node_t__bindgen_ty_1,
    pub code: u_char,
    pub naddrs: u_short,
    pub nsrvs: u_short,
    pub cnlen: u_short,
    pub u6: ngx_resolver_node_t__bindgen_ty_2,
    pub naddrs6: u_short,
    pub expire: time_t,
    pub valid: time_t,
    pub ttl: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub last_connection: ngx_uint_t,
    pub waiting: *mut ngx_resolver_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_resolver_node_t__bindgen_ty_1 {
    pub addr: in_addr_t,
    pub addrs: *mut in_addr_t,
    pub cname: *mut u_char,
    pub srvs: *mut ngx_resolver_srv_t,
}
#[test]
fn bindgen_test_layout_ngx_resolver_node_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_node_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_node_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ngx_resolver_node_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_node_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_resolver_node_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t__bindgen_ty_1),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t__bindgen_ty_1),
            "::",
            stringify!(cname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srvs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t__bindgen_ty_1),
            "::",
            stringify!(srvs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_resolver_node_t__bindgen_ty_2 {
    pub addr6: in6_addr,
    pub addrs6: *mut in6_addr,
}
#[test]
fn bindgen_test_layout_ngx_resolver_node_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_node_t__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_node_t__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_resolver_node_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_node_t__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_resolver_node_t__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t__bindgen_ty_2),
            "::",
            stringify!(addr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t__bindgen_ty_2),
            "::",
            stringify!(addrs6)
        )
    );
}
#[test]
fn bindgen_test_layout_ngx_resolver_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_node_t>(),
        184usize,
        concat!("Size of: ", stringify!(ngx_resolver_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(addr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlen) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(nlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qlen) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(qlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query6) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(query6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsrvs) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(nsrvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnlen) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(cnlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u6) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(u6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(naddrs6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttl) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_connection) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(last_connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waiting) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_node_t),
            "::",
            stringify!(waiting)
        )
    );
}
impl ngx_resolver_node_t {
    #[inline]
    pub fn tcp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcp6(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcp6(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcp: ::std::os::raw::c_uint,
        tcp6: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcp: u32 = unsafe { ::std::mem::transmute(tcp) };
            tcp as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcp6: u32 = unsafe { ::std::mem::transmute(tcp6) };
            tcp6 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_resolver_s {
    pub event: *mut ngx_event_t,
    pub dummy: *mut ::std::os::raw::c_void,
    pub log: *mut ngx_log_t,
    pub ident: ngx_int_t,
    pub connections: ngx_array_t,
    pub last_connection: ngx_uint_t,
    pub name_rbtree: ngx_rbtree_t,
    pub name_sentinel: ngx_rbtree_node_t,
    pub srv_rbtree: ngx_rbtree_t,
    pub srv_sentinel: ngx_rbtree_node_t,
    pub addr_rbtree: ngx_rbtree_t,
    pub addr_sentinel: ngx_rbtree_node_t,
    pub name_resend_queue: ngx_queue_t,
    pub srv_resend_queue: ngx_queue_t,
    pub addr_resend_queue: ngx_queue_t,
    pub name_expire_queue: ngx_queue_t,
    pub srv_expire_queue: ngx_queue_t,
    pub addr_expire_queue: ngx_queue_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub addr6_rbtree: ngx_rbtree_t,
    pub addr6_sentinel: ngx_rbtree_node_t,
    pub addr6_resend_queue: ngx_queue_t,
    pub addr6_expire_queue: ngx_queue_t,
    pub resend_timeout: time_t,
    pub tcp_timeout: time_t,
    pub expire: time_t,
    pub valid: time_t,
    pub log_level: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_resolver_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_s>(),
        512usize,
        concat!("Size of: ", stringify!(ngx_resolver_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connections) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_connection) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(last_connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_rbtree) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(name_rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_sentinel) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(name_sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_rbtree) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(srv_rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_sentinel) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(srv_sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_rbtree) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr_rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_sentinel) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr_sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_resend_queue) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(name_resend_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_resend_queue) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(srv_resend_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_resend_queue) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr_resend_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_expire_queue) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(name_expire_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_expire_queue) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(srv_expire_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_expire_queue) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr_expire_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6_rbtree) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr6_rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6_sentinel) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr6_sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6_resend_queue) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr6_resend_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6_expire_queue) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(addr6_expire_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resend_timeout) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(resend_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_timeout) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(tcp_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_level) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_s),
            "::",
            stringify!(log_level)
        )
    );
}
impl ngx_resolver_s {
    #[inline]
    pub fn ipv4(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv4(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipv6(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv6(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ipv4: ::std::os::raw::c_uint,
        ipv6: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ipv4: u32 = unsafe { ::std::mem::transmute(ipv4) };
            ipv4 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ipv6: u32 = unsafe { ::std::mem::transmute(ipv6) };
            ipv6 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_resolver_ctx_s {
    pub next: *mut ngx_resolver_ctx_t,
    pub resolver: *mut ngx_resolver_t,
    pub node: *mut ngx_resolver_node_t,
    pub ident: ngx_int_t,
    pub state: ngx_int_t,
    pub name: ngx_str_t,
    pub service: ngx_str_t,
    pub valid: time_t,
    pub naddrs: ngx_uint_t,
    pub addrs: *mut ngx_resolver_addr_t,
    pub addr: ngx_resolver_addr_t,
    pub sin: sockaddr_in,
    pub count: ngx_uint_t,
    pub nsrvs: ngx_uint_t,
    pub srvs: *mut ngx_resolver_srv_name_t,
    pub handler: ngx_resolver_handler_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub timeout: ngx_msec_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub recursion: ngx_uint_t,
    pub event: *mut ngx_event_t,
}
#[test]
fn bindgen_test_layout_ngx_resolver_ctx_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_resolver_ctx_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_resolver_ctx_s>(),
        224usize,
        concat!("Size of: ", stringify!(ngx_resolver_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_resolver_ctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_resolver_ctx_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(resolver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(sin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsrvs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(nsrvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srvs) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(srvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursion) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(recursion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_resolver_ctx_s),
            "::",
            stringify!(event)
        )
    );
}
impl ngx_resolver_ctx_s {
    #[inline]
    pub fn quick(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quick(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn async_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_async(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cancelable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cancelable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        quick: ::std::os::raw::c_uint,
        async_: ::std::os::raw::c_uint,
        cancelable: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let quick: u32 = unsafe { ::std::mem::transmute(quick) };
            quick as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let async_: u32 = unsafe { ::std::mem::transmute(async_) };
            async_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cancelable: u32 = unsafe { ::std::mem::transmute(cancelable) };
            cancelable as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_resolver_create(
        cf: *mut ngx_conf_t,
        names: *mut ngx_str_t,
        n: ngx_uint_t,
    ) -> *mut ngx_resolver_t;
}
extern "C" {
    pub fn ngx_resolve_start(
        r: *mut ngx_resolver_t,
        temp: *mut ngx_resolver_ctx_t,
    ) -> *mut ngx_resolver_ctx_t;
}
extern "C" {
    pub fn ngx_resolve_name(ctx: *mut ngx_resolver_ctx_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_resolve_name_done(ctx: *mut ngx_resolver_ctx_t);
}
extern "C" {
    pub fn ngx_resolve_addr(ctx: *mut ngx_resolver_ctx_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_resolve_addr_done(ctx: *mut ngx_resolver_ctx_t);
}
extern "C" {
    pub fn ngx_resolver_strerror(err: ngx_int_t) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_st {
    _unused: [u8; 0],
}
pub type SSL = ssl_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_ctx_st {
    _unused: [u8; 0],
}
pub type SSL_CTX = ssl_ctx_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ssl_session_st {
    _unused: [u8; 0],
}
pub type SSL_SESSION = ssl_session_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ssl_ocsp_s {
    _unused: [u8; 0],
}
pub type ngx_ssl_ocsp_t = ngx_ssl_ocsp_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ssl_s {
    pub ctx: *mut SSL_CTX,
    pub log: *mut ngx_log_t,
    pub buffer_size: usize,
}
#[test]
fn bindgen_test_layout_ngx_ssl_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_ssl_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_ssl_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_ssl_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_ssl_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_ssl_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_s),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_s),
            "::",
            stringify!(buffer_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ssl_connection_s {
    pub connection: *mut SSL,
    pub session_ctx: *mut SSL_CTX,
    pub last: ngx_int_t,
    pub buf: *mut ngx_buf_t,
    pub buffer_size: usize,
    pub handler: ngx_connection_handler_pt,
    pub session: *mut SSL_SESSION,
    pub save_session: ngx_connection_handler_pt,
    pub saved_read_handler: ngx_event_handler_pt,
    pub saved_write_handler: ngx_event_handler_pt,
    pub ocsp: *mut ngx_ssl_ocsp_t,
    pub early_buf: u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_ngx_ssl_connection_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_ssl_connection_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_ssl_connection_s>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_ssl_connection_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_ssl_connection_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_ssl_connection_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_ctx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(session_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_session) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(save_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_read_handler) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(saved_read_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_write_handler) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(saved_write_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ocsp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(ocsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).early_buf) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_connection_s),
            "::",
            stringify!(early_buf)
        )
    );
}
impl ngx_ssl_connection_s {
    #[inline]
    pub fn handshaked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_handshaked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn handshake_rejected(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_handshake_rejected(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn renegotiation(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_renegotiation(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buffer(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buffer(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sendfile(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sendfile(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_wait_shutdown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_wait_shutdown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_send_shutdown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_send_shutdown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shutdown_without_free(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shutdown_without_free(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn handshake_buffer_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_handshake_buffer_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn session_timeout_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_session_timeout_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn try_early_data(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_try_early_data(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_early(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_early(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_ocsp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_ocsp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn early_preread(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_early_preread(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn write_blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_write_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        handshaked: ::std::os::raw::c_uint,
        handshake_rejected: ::std::os::raw::c_uint,
        renegotiation: ::std::os::raw::c_uint,
        buffer: ::std::os::raw::c_uint,
        sendfile: ::std::os::raw::c_uint,
        no_wait_shutdown: ::std::os::raw::c_uint,
        no_send_shutdown: ::std::os::raw::c_uint,
        shutdown_without_free: ::std::os::raw::c_uint,
        handshake_buffer_set: ::std::os::raw::c_uint,
        session_timeout_set: ::std::os::raw::c_uint,
        try_early_data: ::std::os::raw::c_uint,
        in_early: ::std::os::raw::c_uint,
        in_ocsp: ::std::os::raw::c_uint,
        early_preread: ::std::os::raw::c_uint,
        write_blocked: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let handshaked: u32 = unsafe { ::std::mem::transmute(handshaked) };
            handshaked as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let handshake_rejected: u32 = unsafe { ::std::mem::transmute(handshake_rejected) };
            handshake_rejected as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let renegotiation: u32 = unsafe { ::std::mem::transmute(renegotiation) };
            renegotiation as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let buffer: u32 = unsafe { ::std::mem::transmute(buffer) };
            buffer as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sendfile: u32 = unsafe { ::std::mem::transmute(sendfile) };
            sendfile as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let no_wait_shutdown: u32 = unsafe { ::std::mem::transmute(no_wait_shutdown) };
            no_wait_shutdown as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let no_send_shutdown: u32 = unsafe { ::std::mem::transmute(no_send_shutdown) };
            no_send_shutdown as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let shutdown_without_free: u32 =
                unsafe { ::std::mem::transmute(shutdown_without_free) };
            shutdown_without_free as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let handshake_buffer_set: u32 = unsafe { ::std::mem::transmute(handshake_buffer_set) };
            handshake_buffer_set as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let session_timeout_set: u32 = unsafe { ::std::mem::transmute(session_timeout_set) };
            session_timeout_set as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let try_early_data: u32 = unsafe { ::std::mem::transmute(try_early_data) };
            try_early_data as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let in_early: u32 = unsafe { ::std::mem::transmute(in_early) };
            in_early as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let in_ocsp: u32 = unsafe { ::std::mem::transmute(in_ocsp) };
            in_ocsp as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let early_preread: u32 = unsafe { ::std::mem::transmute(early_preread) };
            early_preread as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let write_blocked: u32 = unsafe { ::std::mem::transmute(write_blocked) };
            write_blocked as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_ssl_sess_id_t = ngx_ssl_sess_id_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ssl_sess_id_s {
    pub node: ngx_rbtree_node_t,
    pub len: usize,
    pub queue: ngx_queue_t,
    pub expire: time_t,
    pub id: [u_char; 32usize],
    pub session: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_ssl_sess_id_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_ssl_sess_id_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_ssl_sess_id_s>(),
        112usize,
        concat!("Size of: ", stringify!(ngx_ssl_sess_id_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_ssl_sess_id_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_ssl_sess_id_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_sess_id_s),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_sess_id_s),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_sess_id_s),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_sess_id_s),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_sess_id_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_sess_id_s),
            "::",
            stringify!(session)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ssl_ticket_key_t {
    pub name: [u_char; 16usize],
    pub hmac_key: [u_char; 32usize],
    pub aes_key: [u_char; 32usize],
    pub expire: time_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_ssl_ticket_key_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_ssl_ticket_key_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_ssl_ticket_key_t>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_ssl_ticket_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_ssl_ticket_key_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_ssl_ticket_key_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_ticket_key_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmac_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_ticket_key_t),
            "::",
            stringify!(hmac_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aes_key) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_ticket_key_t),
            "::",
            stringify!(aes_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_ticket_key_t),
            "::",
            stringify!(expire)
        )
    );
}
impl ngx_ssl_ticket_key_t {
    #[inline]
    pub fn size(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn shared(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shared(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        size: ::std::os::raw::c_uint,
        shared: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let size: u32 = unsafe { ::std::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let shared: u32 = unsafe { ::std::mem::transmute(shared) };
            shared as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_ssl_session_cache_t {
    pub session_rbtree: ngx_rbtree_t,
    pub sentinel: ngx_rbtree_node_t,
    pub expire_queue: ngx_queue_t,
    pub ticket_keys: [ngx_ssl_ticket_key_t; 3usize],
    pub fail_time: time_t,
}
#[test]
fn bindgen_test_layout_ngx_ssl_session_cache_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_ssl_session_cache_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_ssl_session_cache_t>(),
        376usize,
        concat!("Size of: ", stringify!(ngx_ssl_session_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_ssl_session_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_ssl_session_cache_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_rbtree) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_session_cache_t),
            "::",
            stringify!(session_rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sentinel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_session_cache_t),
            "::",
            stringify!(sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire_queue) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_session_cache_t),
            "::",
            stringify!(expire_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ticket_keys) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_session_cache_t),
            "::",
            stringify!(ticket_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_time) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_ssl_session_cache_t),
            "::",
            stringify!(fail_time)
        )
    );
}
extern "C" {
    pub fn ngx_ssl_init(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_create(
        ssl: *mut ngx_ssl_t,
        protocols: ngx_uint_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_certificates(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        certs: *mut ngx_array_t,
        keys: *mut ngx_array_t,
        passwords: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_certificate(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        cert: *mut ngx_str_t,
        key: *mut ngx_str_t,
        passwords: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_connection_certificate(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        cert: *mut ngx_str_t,
        key: *mut ngx_str_t,
        passwords: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ciphers(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        ciphers: *mut ngx_str_t,
        prefer_server_ciphers: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_client_certificate(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        cert: *mut ngx_str_t,
        depth: ngx_int_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_trusted_certificate(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        cert: *mut ngx_str_t,
        depth: ngx_int_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_crl(cf: *mut ngx_conf_t, ssl: *mut ngx_ssl_t, crl: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_stapling(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        file: *mut ngx_str_t,
        responder: *mut ngx_str_t,
        verify: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_stapling_resolver(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        resolver: *mut ngx_resolver_t,
        resolver_timeout: ngx_msec_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ocsp(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        responder: *mut ngx_str_t,
        depth: ngx_uint_t,
        shm_zone: *mut ngx_shm_zone_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ocsp_resolver(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        resolver: *mut ngx_resolver_t,
        resolver_timeout: ngx_msec_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ocsp_validate(c: *mut ngx_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ocsp_get_status(
        c: *mut ngx_connection_t,
        s: *mut *const ::std::os::raw::c_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ocsp_cleanup(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_ssl_ocsp_cache_init(
        shm_zone: *mut ngx_shm_zone_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_read_password_file(
        cf: *mut ngx_conf_t,
        file: *mut ngx_str_t,
    ) -> *mut ngx_array_t;
}
extern "C" {
    pub fn ngx_ssl_preserve_passwords(
        cf: *mut ngx_conf_t,
        passwords: *mut ngx_array_t,
    ) -> *mut ngx_array_t;
}
extern "C" {
    pub fn ngx_ssl_dhparam(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        file: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_ecdh_curve(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        name: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_early_data(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        enable: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_conf_commands(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        commands: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_client_session_cache(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        enable: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_session_cache(
        ssl: *mut ngx_ssl_t,
        sess_ctx: *mut ngx_str_t,
        certificates: *mut ngx_array_t,
        builtin_session_cache: isize,
        shm_zone: *mut ngx_shm_zone_t,
        timeout: time_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_session_ticket_keys(
        cf: *mut ngx_conf_t,
        ssl: *mut ngx_ssl_t,
        paths: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_session_cache_init(
        shm_zone: *mut ngx_shm_zone_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_create_connection(
        ssl: *mut ngx_ssl_t,
        c: *mut ngx_connection_t,
        flags: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_remove_cached_session(ssl: *mut SSL_CTX, sess: *mut SSL_SESSION);
}
extern "C" {
    pub fn ngx_ssl_set_session(c: *mut ngx_connection_t, session: *mut SSL_SESSION) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_session(c: *mut ngx_connection_t) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn ngx_ssl_get0_session(c: *mut ngx_connection_t) -> *mut SSL_SESSION;
}
extern "C" {
    pub fn ngx_ssl_check_host(c: *mut ngx_connection_t, name: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_protocol(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_cipher_name(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_ciphers(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_curve(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_curves(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_session_id(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_session_reused(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_early_data(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_server_name(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_alpn_protocol(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_raw_certificate(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_certificate(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_escaped_certificate(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_subject_dn(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_issuer_dn(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_subject_dn_legacy(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_issuer_dn_legacy(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_serial_number(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_fingerprint(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_client_verify(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_client_v_start(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_client_v_end(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_get_client_v_remain(
        c: *mut ngx_connection_t,
        pool: *mut ngx_pool_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_handshake(c: *mut ngx_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_recv(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize;
}
extern "C" {
    pub fn ngx_ssl_write(c: *mut ngx_connection_t, data: *mut u_char, size: usize) -> isize;
}
extern "C" {
    pub fn ngx_ssl_recv_chain(
        c: *mut ngx_connection_t,
        cl: *mut ngx_chain_t,
        limit: off_t,
    ) -> isize;
}
extern "C" {
    pub fn ngx_ssl_send_chain(
        c: *mut ngx_connection_t,
        in_: *mut ngx_chain_t,
        limit: off_t,
    ) -> *mut ngx_chain_t;
}
extern "C" {
    pub fn ngx_ssl_free_buffer(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_ssl_shutdown(c: *mut ngx_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_ssl_error(
        level: ngx_uint_t,
        log: *mut ngx_log_t,
        err: ngx_err_t,
        fmt: *mut ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ngx_ssl_cleanup_ctx(data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub static mut ngx_ssl_connection_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_server_conf_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_session_cache_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_ticket_keys_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_ocsp_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_certificate_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_next_certificate_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_certificate_name_index: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ngx_ssl_stapling_index: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_cache_manager_ctx_t {
    pub handler: ngx_event_handler_pt,
    pub name: *mut ::std::os::raw::c_char,
    pub delay: ngx_msec_t,
}
#[test]
fn bindgen_test_layout_ngx_cache_manager_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_cache_manager_ctx_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_cache_manager_ctx_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_cache_manager_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_cache_manager_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_cache_manager_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cache_manager_ctx_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cache_manager_ctx_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cache_manager_ctx_t),
            "::",
            stringify!(delay)
        )
    );
}
extern "C" {
    pub fn ngx_master_process_cycle(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub fn ngx_single_process_cycle(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub static mut ngx_process: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_worker: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_new_binary: ngx_pid_t;
}
extern "C" {
    pub static mut ngx_inherited: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_daemonized: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_exiting: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_reap: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_sigio: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_sigalrm: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_quit: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_debug_quit: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_terminate: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_noaccept: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_reconfigure: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_reopen: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_change_binary: sig_atomic_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_command_s {
    pub name: ngx_str_t,
    pub type_: ngx_uint_t,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            cmd: *mut ngx_command_t,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub conf: ngx_uint_t,
    pub offset: ngx_uint_t,
    pub post: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_command_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_command_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_command_s>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_command_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_command_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_command_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_command_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_command_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_command_s),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_command_s),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_command_s),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_command_s),
            "::",
            stringify!(post)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_open_file_s {
    pub fd: ngx_fd_t,
    pub name: ngx_str_t,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(file: *mut ngx_open_file_t, log: *mut ngx_log_t),
    >,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_open_file_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_open_file_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_open_file_s>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_open_file_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_open_file_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_open_file_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_s),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_s),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_s),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_file_t {
    pub file: ngx_file_t,
    pub buffer: *mut ngx_buf_t,
    pub dump: *mut ngx_buf_t,
    pub line: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_conf_file_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_file_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_file_t>(),
        256usize,
        concat!("Size of: ", stringify!(ngx_conf_file_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_file_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_file_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_file_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dump) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_file_t),
            "::",
            stringify!(dump)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_file_t),
            "::",
            stringify!(line)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_dump_t {
    pub name: ngx_str_t,
    pub buffer: *mut ngx_buf_t,
}
#[test]
fn bindgen_test_layout_ngx_conf_dump_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_dump_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_dump_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_conf_dump_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_dump_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_dump_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_dump_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_dump_t),
            "::",
            stringify!(buffer)
        )
    );
}
pub type ngx_conf_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        cf: *mut ngx_conf_t,
        dummy: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_s {
    pub name: *mut ::std::os::raw::c_char,
    pub args: *mut ngx_array_t,
    pub cycle: *mut ngx_cycle_t,
    pub pool: *mut ngx_pool_t,
    pub temp_pool: *mut ngx_pool_t,
    pub conf_file: *mut ngx_conf_file_t,
    pub log: *mut ngx_log_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub module_type: ngx_uint_t,
    pub cmd_type: ngx_uint_t,
    pub handler: ngx_conf_handler_pt,
    pub handler_conf: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_conf_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_s>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_conf_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_pool) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(temp_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_file) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(conf_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module_type) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(module_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_type) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(cmd_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler_conf) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_s),
            "::",
            stringify!(handler_conf)
        )
    );
}
pub type ngx_conf_post_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        cf: *mut ngx_conf_t,
        data: *mut ::std::os::raw::c_void,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_post_t {
    pub post_handler: ngx_conf_post_handler_pt,
}
#[test]
fn bindgen_test_layout_ngx_conf_post_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_post_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_post_t>(),
        8usize,
        concat!("Size of: ", stringify!(ngx_conf_post_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_post_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_post_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_post_t),
            "::",
            stringify!(post_handler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_deprecated_t {
    pub post_handler: ngx_conf_post_handler_pt,
    pub old_name: *mut ::std::os::raw::c_char,
    pub new_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ngx_conf_deprecated_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_deprecated_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_deprecated_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_conf_deprecated_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_deprecated_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_deprecated_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_deprecated_t),
            "::",
            stringify!(post_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_deprecated_t),
            "::",
            stringify!(old_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_deprecated_t),
            "::",
            stringify!(new_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_num_bounds_t {
    pub post_handler: ngx_conf_post_handler_pt,
    pub low: ngx_int_t,
    pub high: ngx_int_t,
}
#[test]
fn bindgen_test_layout_ngx_conf_num_bounds_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_num_bounds_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_num_bounds_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_conf_num_bounds_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_num_bounds_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_num_bounds_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_num_bounds_t),
            "::",
            stringify!(post_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_num_bounds_t),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_num_bounds_t),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_enum_t {
    pub name: ngx_str_t,
    pub value: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_conf_enum_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_enum_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_enum_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_conf_enum_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_enum_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_enum_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_enum_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_enum_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_conf_bitmask_t {
    pub name: ngx_str_t,
    pub mask: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_conf_bitmask_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_conf_bitmask_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_conf_bitmask_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_conf_bitmask_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_conf_bitmask_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_conf_bitmask_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_bitmask_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_conf_bitmask_t),
            "::",
            stringify!(mask)
        )
    );
}
extern "C" {
    pub fn ngx_conf_deprecated(
        cf: *mut ngx_conf_t,
        post: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_check_num_bounds(
        cf: *mut ngx_conf_t,
        post: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_param(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_parse(
        cf: *mut ngx_conf_t,
        filename: *mut ngx_str_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_include(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_full_name(
        cycle: *mut ngx_cycle_t,
        name: *mut ngx_str_t,
        conf_prefix: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_conf_open_file(
        cycle: *mut ngx_cycle_t,
        name: *mut ngx_str_t,
    ) -> *mut ngx_open_file_t;
}
extern "C" {
    pub fn ngx_conf_log_error(
        level: ngx_uint_t,
        cf: *mut ngx_conf_t,
        err: ngx_err_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ngx_conf_set_flag_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_str_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_str_array_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_keyval_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_num_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_size_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_off_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_msec_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_sec_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_bufs_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_enum_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_conf_set_bitmask_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_module_s {
    pub ctx_index: ngx_uint_t,
    pub index: ngx_uint_t,
    pub name: *mut ::std::os::raw::c_char,
    pub spare0: ngx_uint_t,
    pub spare1: ngx_uint_t,
    pub version: ngx_uint_t,
    pub signature: *const ::std::os::raw::c_char,
    pub ctx: *mut ::std::os::raw::c_void,
    pub commands: *mut ngx_command_t,
    pub type_: ngx_uint_t,
    pub init_master: ::std::option::Option<unsafe extern "C" fn(log: *mut ngx_log_t) -> ngx_int_t>,
    pub init_module:
        ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t) -> ngx_int_t>,
    pub init_process:
        ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t) -> ngx_int_t>,
    pub init_thread:
        ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t) -> ngx_int_t>,
    pub exit_thread: ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t)>,
    pub exit_process: ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t)>,
    pub exit_master: ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t)>,
    pub spare_hook0: usize,
    pub spare_hook1: usize,
    pub spare_hook2: usize,
    pub spare_hook3: usize,
    pub spare_hook4: usize,
    pub spare_hook5: usize,
    pub spare_hook6: usize,
    pub spare_hook7: usize,
}
#[test]
fn bindgen_test_layout_ngx_module_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_module_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_module_s>(),
        200usize,
        concat!("Size of: ", stringify!(ngx_module_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_module_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_module_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(ctx_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_master) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(init_master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_module) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(init_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_process) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(init_process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_thread) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(init_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_thread) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(exit_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_process) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(exit_process)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_master) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(exit_master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook0) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook1) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook2) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook3) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook4) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook5) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook6) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare_hook7) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_module_s),
            "::",
            stringify!(spare_hook7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_core_module_t {
    pub name: ngx_str_t,
    pub create_conf: ::std::option::Option<
        unsafe extern "C" fn(cycle: *mut ngx_cycle_t) -> *mut ::std::os::raw::c_void,
    >,
    pub init_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cycle: *mut ngx_cycle_t,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_ngx_core_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_core_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_core_module_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_core_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_core_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_core_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_module_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_module_t),
            "::",
            stringify!(create_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_core_module_t),
            "::",
            stringify!(init_conf)
        )
    );
}
extern "C" {
    pub fn ngx_preinit_modules() -> ngx_int_t;
}
extern "C" {
    pub fn ngx_cycle_modules(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_init_modules(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_count_modules(cycle: *mut ngx_cycle_t, type_: ngx_uint_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_add_module(
        cf: *mut ngx_conf_t,
        file: *mut ngx_str_t,
        module: *mut ngx_module_t,
        order: *mut *mut ::std::os::raw::c_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_modules: [*mut ngx_module_t; 0usize];
}
extern "C" {
    pub static mut ngx_max_module: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_module_names: [*mut ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_open_file_info_t {
    pub fd: ngx_fd_t,
    pub uniq: ngx_file_uniq_t,
    pub mtime: time_t,
    pub size: off_t,
    pub fs_size: off_t,
    pub directio: off_t,
    pub read_ahead: usize,
    pub err: ngx_err_t,
    pub failed: *mut ::std::os::raw::c_char,
    pub valid: time_t,
    pub min_uses: ngx_uint_t,
    pub disable_symlinks_from: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_open_file_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_open_file_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_open_file_info_t>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_open_file_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_open_file_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_open_file_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(uniq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(fs_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directio) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(directio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_ahead) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(read_ahead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(failed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_uses) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(min_uses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_symlinks_from) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_info_t),
            "::",
            stringify!(disable_symlinks_from)
        )
    );
}
impl ngx_open_file_info_t {
    #[inline]
    pub fn disable_symlinks(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_disable_symlinks(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn test_dir(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_test_dir(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn test_only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_test_only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_log(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn errors(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_errors(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_dir(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_dir(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_link(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_link(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_exec(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_exec(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_directio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_directio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_symlinks: ::std::os::raw::c_uint,
        test_dir: ::std::os::raw::c_uint,
        test_only: ::std::os::raw::c_uint,
        log: ::std::os::raw::c_uint,
        errors: ::std::os::raw::c_uint,
        events: ::std::os::raw::c_uint,
        is_dir: ::std::os::raw::c_uint,
        is_file: ::std::os::raw::c_uint,
        is_link: ::std::os::raw::c_uint,
        is_exec: ::std::os::raw::c_uint,
        is_directio: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let disable_symlinks: u32 = unsafe { ::std::mem::transmute(disable_symlinks) };
            disable_symlinks as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let test_dir: u32 = unsafe { ::std::mem::transmute(test_dir) };
            test_dir as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let test_only: u32 = unsafe { ::std::mem::transmute(test_only) };
            test_only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let log: u32 = unsafe { ::std::mem::transmute(log) };
            log as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let errors: u32 = unsafe { ::std::mem::transmute(errors) };
            errors as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let events: u32 = unsafe { ::std::mem::transmute(events) };
            events as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let is_dir: u32 = unsafe { ::std::mem::transmute(is_dir) };
            is_dir as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let is_file: u32 = unsafe { ::std::mem::transmute(is_file) };
            is_file as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let is_link: u32 = unsafe { ::std::mem::transmute(is_link) };
            is_link as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let is_exec: u32 = unsafe { ::std::mem::transmute(is_exec) };
            is_exec as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let is_directio: u32 = unsafe { ::std::mem::transmute(is_directio) };
            is_directio as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_cached_open_file_t = ngx_cached_open_file_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_cached_open_file_s {
    pub node: ngx_rbtree_node_t,
    pub queue: ngx_queue_t,
    pub name: *mut u_char,
    pub created: time_t,
    pub accessed: time_t,
    pub fd: ngx_fd_t,
    pub uniq: ngx_file_uniq_t,
    pub mtime: time_t,
    pub size: off_t,
    pub err: ngx_err_t,
    pub uses: u32,
    pub disable_symlinks_from: usize,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 5usize]>,
    pub event: *mut ngx_event_t,
}
#[test]
fn bindgen_test_layout_ngx_cached_open_file_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_cached_open_file_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_cached_open_file_s>(),
        144usize,
        concat!("Size of: ", stringify!(ngx_cached_open_file_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_cached_open_file_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_cached_open_file_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).created) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(created)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessed) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(accessed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniq) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(uniq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uses) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(uses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_symlinks_from) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(disable_symlinks_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_cached_open_file_s),
            "::",
            stringify!(event)
        )
    );
}
impl ngx_cached_open_file_s {
    #[inline]
    pub fn disable_symlinks(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_disable_symlinks(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn close(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_close(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_event(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_event(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_dir(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_dir(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_link(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_link(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_exec(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_exec(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_directio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_directio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_symlinks: ::std::os::raw::c_uint,
        count: ::std::os::raw::c_uint,
        close: ::std::os::raw::c_uint,
        use_event: ::std::os::raw::c_uint,
        is_dir: ::std::os::raw::c_uint,
        is_file: ::std::os::raw::c_uint,
        is_link: ::std::os::raw::c_uint,
        is_exec: ::std::os::raw::c_uint,
        is_directio: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 5usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 5usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let disable_symlinks: u32 = unsafe { ::std::mem::transmute(disable_symlinks) };
            disable_symlinks as u64
        });
        __bindgen_bitfield_unit.set(2usize, 24u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let close: u32 = unsafe { ::std::mem::transmute(close) };
            close as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let use_event: u32 = unsafe { ::std::mem::transmute(use_event) };
            use_event as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let is_dir: u32 = unsafe { ::std::mem::transmute(is_dir) };
            is_dir as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let is_file: u32 = unsafe { ::std::mem::transmute(is_file) };
            is_file as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let is_link: u32 = unsafe { ::std::mem::transmute(is_link) };
            is_link as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let is_exec: u32 = unsafe { ::std::mem::transmute(is_exec) };
            is_exec as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let is_directio: u32 = unsafe { ::std::mem::transmute(is_directio) };
            is_directio as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_open_file_cache_t {
    pub rbtree: ngx_rbtree_t,
    pub sentinel: ngx_rbtree_node_t,
    pub expire_queue: ngx_queue_t,
    pub current: ngx_uint_t,
    pub max: ngx_uint_t,
    pub inactive: time_t,
}
#[test]
fn bindgen_test_layout_ngx_open_file_cache_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_open_file_cache_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_open_file_cache_t>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_open_file_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_open_file_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_open_file_cache_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbtree) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_t),
            "::",
            stringify!(rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sentinel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_t),
            "::",
            stringify!(sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire_queue) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_t),
            "::",
            stringify!(expire_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_t),
            "::",
            stringify!(inactive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_open_file_cache_cleanup_t {
    pub cache: *mut ngx_open_file_cache_t,
    pub file: *mut ngx_cached_open_file_t,
    pub min_uses: ngx_uint_t,
    pub log: *mut ngx_log_t,
}
#[test]
fn bindgen_test_layout_ngx_open_file_cache_cleanup_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_open_file_cache_cleanup_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_open_file_cache_cleanup_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_open_file_cache_cleanup_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_open_file_cache_cleanup_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_open_file_cache_cleanup_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_cleanup_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_cleanup_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_uses) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_cleanup_t),
            "::",
            stringify!(min_uses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_cleanup_t),
            "::",
            stringify!(log)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_open_file_cache_event_t {
    pub data: *mut ::std::os::raw::c_void,
    pub read: *mut ngx_event_t,
    pub write: *mut ngx_event_t,
    pub fd: ngx_fd_t,
    pub file: *mut ngx_cached_open_file_t,
    pub cache: *mut ngx_open_file_cache_t,
}
#[test]
fn bindgen_test_layout_ngx_open_file_cache_event_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_open_file_cache_event_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_open_file_cache_event_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_open_file_cache_event_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_open_file_cache_event_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_open_file_cache_event_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_event_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_event_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_event_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_event_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_event_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_open_file_cache_event_t),
            "::",
            stringify!(cache)
        )
    );
}
extern "C" {
    pub fn ngx_open_file_cache_init(
        pool: *mut ngx_pool_t,
        max: ngx_uint_t,
        inactive: time_t,
    ) -> *mut ngx_open_file_cache_t;
}
extern "C" {
    pub fn ngx_open_cached_file(
        cache: *mut ngx_open_file_cache_t,
        name: *mut ngx_str_t,
        of: *mut ngx_open_file_info_t,
        pool: *mut ngx_pool_t,
    ) -> ngx_int_t;
}
pub type ngx_recv_pt = ::std::option::Option<
    unsafe extern "C" fn(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize,
>;
pub type ngx_recv_chain_pt = ::std::option::Option<
    unsafe extern "C" fn(c: *mut ngx_connection_t, in_: *mut ngx_chain_t, limit: off_t) -> isize,
>;
pub type ngx_send_pt = ::std::option::Option<
    unsafe extern "C" fn(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize,
>;
pub type ngx_send_chain_pt = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut ngx_connection_t,
        in_: *mut ngx_chain_t,
        limit: off_t,
    ) -> *mut ngx_chain_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_os_io_t {
    pub recv: ngx_recv_pt,
    pub recv_chain: ngx_recv_chain_pt,
    pub udp_recv: ngx_recv_pt,
    pub send: ngx_send_pt,
    pub udp_send: ngx_send_pt,
    pub udp_send_chain: ngx_send_chain_pt,
    pub send_chain: ngx_send_chain_pt,
    pub flags: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_os_io_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_os_io_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_os_io_t>(),
        64usize,
        concat!("Size of: ", stringify!(ngx_os_io_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_os_io_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_os_io_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_chain) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(recv_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udp_recv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(udp_recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udp_send) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(udp_send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udp_send_chain) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(udp_send_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_chain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(send_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_os_io_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn ngx_os_init(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_os_status(log: *mut ngx_log_t);
}
extern "C" {
    pub fn ngx_os_specific_init(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_os_specific_status(log: *mut ngx_log_t);
}
extern "C" {
    pub fn ngx_daemon(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_os_signal_process(
        cycle: *mut ngx_cycle_t,
        sig: *mut ::std::os::raw::c_char,
        pid: ngx_pid_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_unix_recv(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize;
}
extern "C" {
    pub fn ngx_readv_chain(
        c: *mut ngx_connection_t,
        entry: *mut ngx_chain_t,
        limit: off_t,
    ) -> isize;
}
extern "C" {
    pub fn ngx_udp_unix_recv(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize;
}
extern "C" {
    pub fn ngx_unix_send(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize;
}
extern "C" {
    pub fn ngx_writev_chain(
        c: *mut ngx_connection_t,
        in_: *mut ngx_chain_t,
        limit: off_t,
    ) -> *mut ngx_chain_t;
}
extern "C" {
    pub fn ngx_udp_unix_send(c: *mut ngx_connection_t, buf: *mut u_char, size: usize) -> isize;
}
extern "C" {
    pub fn ngx_udp_unix_sendmsg_chain(
        c: *mut ngx_connection_t,
        in_: *mut ngx_chain_t,
        limit: off_t,
    ) -> *mut ngx_chain_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_iovec_t {
    pub iovs: *mut iovec,
    pub count: ngx_uint_t,
    pub size: usize,
    pub nalloc: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_iovec_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_iovec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_iovec_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_iovec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_iovec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_iovec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iovs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_iovec_t),
            "::",
            stringify!(iovs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_iovec_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_iovec_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nalloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_iovec_t),
            "::",
            stringify!(nalloc)
        )
    );
}
extern "C" {
    pub fn ngx_output_chain_to_iovec(
        vec: *mut ngx_iovec_t,
        in_: *mut ngx_chain_t,
        limit: usize,
        log: *mut ngx_log_t,
    ) -> *mut ngx_chain_t;
}
extern "C" {
    pub fn ngx_writev(c: *mut ngx_connection_t, vec: *mut ngx_iovec_t) -> isize;
}
extern "C" {
    pub static mut ngx_os_io: ngx_os_io_t;
}
extern "C" {
    pub static mut ngx_ncpu: ngx_int_t;
}
extern "C" {
    pub static mut ngx_max_sockets: ngx_int_t;
}
extern "C" {
    pub static mut ngx_inherited_nonblocking: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_tcp_nodelay_and_tcp_nopush: ngx_uint_t;
}
extern "C" {
    pub fn ngx_linux_sendfile_chain(
        c: *mut ngx_connection_t,
        in_: *mut ngx_chain_t,
        limit: off_t,
    ) -> *mut ngx_chain_t;
}
pub type ngx_listening_t = ngx_listening_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_listening_s {
    pub fd: ngx_socket_t,
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub addr_text_max_len: usize,
    pub addr_text: ngx_str_t,
    pub type_: ::std::os::raw::c_int,
    pub backlog: ::std::os::raw::c_int,
    pub rcvbuf: ::std::os::raw::c_int,
    pub sndbuf: ::std::os::raw::c_int,
    pub keepidle: ::std::os::raw::c_int,
    pub keepintvl: ::std::os::raw::c_int,
    pub keepcnt: ::std::os::raw::c_int,
    pub handler: ngx_connection_handler_pt,
    pub servers: *mut ::std::os::raw::c_void,
    pub log: ngx_log_t,
    pub logp: *mut ngx_log_t,
    pub pool_size: usize,
    pub post_accept_buffer_size: usize,
    pub previous: *mut ngx_listening_t,
    pub connection: *mut ngx_connection_t,
    pub rbtree: ngx_rbtree_t,
    pub sentinel: ngx_rbtree_node_t,
    pub worker: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub fastopen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ngx_listening_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_listening_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_listening_s>(),
        296usize,
        concat!("Size of: ", stringify!(ngx_listening_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_listening_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_listening_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text_max_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(addr_text_max_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(addr_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(backlog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcvbuf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(rcvbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sndbuf) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(sndbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepidle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(keepidle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepintvl) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(keepintvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepcnt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(keepcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(servers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logp) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(logp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_size) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_accept_buffer_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(post_accept_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(previous)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbtree) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sentinel) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).worker) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(worker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastopen) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_listening_s),
            "::",
            stringify!(fastopen)
        )
    );
}
impl ngx_listening_s {
    #[inline]
    pub fn open(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_open(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn remain(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_remain(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ignore(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bound(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bound(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inherited(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inherited(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nonblocking_accept(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nonblocking_accept(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn listen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_listen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nonblocking(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nonblocking(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shared(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shared(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn addr_ntop(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_addr_ntop(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wildcard(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wildcard(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipv6only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv6only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reuseport(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reuseport(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn add_reuseport(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_add_reuseport(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn deferred_accept(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deferred_accept(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delete_deferred(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delete_deferred(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn add_deferred(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_add_deferred(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        open: ::std::os::raw::c_uint,
        remain: ::std::os::raw::c_uint,
        ignore: ::std::os::raw::c_uint,
        bound: ::std::os::raw::c_uint,
        inherited: ::std::os::raw::c_uint,
        nonblocking_accept: ::std::os::raw::c_uint,
        listen: ::std::os::raw::c_uint,
        nonblocking: ::std::os::raw::c_uint,
        shared: ::std::os::raw::c_uint,
        addr_ntop: ::std::os::raw::c_uint,
        wildcard: ::std::os::raw::c_uint,
        ipv6only: ::std::os::raw::c_uint,
        reuseport: ::std::os::raw::c_uint,
        add_reuseport: ::std::os::raw::c_uint,
        keepalive: ::std::os::raw::c_uint,
        deferred_accept: ::std::os::raw::c_uint,
        delete_deferred: ::std::os::raw::c_uint,
        add_deferred: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let open: u32 = unsafe { ::std::mem::transmute(open) };
            open as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let remain: u32 = unsafe { ::std::mem::transmute(remain) };
            remain as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ignore: u32 = unsafe { ::std::mem::transmute(ignore) };
            ignore as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bound: u32 = unsafe { ::std::mem::transmute(bound) };
            bound as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let inherited: u32 = unsafe { ::std::mem::transmute(inherited) };
            inherited as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let nonblocking_accept: u32 = unsafe { ::std::mem::transmute(nonblocking_accept) };
            nonblocking_accept as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let listen: u32 = unsafe { ::std::mem::transmute(listen) };
            listen as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let nonblocking: u32 = unsafe { ::std::mem::transmute(nonblocking) };
            nonblocking as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let shared: u32 = unsafe { ::std::mem::transmute(shared) };
            shared as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let addr_ntop: u32 = unsafe { ::std::mem::transmute(addr_ntop) };
            addr_ntop as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let wildcard: u32 = unsafe { ::std::mem::transmute(wildcard) };
            wildcard as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ipv6only: u32 = unsafe { ::std::mem::transmute(ipv6only) };
            ipv6only as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let reuseport: u32 = unsafe { ::std::mem::transmute(reuseport) };
            reuseport as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let add_reuseport: u32 = unsafe { ::std::mem::transmute(add_reuseport) };
            add_reuseport as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let keepalive: u32 = unsafe { ::std::mem::transmute(keepalive) };
            keepalive as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let deferred_accept: u32 = unsafe { ::std::mem::transmute(deferred_accept) };
            deferred_accept as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let delete_deferred: u32 = unsafe { ::std::mem::transmute(delete_deferred) };
            delete_deferred as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let add_deferred: u32 = unsafe { ::std::mem::transmute(add_deferred) };
            add_deferred as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ngx_connection_log_error_e_NGX_ERROR_ALERT: ngx_connection_log_error_e = 0;
pub const ngx_connection_log_error_e_NGX_ERROR_ERR: ngx_connection_log_error_e = 1;
pub const ngx_connection_log_error_e_NGX_ERROR_INFO: ngx_connection_log_error_e = 2;
pub const ngx_connection_log_error_e_NGX_ERROR_IGNORE_ECONNRESET: ngx_connection_log_error_e = 3;
pub const ngx_connection_log_error_e_NGX_ERROR_IGNORE_EINVAL: ngx_connection_log_error_e = 4;
pub type ngx_connection_log_error_e = ::std::os::raw::c_uint;
pub const ngx_connection_tcp_nodelay_e_NGX_TCP_NODELAY_UNSET: ngx_connection_tcp_nodelay_e = 0;
pub const ngx_connection_tcp_nodelay_e_NGX_TCP_NODELAY_SET: ngx_connection_tcp_nodelay_e = 1;
pub const ngx_connection_tcp_nodelay_e_NGX_TCP_NODELAY_DISABLED: ngx_connection_tcp_nodelay_e = 2;
pub type ngx_connection_tcp_nodelay_e = ::std::os::raw::c_uint;
pub const ngx_connection_tcp_nopush_e_NGX_TCP_NOPUSH_UNSET: ngx_connection_tcp_nopush_e = 0;
pub const ngx_connection_tcp_nopush_e_NGX_TCP_NOPUSH_SET: ngx_connection_tcp_nopush_e = 1;
pub const ngx_connection_tcp_nopush_e_NGX_TCP_NOPUSH_DISABLED: ngx_connection_tcp_nopush_e = 2;
pub type ngx_connection_tcp_nopush_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_connection_s {
    pub data: *mut ::std::os::raw::c_void,
    pub read: *mut ngx_event_t,
    pub write: *mut ngx_event_t,
    pub fd: ngx_socket_t,
    pub recv: ngx_recv_pt,
    pub send: ngx_send_pt,
    pub recv_chain: ngx_recv_chain_pt,
    pub send_chain: ngx_send_chain_pt,
    pub listening: *mut ngx_listening_t,
    pub sent: off_t,
    pub log: *mut ngx_log_t,
    pub pool: *mut ngx_pool_t,
    pub type_: ::std::os::raw::c_int,
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub addr_text: ngx_str_t,
    pub proxy_protocol: *mut ngx_proxy_protocol_t,
    pub ssl: *mut ngx_ssl_connection_t,
    pub udp: *mut ngx_udp_connection_t,
    pub local_sockaddr: *mut sockaddr,
    pub local_socklen: socklen_t,
    pub buffer: *mut ngx_buf_t,
    pub queue: ngx_queue_t,
    pub number: ngx_atomic_uint_t,
    pub start_time: ngx_msec_t,
    pub requests: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub sendfile_task: *mut ngx_thread_task_t,
}
#[test]
fn bindgen_test_layout_ngx_connection_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_connection_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_connection_s>(),
        240usize,
        concat!("Size of: ", stringify!(ngx_connection_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_connection_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_connection_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_chain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(recv_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_chain) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(send_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listening) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(listening)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sent) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(addr_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy_protocol) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(proxy_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(ssl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).udp) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(udp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).local_sockaddr) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(local_sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).local_socklen) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(local_socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requests) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendfile_task) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_connection_s),
            "::",
            stringify!(sendfile_task)
        )
    );
}
impl ngx_connection_s {
    #[inline]
    pub fn buffered(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_buffered(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn log_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_log_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn timedout(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timedout(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn destroyed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_destroyed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pipeline(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pipeline(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn idle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_idle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reusable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reusable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn close(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_close(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shared(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shared(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sendfile(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sendfile(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sndlowat(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sndlowat(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcp_nodelay(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tcp_nodelay(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tcp_nopush(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tcp_nopush(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn need_last_buf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_need_last_buf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn need_flush_buf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_need_flush_buf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn busy_count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_busy_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        buffered: ::std::os::raw::c_uint,
        log_error: ::std::os::raw::c_uint,
        timedout: ::std::os::raw::c_uint,
        error: ::std::os::raw::c_uint,
        destroyed: ::std::os::raw::c_uint,
        pipeline: ::std::os::raw::c_uint,
        idle: ::std::os::raw::c_uint,
        reusable: ::std::os::raw::c_uint,
        close: ::std::os::raw::c_uint,
        shared: ::std::os::raw::c_uint,
        sendfile: ::std::os::raw::c_uint,
        sndlowat: ::std::os::raw::c_uint,
        tcp_nodelay: ::std::os::raw::c_uint,
        tcp_nopush: ::std::os::raw::c_uint,
        need_last_buf: ::std::os::raw::c_uint,
        need_flush_buf: ::std::os::raw::c_uint,
        busy_count: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let buffered: u32 = unsafe { ::std::mem::transmute(buffered) };
            buffered as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let log_error: u32 = unsafe { ::std::mem::transmute(log_error) };
            log_error as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let timedout: u32 = unsafe { ::std::mem::transmute(timedout) };
            timedout as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let error: u32 = unsafe { ::std::mem::transmute(error) };
            error as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let destroyed: u32 = unsafe { ::std::mem::transmute(destroyed) };
            destroyed as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let pipeline: u32 = unsafe { ::std::mem::transmute(pipeline) };
            pipeline as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let idle: u32 = unsafe { ::std::mem::transmute(idle) };
            idle as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reusable: u32 = unsafe { ::std::mem::transmute(reusable) };
            reusable as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let close: u32 = unsafe { ::std::mem::transmute(close) };
            close as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let shared: u32 = unsafe { ::std::mem::transmute(shared) };
            shared as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let sendfile: u32 = unsafe { ::std::mem::transmute(sendfile) };
            sendfile as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let sndlowat: u32 = unsafe { ::std::mem::transmute(sndlowat) };
            sndlowat as u64
        });
        __bindgen_bitfield_unit.set(21usize, 2u8, {
            let tcp_nodelay: u32 = unsafe { ::std::mem::transmute(tcp_nodelay) };
            tcp_nodelay as u64
        });
        __bindgen_bitfield_unit.set(23usize, 2u8, {
            let tcp_nopush: u32 = unsafe { ::std::mem::transmute(tcp_nopush) };
            tcp_nopush as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let need_last_buf: u32 = unsafe { ::std::mem::transmute(need_last_buf) };
            need_last_buf as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let need_flush_buf: u32 = unsafe { ::std::mem::transmute(need_flush_buf) };
            need_flush_buf as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let busy_count: u32 = unsafe { ::std::mem::transmute(busy_count) };
            busy_count as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_create_listening(
        cf: *mut ngx_conf_t,
        sockaddr: *mut sockaddr,
        socklen: socklen_t,
    ) -> *mut ngx_listening_t;
}
extern "C" {
    pub fn ngx_clone_listening(cycle: *mut ngx_cycle_t, ls: *mut ngx_listening_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_set_inherited_sockets(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_open_listening_sockets(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_configure_listening_sockets(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub fn ngx_close_listening_sockets(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub fn ngx_close_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_close_idle_connections(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub fn ngx_connection_local_sockaddr(
        c: *mut ngx_connection_t,
        s: *mut ngx_str_t,
        port: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_tcp_nodelay(c: *mut ngx_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_connection_error(
        c: *mut ngx_connection_t,
        err: ngx_err_t,
        text: *mut ::std::os::raw::c_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_get_connection(s: ngx_socket_t, log: *mut ngx_log_t) -> *mut ngx_connection_t;
}
extern "C" {
    pub fn ngx_free_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_reusable_connection(c: *mut ngx_connection_t, reusable: ngx_uint_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_syslog_peer_t {
    pub facility: ngx_uint_t,
    pub severity: ngx_uint_t,
    pub tag: ngx_str_t,
    pub hostname: *mut ngx_str_t,
    pub server: ngx_addr_t,
    pub conn: ngx_connection_t,
    pub log: ngx_log_t,
    pub logp: *mut ngx_log_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_syslog_peer_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_syslog_peer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_syslog_peer_t>(),
        408usize,
        concat!("Size of: ", stringify!(ngx_syslog_peer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_syslog_peer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_syslog_peer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).facility) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(facility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).severity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(severity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostname) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(conn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logp) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_syslog_peer_t),
            "::",
            stringify!(logp)
        )
    );
}
impl ngx_syslog_peer_t {
    #[inline]
    pub fn busy(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_busy(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nohostname(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nohostname(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        busy: ::std::os::raw::c_uint,
        nohostname: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let busy: u32 = unsafe { ::std::mem::transmute(busy) };
            busy as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let nohostname: u32 = unsafe { ::std::mem::transmute(nohostname) };
            nohostname as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_syslog_process_conf(
        cf: *mut ngx_conf_t,
        peer: *mut ngx_syslog_peer_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_syslog_add_header(peer: *mut ngx_syslog_peer_t, buf: *mut u_char) -> *mut u_char;
}
extern "C" {
    pub fn ngx_syslog_writer(log: *mut ngx_log_t, level: ngx_uint_t, buf: *mut u_char, len: usize);
}
extern "C" {
    pub fn ngx_syslog_send(peer: *mut ngx_syslog_peer_t, buf: *mut u_char, len: usize) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_proxy_protocol_s {
    pub src_addr: ngx_str_t,
    pub dst_addr: ngx_str_t,
    pub src_port: in_port_t,
    pub dst_port: in_port_t,
    pub tlvs: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_proxy_protocol_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_proxy_protocol_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_proxy_protocol_s>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_proxy_protocol_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_proxy_protocol_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_proxy_protocol_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_proxy_protocol_s),
            "::",
            stringify!(src_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_proxy_protocol_s),
            "::",
            stringify!(dst_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_proxy_protocol_s),
            "::",
            stringify!(src_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_port) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_proxy_protocol_s),
            "::",
            stringify!(dst_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlvs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_proxy_protocol_s),
            "::",
            stringify!(tlvs)
        )
    );
}
extern "C" {
    pub fn ngx_proxy_protocol_read(
        c: *mut ngx_connection_t,
        buf: *mut u_char,
        last: *mut u_char,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_proxy_protocol_write(
        c: *mut ngx_connection_t,
        buf: *mut u_char,
        last: *mut u_char,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_proxy_protocol_get_tlv(
        c: *mut ngx_connection_t,
        name: *mut ngx_str_t,
        value: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_cpuinfo();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_event_s {
    pub data: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub available: ::std::os::raw::c_int,
    pub handler: ngx_event_handler_pt,
    pub index: ngx_uint_t,
    pub log: *mut ngx_log_t,
    pub timer: ngx_rbtree_node_t,
    pub queue: ngx_queue_t,
}
#[test]
fn bindgen_test_layout_ngx_event_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_event_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_event_s>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_event_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_event_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_event_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).available) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(available)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_s),
            "::",
            stringify!(queue)
        )
    );
}
impl ngx_event_s {
    #[inline]
    pub fn write(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_write(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn accept(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_accept(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn instance(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_instance(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn active(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_active(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disabled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disabled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ready(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ready(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oneshot(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oneshot(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn complete(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complete(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn eof(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_eof(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timedout(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timedout(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timer_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delayed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delayed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deferred_accept(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deferred_accept(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_eof(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pending_eof(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn posted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_posted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn closed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_closed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn channel(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_channel(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn resolver(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_resolver(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cancelable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cancelable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        write: ::std::os::raw::c_uint,
        accept: ::std::os::raw::c_uint,
        instance: ::std::os::raw::c_uint,
        active: ::std::os::raw::c_uint,
        disabled: ::std::os::raw::c_uint,
        ready: ::std::os::raw::c_uint,
        oneshot: ::std::os::raw::c_uint,
        complete: ::std::os::raw::c_uint,
        eof: ::std::os::raw::c_uint,
        error: ::std::os::raw::c_uint,
        timedout: ::std::os::raw::c_uint,
        timer_set: ::std::os::raw::c_uint,
        delayed: ::std::os::raw::c_uint,
        deferred_accept: ::std::os::raw::c_uint,
        pending_eof: ::std::os::raw::c_uint,
        posted: ::std::os::raw::c_uint,
        closed: ::std::os::raw::c_uint,
        channel: ::std::os::raw::c_uint,
        resolver: ::std::os::raw::c_uint,
        cancelable: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let write: u32 = unsafe { ::std::mem::transmute(write) };
            write as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let accept: u32 = unsafe { ::std::mem::transmute(accept) };
            accept as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let instance: u32 = unsafe { ::std::mem::transmute(instance) };
            instance as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let active: u32 = unsafe { ::std::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let disabled: u32 = unsafe { ::std::mem::transmute(disabled) };
            disabled as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ready: u32 = unsafe { ::std::mem::transmute(ready) };
            ready as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let oneshot: u32 = unsafe { ::std::mem::transmute(oneshot) };
            oneshot as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let complete: u32 = unsafe { ::std::mem::transmute(complete) };
            complete as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let eof: u32 = unsafe { ::std::mem::transmute(eof) };
            eof as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let error: u32 = unsafe { ::std::mem::transmute(error) };
            error as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let timedout: u32 = unsafe { ::std::mem::transmute(timedout) };
            timedout as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let timer_set: u32 = unsafe { ::std::mem::transmute(timer_set) };
            timer_set as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let delayed: u32 = unsafe { ::std::mem::transmute(delayed) };
            delayed as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let deferred_accept: u32 = unsafe { ::std::mem::transmute(deferred_accept) };
            deferred_accept as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let pending_eof: u32 = unsafe { ::std::mem::transmute(pending_eof) };
            pending_eof as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let posted: u32 = unsafe { ::std::mem::transmute(posted) };
            posted as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let closed: u32 = unsafe { ::std::mem::transmute(closed) };
            closed as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let channel: u32 = unsafe { ::std::mem::transmute(channel) };
            channel as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let resolver: u32 = unsafe { ::std::mem::transmute(resolver) };
            resolver as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let cancelable: u32 = unsafe { ::std::mem::transmute(cancelable) };
            cancelable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_event_actions_t {
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            ev: *mut ngx_event_t,
            event: ngx_int_t,
            flags: ngx_uint_t,
        ) -> ngx_int_t,
    >,
    pub del: ::std::option::Option<
        unsafe extern "C" fn(
            ev: *mut ngx_event_t,
            event: ngx_int_t,
            flags: ngx_uint_t,
        ) -> ngx_int_t,
    >,
    pub enable: ::std::option::Option<
        unsafe extern "C" fn(
            ev: *mut ngx_event_t,
            event: ngx_int_t,
            flags: ngx_uint_t,
        ) -> ngx_int_t,
    >,
    pub disable: ::std::option::Option<
        unsafe extern "C" fn(
            ev: *mut ngx_event_t,
            event: ngx_int_t,
            flags: ngx_uint_t,
        ) -> ngx_int_t,
    >,
    pub add_conn:
        ::std::option::Option<unsafe extern "C" fn(c: *mut ngx_connection_t) -> ngx_int_t>,
    pub del_conn: ::std::option::Option<
        unsafe extern "C" fn(c: *mut ngx_connection_t, flags: ngx_uint_t) -> ngx_int_t,
    >,
    pub notify:
        ::std::option::Option<unsafe extern "C" fn(handler: ngx_event_handler_pt) -> ngx_int_t>,
    pub process_events: ::std::option::Option<
        unsafe extern "C" fn(
            cycle: *mut ngx_cycle_t,
            timer: ngx_msec_t,
            flags: ngx_uint_t,
        ) -> ngx_int_t,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(cycle: *mut ngx_cycle_t, timer: ngx_msec_t) -> ngx_int_t,
    >,
    pub done: ::std::option::Option<unsafe extern "C" fn(cycle: *mut ngx_cycle_t)>,
}
#[test]
fn bindgen_test_layout_ngx_event_actions_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_event_actions_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_event_actions_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_event_actions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_event_actions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_event_actions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(del)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(disable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_conn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(add_conn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).del_conn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(del_conn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_events) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(process_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_actions_t),
            "::",
            stringify!(done)
        )
    );
}
extern "C" {
    pub static mut ngx_event_actions: ngx_event_actions_t;
}
extern "C" {
    pub static mut ngx_use_epoll_rdhup: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_io: ngx_os_io_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_event_conf_t {
    pub connections: ngx_uint_t,
    pub use_: ngx_uint_t,
    pub multi_accept: ngx_flag_t,
    pub accept_mutex: ngx_flag_t,
    pub accept_mutex_delay: ngx_msec_t,
    pub name: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_event_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_event_conf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_event_conf_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_event_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_event_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_event_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connections) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_conf_t),
            "::",
            stringify!(connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_conf_t),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multi_accept) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_conf_t),
            "::",
            stringify!(multi_accept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_mutex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_conf_t),
            "::",
            stringify!(accept_mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_mutex_delay) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_conf_t),
            "::",
            stringify!(accept_mutex_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_conf_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_event_module_t {
    pub name: *mut ngx_str_t,
    pub create_conf: ::std::option::Option<
        unsafe extern "C" fn(cycle: *mut ngx_cycle_t) -> *mut ::std::os::raw::c_void,
    >,
    pub init_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cycle: *mut ngx_cycle_t,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub actions: ngx_event_actions_t,
}
#[test]
fn bindgen_test_layout_ngx_event_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_event_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_event_module_t>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_event_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_event_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_event_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_module_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_module_t),
            "::",
            stringify!(create_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_module_t),
            "::",
            stringify!(init_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_module_t),
            "::",
            stringify!(actions)
        )
    );
}
extern "C" {
    pub static mut ngx_connection_counter: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_accept_mutex_ptr: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_accept_mutex: ngx_shmtx_t;
}
extern "C" {
    pub static mut ngx_use_accept_mutex: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_accept_events: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_accept_mutex_held: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_accept_mutex_delay: ngx_msec_t;
}
extern "C" {
    pub static mut ngx_accept_disabled: ngx_int_t;
}
extern "C" {
    pub static mut ngx_use_exclusive_accept: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_stat_accepted: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_stat_handled: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_stat_requests: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_stat_active: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_stat_reading: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_stat_writing: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_stat_waiting: *mut ngx_atomic_t;
}
extern "C" {
    pub static mut ngx_event_timer_alarm: sig_atomic_t;
}
extern "C" {
    pub static mut ngx_event_flags: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_events_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_event_core_module: ngx_module_t;
}
extern "C" {
    pub fn ngx_event_accept(ev: *mut ngx_event_t);
}
extern "C" {
    pub fn ngx_trylock_accept_mutex(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_enable_accept_events(cycle: *mut ngx_cycle_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_accept_log_error(log: *mut ngx_log_t, buf: *mut u_char, len: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_process_events_and_timers(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub fn ngx_handle_read_event(rev: *mut ngx_event_t, flags: ngx_uint_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_handle_write_event(wev: *mut ngx_event_t, lowat: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_send_lowat(c: *mut ngx_connection_t, lowat: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_event_timer_init(log: *mut ngx_log_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_event_find_timer() -> ngx_msec_t;
}
extern "C" {
    pub fn ngx_event_expire_timers();
}
extern "C" {
    pub fn ngx_event_no_timers_left() -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_event_timer_rbtree: ngx_rbtree_t;
}
extern "C" {
    pub fn ngx_event_process_posted(cycle: *mut ngx_cycle_t, posted: *mut ngx_queue_t);
}
extern "C" {
    pub fn ngx_event_move_posted_next(cycle: *mut ngx_cycle_t);
}
extern "C" {
    pub static mut ngx_posted_accept_events: ngx_queue_t;
}
extern "C" {
    pub static mut ngx_posted_next_events: ngx_queue_t;
}
extern "C" {
    pub static mut ngx_posted_events: ngx_queue_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_addrinfo_t {
    pub pkt: in_pktinfo,
    pub pkt6: in6_pktinfo,
}
#[test]
fn bindgen_test_layout_ngx_addrinfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_addrinfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_addrinfo_t>(),
        20usize,
        concat!("Size of: ", stringify!(ngx_addrinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_addrinfo_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ngx_addrinfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_addrinfo_t),
            "::",
            stringify!(pkt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkt6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_addrinfo_t),
            "::",
            stringify!(pkt6)
        )
    );
}
extern "C" {
    pub fn ngx_set_srcaddr_cmsg(cmsg: *mut cmsghdr, local_sockaddr: *mut sockaddr) -> usize;
}
extern "C" {
    pub fn ngx_get_srcaddr_cmsg(cmsg: *mut cmsghdr, local_sockaddr: *mut sockaddr) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_event_recvmsg(ev: *mut ngx_event_t);
}
extern "C" {
    pub fn ngx_sendmsg(
        c: *mut ngx_connection_t,
        msg: *mut msghdr,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn ngx_udp_rbtree_insert_value(
        temp: *mut ngx_rbtree_node_t,
        node: *mut ngx_rbtree_node_t,
        sentinel: *mut ngx_rbtree_node_t,
    );
}
extern "C" {
    pub fn ngx_delete_udp_connection(data: *mut ::std::os::raw::c_void);
}
pub type ngx_http_request_t = ngx_http_request_s;
pub type ngx_http_upstream_t = ngx_http_upstream_s;
pub type ngx_http_cache_t = ngx_http_cache_s;
pub type ngx_http_file_cache_t = ngx_http_file_cache_s;
pub type ngx_http_log_ctx_t = ngx_http_log_ctx_s;
pub type ngx_http_chunked_t = ngx_http_chunked_s;
pub type ngx_http_v2_stream_t = ngx_http_v2_stream_s;
pub type ngx_http_header_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        h: *mut ngx_table_elt_t,
        offset: ngx_uint_t,
    ) -> ngx_int_t,
>;
pub type ngx_http_log_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        sr: *mut ngx_http_request_t,
        buf: *mut u_char,
        len: usize,
    ) -> *mut u_char,
>;
pub type ngx_http_variable_value_t = ngx_variable_value_t;
pub type ngx_http_variable_t = ngx_http_variable_s;
pub type ngx_http_set_variable_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        v: *mut ngx_http_variable_value_t,
        data: usize,
    ),
>;
pub type ngx_http_get_variable_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        v: *mut ngx_http_variable_value_t,
        data: usize,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_variable_s {
    pub name: ngx_str_t,
    pub set_handler: ngx_http_set_variable_pt,
    pub get_handler: ngx_http_get_variable_pt,
    pub data: usize,
    pub flags: ngx_uint_t,
    pub index: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_variable_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_variable_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_variable_s>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_http_variable_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_variable_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_variable_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_variable_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_variable_s),
            "::",
            stringify!(set_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_variable_s),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_variable_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_variable_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_variable_s),
            "::",
            stringify!(index)
        )
    );
}
extern "C" {
    pub fn ngx_http_add_variable(
        cf: *mut ngx_conf_t,
        name: *mut ngx_str_t,
        flags: ngx_uint_t,
    ) -> *mut ngx_http_variable_t;
}
extern "C" {
    pub fn ngx_http_get_variable_index(cf: *mut ngx_conf_t, name: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_get_indexed_variable(
        r: *mut ngx_http_request_t,
        index: ngx_uint_t,
    ) -> *mut ngx_http_variable_value_t;
}
extern "C" {
    pub fn ngx_http_get_flushed_variable(
        r: *mut ngx_http_request_t,
        index: ngx_uint_t,
    ) -> *mut ngx_http_variable_value_t;
}
extern "C" {
    pub fn ngx_http_get_variable(
        r: *mut ngx_http_request_t,
        name: *mut ngx_str_t,
        key: ngx_uint_t,
    ) -> *mut ngx_http_variable_value_t;
}
extern "C" {
    pub fn ngx_http_variable_unknown_header(
        r: *mut ngx_http_request_t,
        v: *mut ngx_http_variable_value_t,
        var: *mut ngx_str_t,
        part: *mut ngx_list_part_t,
        prefix: usize,
    ) -> ngx_int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_regex_variable_t {
    pub capture: ngx_uint_t,
    pub index: ngx_int_t,
}
#[test]
fn bindgen_test_layout_ngx_http_regex_variable_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_regex_variable_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_regex_variable_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_regex_variable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_regex_variable_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_regex_variable_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_variable_t),
            "::",
            stringify!(capture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_variable_t),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_regex_t {
    pub regex: *mut ngx_regex_t,
    pub ncaptures: ngx_uint_t,
    pub variables: *mut ngx_http_regex_variable_t,
    pub nvariables: ngx_uint_t,
    pub name: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_regex_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_regex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_regex_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_http_regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_regex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvariables) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_t),
            "::",
            stringify!(nvariables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_regex_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_map_regex_t {
    pub regex: *mut ngx_http_regex_t,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_http_map_regex_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_map_regex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_map_regex_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_map_regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_map_regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_map_regex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_map_regex_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_map_regex_t),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn ngx_http_regex_compile(
        cf: *mut ngx_conf_t,
        rc: *mut ngx_regex_compile_t,
    ) -> *mut ngx_http_regex_t;
}
extern "C" {
    pub fn ngx_http_regex_exec(
        r: *mut ngx_http_request_t,
        re: *mut ngx_http_regex_t,
        s: *mut ngx_str_t,
    ) -> ngx_int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_map_t {
    pub hash: ngx_hash_combined_t,
    pub regex: *mut ngx_http_map_regex_t,
    pub nregex: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_map_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_map_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_map_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_http_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_map_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_map_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_map_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nregex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_map_t),
            "::",
            stringify!(nregex)
        )
    );
}
extern "C" {
    pub fn ngx_http_map_find(
        r: *mut ngx_http_request_t,
        map: *mut ngx_http_map_t,
        match_: *mut ngx_str_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_http_variables_add_core_vars(cf: *mut ngx_conf_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_variables_init_vars(cf: *mut ngx_conf_t) -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_http_variable_null_value: ngx_http_variable_value_t;
}
extern "C" {
    pub static mut ngx_http_variable_true_value: ngx_http_variable_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_conf_ctx_t {
    pub main_conf: *mut *mut ::std::os::raw::c_void,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
    pub loc_conf: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_http_conf_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_conf_ctx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_conf_ctx_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_conf_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_conf_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_conf_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_conf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_ctx_t),
            "::",
            stringify!(main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_ctx_t),
            "::",
            stringify!(srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_ctx_t),
            "::",
            stringify!(loc_conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_module_t {
    pub preconfiguration:
        ::std::option::Option<unsafe extern "C" fn(cf: *mut ngx_conf_t) -> ngx_int_t>,
    pub postconfiguration:
        ::std::option::Option<unsafe extern "C" fn(cf: *mut ngx_conf_t) -> ngx_int_t>,
    pub create_main_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub init_main_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub create_srv_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub merge_srv_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            prev: *mut ::std::os::raw::c_void,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub create_loc_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub merge_loc_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            prev: *mut ::std::os::raw::c_void,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_ngx_http_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_module_t>(),
        64usize,
        concat!("Size of: ", stringify!(ngx_http_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preconfiguration) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(preconfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postconfiguration) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(postconfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_main_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(create_main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_main_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(init_main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_srv_conf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(create_srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_srv_conf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(merge_srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_loc_conf) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(create_loc_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_loc_conf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_module_t),
            "::",
            stringify!(merge_loc_conf)
        )
    );
}
pub const ngx_http_state_e_NGX_HTTP_INITING_REQUEST_STATE: ngx_http_state_e = 0;
pub const ngx_http_state_e_NGX_HTTP_READING_REQUEST_STATE: ngx_http_state_e = 1;
pub const ngx_http_state_e_NGX_HTTP_PROCESS_REQUEST_STATE: ngx_http_state_e = 2;
pub const ngx_http_state_e_NGX_HTTP_CONNECT_UPSTREAM_STATE: ngx_http_state_e = 3;
pub const ngx_http_state_e_NGX_HTTP_WRITING_UPSTREAM_STATE: ngx_http_state_e = 4;
pub const ngx_http_state_e_NGX_HTTP_READING_UPSTREAM_STATE: ngx_http_state_e = 5;
pub const ngx_http_state_e_NGX_HTTP_WRITING_REQUEST_STATE: ngx_http_state_e = 6;
pub const ngx_http_state_e_NGX_HTTP_LINGERING_CLOSE_STATE: ngx_http_state_e = 7;
pub const ngx_http_state_e_NGX_HTTP_KEEPALIVE_STATE: ngx_http_state_e = 8;
pub type ngx_http_state_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_header_t {
    pub name: ngx_str_t,
    pub offset: ngx_uint_t,
    pub handler: ngx_http_header_handler_pt,
}
#[test]
fn bindgen_test_layout_ngx_http_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_header_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_header_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_header_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_header_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_header_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_header_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_header_t),
            "::",
            stringify!(handler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_header_out_t {
    pub name: ngx_str_t,
    pub offset: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_header_out_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_header_out_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_header_out_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_header_out_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_header_out_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_header_out_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_header_out_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_header_out_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_headers_in_t {
    pub headers: ngx_list_t,
    pub host: *mut ngx_table_elt_t,
    pub connection: *mut ngx_table_elt_t,
    pub if_modified_since: *mut ngx_table_elt_t,
    pub if_unmodified_since: *mut ngx_table_elt_t,
    pub if_match: *mut ngx_table_elt_t,
    pub if_none_match: *mut ngx_table_elt_t,
    pub user_agent: *mut ngx_table_elt_t,
    pub referer: *mut ngx_table_elt_t,
    pub content_length: *mut ngx_table_elt_t,
    pub content_range: *mut ngx_table_elt_t,
    pub content_type: *mut ngx_table_elt_t,
    pub range: *mut ngx_table_elt_t,
    pub if_range: *mut ngx_table_elt_t,
    pub transfer_encoding: *mut ngx_table_elt_t,
    pub te: *mut ngx_table_elt_t,
    pub expect: *mut ngx_table_elt_t,
    pub upgrade: *mut ngx_table_elt_t,
    pub accept_encoding: *mut ngx_table_elt_t,
    pub via: *mut ngx_table_elt_t,
    pub authorization: *mut ngx_table_elt_t,
    pub keep_alive: *mut ngx_table_elt_t,
    pub x_forwarded_for: *mut ngx_table_elt_t,
    pub x_real_ip: *mut ngx_table_elt_t,
    pub accept: *mut ngx_table_elt_t,
    pub accept_language: *mut ngx_table_elt_t,
    pub depth: *mut ngx_table_elt_t,
    pub destination: *mut ngx_table_elt_t,
    pub overwrite: *mut ngx_table_elt_t,
    pub date: *mut ngx_table_elt_t,
    pub cookie: *mut ngx_table_elt_t,
    pub user: ngx_str_t,
    pub passwd: ngx_str_t,
    pub server: ngx_str_t,
    pub content_length_n: off_t,
    pub keep_alive_n: time_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_http_headers_in_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_headers_in_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_headers_in_t>(),
        368usize,
        concat!("Size of: ", stringify!(ngx_http_headers_in_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_headers_in_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_headers_in_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_modified_since) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(if_modified_since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_unmodified_since) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(if_unmodified_since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_match) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(if_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_none_match) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(if_none_match)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_agent) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(user_agent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referer) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(referer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_range) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(content_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_range) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(if_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_encoding) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(transfer_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).te) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(te)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expect) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(expect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upgrade) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(upgrade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_encoding) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(accept_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).via) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(via)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authorization) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(authorization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keep_alive) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(keep_alive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_forwarded_for) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(x_forwarded_for)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_real_ip) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(x_real_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(accept)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_language) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(accept_language)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(destination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overwrite) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(overwrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passwd) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length_n) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(content_length_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keep_alive_n) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_in_t),
            "::",
            stringify!(keep_alive_n)
        )
    );
}
impl ngx_http_headers_in_t {
    #[inline]
    pub fn connection_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_connection_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn chunked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chunked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn multi(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multi(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn multi_linked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multi_linked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msie(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_msie(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msie6(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_msie6(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn opera(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_opera(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gecko(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gecko(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chrome(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chrome(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn safari(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_safari(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn konqueror(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_konqueror(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        connection_type: ::std::os::raw::c_uint,
        chunked: ::std::os::raw::c_uint,
        multi: ::std::os::raw::c_uint,
        multi_linked: ::std::os::raw::c_uint,
        msie: ::std::os::raw::c_uint,
        msie6: ::std::os::raw::c_uint,
        opera: ::std::os::raw::c_uint,
        gecko: ::std::os::raw::c_uint,
        chrome: ::std::os::raw::c_uint,
        safari: ::std::os::raw::c_uint,
        konqueror: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let connection_type: u32 = unsafe { ::std::mem::transmute(connection_type) };
            connection_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let chunked: u32 = unsafe { ::std::mem::transmute(chunked) };
            chunked as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let multi: u32 = unsafe { ::std::mem::transmute(multi) };
            multi as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let multi_linked: u32 = unsafe { ::std::mem::transmute(multi_linked) };
            multi_linked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let msie: u32 = unsafe { ::std::mem::transmute(msie) };
            msie as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let msie6: u32 = unsafe { ::std::mem::transmute(msie6) };
            msie6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let opera: u32 = unsafe { ::std::mem::transmute(opera) };
            opera as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let gecko: u32 = unsafe { ::std::mem::transmute(gecko) };
            gecko as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let chrome: u32 = unsafe { ::std::mem::transmute(chrome) };
            chrome as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let safari: u32 = unsafe { ::std::mem::transmute(safari) };
            safari as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let konqueror: u32 = unsafe { ::std::mem::transmute(konqueror) };
            konqueror as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_headers_out_t {
    pub headers: ngx_list_t,
    pub trailers: ngx_list_t,
    pub status: ngx_uint_t,
    pub status_line: ngx_str_t,
    pub server: *mut ngx_table_elt_t,
    pub date: *mut ngx_table_elt_t,
    pub content_length: *mut ngx_table_elt_t,
    pub content_encoding: *mut ngx_table_elt_t,
    pub location: *mut ngx_table_elt_t,
    pub refresh: *mut ngx_table_elt_t,
    pub last_modified: *mut ngx_table_elt_t,
    pub content_range: *mut ngx_table_elt_t,
    pub accept_ranges: *mut ngx_table_elt_t,
    pub www_authenticate: *mut ngx_table_elt_t,
    pub expires: *mut ngx_table_elt_t,
    pub etag: *mut ngx_table_elt_t,
    pub cache_control: *mut ngx_table_elt_t,
    pub link: *mut ngx_table_elt_t,
    pub override_charset: *mut ngx_str_t,
    pub content_type_len: usize,
    pub content_type: ngx_str_t,
    pub charset: ngx_str_t,
    pub content_type_lowcase: *mut u_char,
    pub content_type_hash: ngx_uint_t,
    pub content_length_n: off_t,
    pub content_offset: off_t,
    pub date_time: time_t,
    pub last_modified_time: time_t,
}
#[test]
fn bindgen_test_layout_ngx_http_headers_out_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_headers_out_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_headers_out_t>(),
        344usize,
        concat!("Size of: ", stringify!(ngx_http_headers_out_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_headers_out_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_headers_out_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(trailers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_line) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(status_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_encoding) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(refresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_modified) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(last_modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_range) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_ranges) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(accept_ranges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).www_authenticate) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(www_authenticate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expires) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_control) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(cache_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).override_charset) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(override_charset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type_len) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_type_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charset) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(charset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type_lowcase) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_type_lowcase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type_hash) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_type_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length_n) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_length_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_offset) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(content_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date_time) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(date_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_modified_time) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_headers_out_t),
            "::",
            stringify!(last_modified_time)
        )
    );
}
pub type ngx_http_client_body_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_request_body_t {
    pub temp_file: *mut ngx_temp_file_t,
    pub bufs: *mut ngx_chain_t,
    pub buf: *mut ngx_buf_t,
    pub rest: off_t,
    pub received: off_t,
    pub free: *mut ngx_chain_t,
    pub busy: *mut ngx_chain_t,
    pub chunked: *mut ngx_http_chunked_t,
    pub post_handler: ngx_http_client_body_handler_pt,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_request_body_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_request_body_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_request_body_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_http_request_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_request_body_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_request_body_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(temp_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(rest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunked) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(chunked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_handler) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_body_t),
            "::",
            stringify!(post_handler)
        )
    );
}
impl ngx_http_request_body_t {
    #[inline]
    pub fn filter_need_buffering(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_filter_need_buffering(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_saved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_saved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        filter_need_buffering: ::std::os::raw::c_uint,
        last_sent: ::std::os::raw::c_uint,
        last_saved: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let filter_need_buffering: u32 =
                unsafe { ::std::mem::transmute(filter_need_buffering) };
            filter_need_buffering as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let last_sent: u32 = unsafe { ::std::mem::transmute(last_sent) };
            last_sent as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let last_saved: u32 = unsafe { ::std::mem::transmute(last_saved) };
            last_saved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_http_addr_conf_t = ngx_http_addr_conf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_connection_t {
    pub addr_conf: *mut ngx_http_addr_conf_t,
    pub conf_ctx: *mut ngx_http_conf_ctx_t,
    pub ssl_servername: *mut ngx_str_t,
    pub ssl_servername_regex: *mut ngx_http_regex_t,
    pub busy: *mut ngx_chain_t,
    pub nbusy: ngx_int_t,
    pub free: *mut ngx_chain_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_connection_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_connection_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_connection_t>(),
        64usize,
        concat!("Size of: ", stringify!(ngx_http_connection_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_connection_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_connection_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_conf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(addr_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_ctx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(conf_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_servername) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(ssl_servername)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_servername_regex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(ssl_servername_regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbusy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(nbusy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_connection_t),
            "::",
            stringify!(free)
        )
    );
}
impl ngx_http_connection_t {
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ssl: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_http_cleanup_pt =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type ngx_http_cleanup_t = ngx_http_cleanup_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_cleanup_s {
    pub handler: ngx_http_cleanup_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub next: *mut ngx_http_cleanup_t,
}
#[test]
fn bindgen_test_layout_ngx_http_cleanup_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_cleanup_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_cleanup_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_cleanup_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_cleanup_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_cleanup_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cleanup_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cleanup_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cleanup_s),
            "::",
            stringify!(next)
        )
    );
}
pub type ngx_http_post_subrequest_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        data: *mut ::std::os::raw::c_void,
        rc: ngx_int_t,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_post_subrequest_t {
    pub handler: ngx_http_post_subrequest_pt,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_http_post_subrequest_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_post_subrequest_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_post_subrequest_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_post_subrequest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_post_subrequest_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_post_subrequest_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_post_subrequest_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_post_subrequest_t),
            "::",
            stringify!(data)
        )
    );
}
pub type ngx_http_postponed_request_t = ngx_http_postponed_request_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_postponed_request_s {
    pub request: *mut ngx_http_request_t,
    pub out: *mut ngx_chain_t,
    pub next: *mut ngx_http_postponed_request_t,
}
#[test]
fn bindgen_test_layout_ngx_http_postponed_request_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_postponed_request_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_postponed_request_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_postponed_request_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_postponed_request_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_postponed_request_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_postponed_request_s),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_postponed_request_s),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_postponed_request_s),
            "::",
            stringify!(next)
        )
    );
}
pub type ngx_http_posted_request_t = ngx_http_posted_request_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_posted_request_s {
    pub request: *mut ngx_http_request_t,
    pub next: *mut ngx_http_posted_request_t,
}
#[test]
fn bindgen_test_layout_ngx_http_posted_request_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_posted_request_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_posted_request_s>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_posted_request_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_posted_request_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_posted_request_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_posted_request_s),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_posted_request_s),
            "::",
            stringify!(next)
        )
    );
}
pub type ngx_http_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t) -> ngx_int_t>;
pub type ngx_http_event_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_request_s {
    pub signature: u32,
    pub connection: *mut ngx_connection_t,
    pub ctx: *mut *mut ::std::os::raw::c_void,
    pub main_conf: *mut *mut ::std::os::raw::c_void,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
    pub loc_conf: *mut *mut ::std::os::raw::c_void,
    pub read_event_handler: ngx_http_event_handler_pt,
    pub write_event_handler: ngx_http_event_handler_pt,
    pub cache: *mut ngx_http_cache_t,
    pub upstream: *mut ngx_http_upstream_t,
    pub upstream_states: *mut ngx_array_t,
    pub pool: *mut ngx_pool_t,
    pub header_in: *mut ngx_buf_t,
    pub headers_in: ngx_http_headers_in_t,
    pub headers_out: ngx_http_headers_out_t,
    pub request_body: *mut ngx_http_request_body_t,
    pub lingering_time: time_t,
    pub start_sec: time_t,
    pub start_msec: ngx_msec_t,
    pub method: ngx_uint_t,
    pub http_version: ngx_uint_t,
    pub request_line: ngx_str_t,
    pub uri: ngx_str_t,
    pub args: ngx_str_t,
    pub exten: ngx_str_t,
    pub unparsed_uri: ngx_str_t,
    pub method_name: ngx_str_t,
    pub http_protocol: ngx_str_t,
    pub schema: ngx_str_t,
    pub out: *mut ngx_chain_t,
    pub main: *mut ngx_http_request_t,
    pub parent: *mut ngx_http_request_t,
    pub postponed: *mut ngx_http_postponed_request_t,
    pub post_subrequest: *mut ngx_http_post_subrequest_t,
    pub posted_requests: *mut ngx_http_posted_request_t,
    pub phase_handler: ngx_int_t,
    pub content_handler: ngx_http_handler_pt,
    pub access_code: ngx_uint_t,
    pub variables: *mut ngx_http_variable_value_t,
    pub ncaptures: ngx_uint_t,
    pub captures: *mut ::std::os::raw::c_int,
    pub captures_data: *mut u_char,
    pub limit_rate: usize,
    pub limit_rate_after: usize,
    pub header_size: usize,
    pub request_length: off_t,
    pub err_status: ngx_uint_t,
    pub http_connection: *mut ngx_http_connection_t,
    pub stream: *mut ngx_http_v2_stream_t,
    pub log_handler: ngx_http_log_handler_pt,
    pub cleanup: *mut ngx_http_cleanup_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 15usize]>,
    pub state: ngx_uint_t,
    pub header_hash: ngx_uint_t,
    pub lowcase_index: ngx_uint_t,
    pub lowcase_header: [u_char; 32usize],
    pub header_name_start: *mut u_char,
    pub header_name_end: *mut u_char,
    pub header_start: *mut u_char,
    pub header_end: *mut u_char,
    pub uri_start: *mut u_char,
    pub uri_end: *mut u_char,
    pub uri_ext: *mut u_char,
    pub args_start: *mut u_char,
    pub request_start: *mut u_char,
    pub request_end: *mut u_char,
    pub method_end: *mut u_char,
    pub schema_start: *mut u_char,
    pub schema_end: *mut u_char,
    pub host_start: *mut u_char,
    pub host_end: *mut u_char,
    pub port_start: *mut u_char,
    pub port_end: *mut u_char,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_ngx_http_request_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_request_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_request_s>(),
        1384usize,
        concat!("Size of: ", stringify!(ngx_http_request_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_request_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_request_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc_conf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(loc_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_event_handler) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(read_event_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_event_handler) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(write_event_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream_states) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(upstream_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_in) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_in) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(headers_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_out) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(headers_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_body) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(request_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lingering_time) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(lingering_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_sec) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(start_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_msec) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(start_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_version) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(http_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_line) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(request_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exten) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(exten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unparsed_uri) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(unparsed_uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_name) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(method_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_protocol) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(http_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schema) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(schema)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postponed) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(postponed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_subrequest) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(post_subrequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).posted_requests) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(posted_requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase_handler) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(phase_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_handler) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(content_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_code) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(access_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(captures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures_data) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(captures_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_rate) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(limit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_rate_after) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(limit_rate_after)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_length) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(request_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_status) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(err_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_connection) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(http_connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_handler) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(log_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_hash) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowcase_index) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(lowcase_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowcase_header) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(lowcase_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_name_start) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_name_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_name_end) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_name_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_start) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_end) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(header_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri_start) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(uri_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri_end) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(uri_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri_ext) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(uri_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args_start) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(args_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_start) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(request_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_end) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(request_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_end) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(method_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schema_start) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(schema_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schema_end) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(schema_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_start) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(host_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host_end) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(host_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_start) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(port_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_end) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_request_s),
            "::",
            stringify!(port_end)
        )
    );
}
impl ngx_http_request_s {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn subrequests(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_subrequests(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn aio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn http_state(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_http_state(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn complex_uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complex_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quoted_uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quoted_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn plus_in_uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_plus_in_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn empty_path_in_uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_empty_path_in_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn invalid_header(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_invalid_header(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn add_uri_to_alias(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_add_uri_to_alias(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valid_location(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid_location(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valid_unparsed_uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid_unparsed_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uri_changed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(45usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uri_changed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(45usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uri_changes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(46usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_uri_changes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(46usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_in_single_buf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(50usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_in_single_buf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(50usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_in_file_only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_in_file_only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_in_persistent_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(52usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_in_persistent_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(52usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_in_clean_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(53usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_in_clean_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(53usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_file_group_access(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(54usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_file_group_access(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(54usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_file_log_level(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(55usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_file_log_level(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(55usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_no_buffering(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_no_buffering(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn subrequest_in_memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(59usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subrequest_in_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(59usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn waited(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(60usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_waited(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(60usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cached(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(61usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cached(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(61usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gzip_tested(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gzip_tested(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gzip_ok(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gzip_ok(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gzip_vary(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gzip_vary(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn realloc_captures(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(65usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_realloc_captures(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(65usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(66usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(66usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bypass_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(67usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bypass_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(67usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(68usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(68usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_conn_status(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(69usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_limit_conn_status(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(69usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_req_status(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(71usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_limit_req_status(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(71usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_rate_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(74usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_limit_rate_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(74usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_rate_after_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(75usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_limit_rate_after_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(75usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pipeline(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(76usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pipeline(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(76usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chunked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(77usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chunked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(77usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn header_only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(78usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_header_only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(78usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn expect_trailers(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(79usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_expect_trailers(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(79usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lingering_close(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(81usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lingering_close(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(81usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn discard_body(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(82usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_discard_body(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(82usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reading_body(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(83usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reading_body(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(83usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn internal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(84usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_internal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(84usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error_page(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(85usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_page(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(85usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filter_finalize(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(86usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_filter_finalize(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(86usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn post_action(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(87usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_post_action(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(87usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_complete(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(88usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_complete(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(88usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_output(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(89usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_output(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(89usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn header_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(90usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_header_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(90usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn expect_tested(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(91usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_expect_tested(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(91usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn root_tested(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(92usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_root_tested(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(92usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn done(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(93usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_done(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(93usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn logged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(94usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_logged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(94usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buffered(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_buffered(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn main_filter_need_in_memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(100usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_main_filter_need_in_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(100usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filter_need_in_memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(101usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_filter_need_in_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(101usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filter_need_temporary(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(102usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_filter_need_temporary(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(102usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn preserve_body(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(103usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_preserve_body(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(103usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_ranges(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(104usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_ranges(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(104usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn subrequest_ranges(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(105usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subrequest_ranges(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(105usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn single_range(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(106usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_single_range(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(106usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_not_modified(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(107usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_not_modified(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(107usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stat_reading(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(108usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stat_reading(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(108usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stat_writing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(109usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stat_writing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(109usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stat_processing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(110usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stat_processing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(110usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn background(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(111usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_background(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(111usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn health_check(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_health_check(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        subrequests: ::std::os::raw::c_uint,
        blocked: ::std::os::raw::c_uint,
        aio: ::std::os::raw::c_uint,
        http_state: ::std::os::raw::c_uint,
        complex_uri: ::std::os::raw::c_uint,
        quoted_uri: ::std::os::raw::c_uint,
        plus_in_uri: ::std::os::raw::c_uint,
        empty_path_in_uri: ::std::os::raw::c_uint,
        invalid_header: ::std::os::raw::c_uint,
        add_uri_to_alias: ::std::os::raw::c_uint,
        valid_location: ::std::os::raw::c_uint,
        valid_unparsed_uri: ::std::os::raw::c_uint,
        uri_changed: ::std::os::raw::c_uint,
        uri_changes: ::std::os::raw::c_uint,
        request_body_in_single_buf: ::std::os::raw::c_uint,
        request_body_in_file_only: ::std::os::raw::c_uint,
        request_body_in_persistent_file: ::std::os::raw::c_uint,
        request_body_in_clean_file: ::std::os::raw::c_uint,
        request_body_file_group_access: ::std::os::raw::c_uint,
        request_body_file_log_level: ::std::os::raw::c_uint,
        request_body_no_buffering: ::std::os::raw::c_uint,
        subrequest_in_memory: ::std::os::raw::c_uint,
        waited: ::std::os::raw::c_uint,
        cached: ::std::os::raw::c_uint,
        gzip_tested: ::std::os::raw::c_uint,
        gzip_ok: ::std::os::raw::c_uint,
        gzip_vary: ::std::os::raw::c_uint,
        realloc_captures: ::std::os::raw::c_uint,
        proxy: ::std::os::raw::c_uint,
        bypass_cache: ::std::os::raw::c_uint,
        no_cache: ::std::os::raw::c_uint,
        limit_conn_status: ::std::os::raw::c_uint,
        limit_req_status: ::std::os::raw::c_uint,
        limit_rate_set: ::std::os::raw::c_uint,
        limit_rate_after_set: ::std::os::raw::c_uint,
        pipeline: ::std::os::raw::c_uint,
        chunked: ::std::os::raw::c_uint,
        header_only: ::std::os::raw::c_uint,
        expect_trailers: ::std::os::raw::c_uint,
        keepalive: ::std::os::raw::c_uint,
        lingering_close: ::std::os::raw::c_uint,
        discard_body: ::std::os::raw::c_uint,
        reading_body: ::std::os::raw::c_uint,
        internal: ::std::os::raw::c_uint,
        error_page: ::std::os::raw::c_uint,
        filter_finalize: ::std::os::raw::c_uint,
        post_action: ::std::os::raw::c_uint,
        request_complete: ::std::os::raw::c_uint,
        request_output: ::std::os::raw::c_uint,
        header_sent: ::std::os::raw::c_uint,
        expect_tested: ::std::os::raw::c_uint,
        root_tested: ::std::os::raw::c_uint,
        done: ::std::os::raw::c_uint,
        logged: ::std::os::raw::c_uint,
        buffered: ::std::os::raw::c_uint,
        main_filter_need_in_memory: ::std::os::raw::c_uint,
        filter_need_in_memory: ::std::os::raw::c_uint,
        filter_need_temporary: ::std::os::raw::c_uint,
        preserve_body: ::std::os::raw::c_uint,
        allow_ranges: ::std::os::raw::c_uint,
        subrequest_ranges: ::std::os::raw::c_uint,
        single_range: ::std::os::raw::c_uint,
        disable_not_modified: ::std::os::raw::c_uint,
        stat_reading: ::std::os::raw::c_uint,
        stat_writing: ::std::os::raw::c_uint,
        stat_processing: ::std::os::raw::c_uint,
        background: ::std::os::raw::c_uint,
        health_check: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 15usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 15usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let subrequests: u32 = unsafe { ::std::mem::transmute(subrequests) };
            subrequests as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let aio: u32 = unsafe { ::std::mem::transmute(aio) };
            aio as u64
        });
        __bindgen_bitfield_unit.set(33usize, 4u8, {
            let http_state: u32 = unsafe { ::std::mem::transmute(http_state) };
            http_state as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let complex_uri: u32 = unsafe { ::std::mem::transmute(complex_uri) };
            complex_uri as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let quoted_uri: u32 = unsafe { ::std::mem::transmute(quoted_uri) };
            quoted_uri as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let plus_in_uri: u32 = unsafe { ::std::mem::transmute(plus_in_uri) };
            plus_in_uri as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let empty_path_in_uri: u32 = unsafe { ::std::mem::transmute(empty_path_in_uri) };
            empty_path_in_uri as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let invalid_header: u32 = unsafe { ::std::mem::transmute(invalid_header) };
            invalid_header as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let add_uri_to_alias: u32 = unsafe { ::std::mem::transmute(add_uri_to_alias) };
            add_uri_to_alias as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let valid_location: u32 = unsafe { ::std::mem::transmute(valid_location) };
            valid_location as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let valid_unparsed_uri: u32 = unsafe { ::std::mem::transmute(valid_unparsed_uri) };
            valid_unparsed_uri as u64
        });
        __bindgen_bitfield_unit.set(45usize, 1u8, {
            let uri_changed: u32 = unsafe { ::std::mem::transmute(uri_changed) };
            uri_changed as u64
        });
        __bindgen_bitfield_unit.set(46usize, 4u8, {
            let uri_changes: u32 = unsafe { ::std::mem::transmute(uri_changes) };
            uri_changes as u64
        });
        __bindgen_bitfield_unit.set(50usize, 1u8, {
            let request_body_in_single_buf: u32 =
                unsafe { ::std::mem::transmute(request_body_in_single_buf) };
            request_body_in_single_buf as u64
        });
        __bindgen_bitfield_unit.set(51usize, 1u8, {
            let request_body_in_file_only: u32 =
                unsafe { ::std::mem::transmute(request_body_in_file_only) };
            request_body_in_file_only as u64
        });
        __bindgen_bitfield_unit.set(52usize, 1u8, {
            let request_body_in_persistent_file: u32 =
                unsafe { ::std::mem::transmute(request_body_in_persistent_file) };
            request_body_in_persistent_file as u64
        });
        __bindgen_bitfield_unit.set(53usize, 1u8, {
            let request_body_in_clean_file: u32 =
                unsafe { ::std::mem::transmute(request_body_in_clean_file) };
            request_body_in_clean_file as u64
        });
        __bindgen_bitfield_unit.set(54usize, 1u8, {
            let request_body_file_group_access: u32 =
                unsafe { ::std::mem::transmute(request_body_file_group_access) };
            request_body_file_group_access as u64
        });
        __bindgen_bitfield_unit.set(55usize, 3u8, {
            let request_body_file_log_level: u32 =
                unsafe { ::std::mem::transmute(request_body_file_log_level) };
            request_body_file_log_level as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let request_body_no_buffering: u32 =
                unsafe { ::std::mem::transmute(request_body_no_buffering) };
            request_body_no_buffering as u64
        });
        __bindgen_bitfield_unit.set(59usize, 1u8, {
            let subrequest_in_memory: u32 = unsafe { ::std::mem::transmute(subrequest_in_memory) };
            subrequest_in_memory as u64
        });
        __bindgen_bitfield_unit.set(60usize, 1u8, {
            let waited: u32 = unsafe { ::std::mem::transmute(waited) };
            waited as u64
        });
        __bindgen_bitfield_unit.set(61usize, 1u8, {
            let cached: u32 = unsafe { ::std::mem::transmute(cached) };
            cached as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let gzip_tested: u32 = unsafe { ::std::mem::transmute(gzip_tested) };
            gzip_tested as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let gzip_ok: u32 = unsafe { ::std::mem::transmute(gzip_ok) };
            gzip_ok as u64
        });
        __bindgen_bitfield_unit.set(64usize, 1u8, {
            let gzip_vary: u32 = unsafe { ::std::mem::transmute(gzip_vary) };
            gzip_vary as u64
        });
        __bindgen_bitfield_unit.set(65usize, 1u8, {
            let realloc_captures: u32 = unsafe { ::std::mem::transmute(realloc_captures) };
            realloc_captures as u64
        });
        __bindgen_bitfield_unit.set(66usize, 1u8, {
            let proxy: u32 = unsafe { ::std::mem::transmute(proxy) };
            proxy as u64
        });
        __bindgen_bitfield_unit.set(67usize, 1u8, {
            let bypass_cache: u32 = unsafe { ::std::mem::transmute(bypass_cache) };
            bypass_cache as u64
        });
        __bindgen_bitfield_unit.set(68usize, 1u8, {
            let no_cache: u32 = unsafe { ::std::mem::transmute(no_cache) };
            no_cache as u64
        });
        __bindgen_bitfield_unit.set(69usize, 2u8, {
            let limit_conn_status: u32 = unsafe { ::std::mem::transmute(limit_conn_status) };
            limit_conn_status as u64
        });
        __bindgen_bitfield_unit.set(71usize, 3u8, {
            let limit_req_status: u32 = unsafe { ::std::mem::transmute(limit_req_status) };
            limit_req_status as u64
        });
        __bindgen_bitfield_unit.set(74usize, 1u8, {
            let limit_rate_set: u32 = unsafe { ::std::mem::transmute(limit_rate_set) };
            limit_rate_set as u64
        });
        __bindgen_bitfield_unit.set(75usize, 1u8, {
            let limit_rate_after_set: u32 = unsafe { ::std::mem::transmute(limit_rate_after_set) };
            limit_rate_after_set as u64
        });
        __bindgen_bitfield_unit.set(76usize, 1u8, {
            let pipeline: u32 = unsafe { ::std::mem::transmute(pipeline) };
            pipeline as u64
        });
        __bindgen_bitfield_unit.set(77usize, 1u8, {
            let chunked: u32 = unsafe { ::std::mem::transmute(chunked) };
            chunked as u64
        });
        __bindgen_bitfield_unit.set(78usize, 1u8, {
            let header_only: u32 = unsafe { ::std::mem::transmute(header_only) };
            header_only as u64
        });
        __bindgen_bitfield_unit.set(79usize, 1u8, {
            let expect_trailers: u32 = unsafe { ::std::mem::transmute(expect_trailers) };
            expect_trailers as u64
        });
        __bindgen_bitfield_unit.set(80usize, 1u8, {
            let keepalive: u32 = unsafe { ::std::mem::transmute(keepalive) };
            keepalive as u64
        });
        __bindgen_bitfield_unit.set(81usize, 1u8, {
            let lingering_close: u32 = unsafe { ::std::mem::transmute(lingering_close) };
            lingering_close as u64
        });
        __bindgen_bitfield_unit.set(82usize, 1u8, {
            let discard_body: u32 = unsafe { ::std::mem::transmute(discard_body) };
            discard_body as u64
        });
        __bindgen_bitfield_unit.set(83usize, 1u8, {
            let reading_body: u32 = unsafe { ::std::mem::transmute(reading_body) };
            reading_body as u64
        });
        __bindgen_bitfield_unit.set(84usize, 1u8, {
            let internal: u32 = unsafe { ::std::mem::transmute(internal) };
            internal as u64
        });
        __bindgen_bitfield_unit.set(85usize, 1u8, {
            let error_page: u32 = unsafe { ::std::mem::transmute(error_page) };
            error_page as u64
        });
        __bindgen_bitfield_unit.set(86usize, 1u8, {
            let filter_finalize: u32 = unsafe { ::std::mem::transmute(filter_finalize) };
            filter_finalize as u64
        });
        __bindgen_bitfield_unit.set(87usize, 1u8, {
            let post_action: u32 = unsafe { ::std::mem::transmute(post_action) };
            post_action as u64
        });
        __bindgen_bitfield_unit.set(88usize, 1u8, {
            let request_complete: u32 = unsafe { ::std::mem::transmute(request_complete) };
            request_complete as u64
        });
        __bindgen_bitfield_unit.set(89usize, 1u8, {
            let request_output: u32 = unsafe { ::std::mem::transmute(request_output) };
            request_output as u64
        });
        __bindgen_bitfield_unit.set(90usize, 1u8, {
            let header_sent: u32 = unsafe { ::std::mem::transmute(header_sent) };
            header_sent as u64
        });
        __bindgen_bitfield_unit.set(91usize, 1u8, {
            let expect_tested: u32 = unsafe { ::std::mem::transmute(expect_tested) };
            expect_tested as u64
        });
        __bindgen_bitfield_unit.set(92usize, 1u8, {
            let root_tested: u32 = unsafe { ::std::mem::transmute(root_tested) };
            root_tested as u64
        });
        __bindgen_bitfield_unit.set(93usize, 1u8, {
            let done: u32 = unsafe { ::std::mem::transmute(done) };
            done as u64
        });
        __bindgen_bitfield_unit.set(94usize, 1u8, {
            let logged: u32 = unsafe { ::std::mem::transmute(logged) };
            logged as u64
        });
        __bindgen_bitfield_unit.set(96usize, 4u8, {
            let buffered: u32 = unsafe { ::std::mem::transmute(buffered) };
            buffered as u64
        });
        __bindgen_bitfield_unit.set(100usize, 1u8, {
            let main_filter_need_in_memory: u32 =
                unsafe { ::std::mem::transmute(main_filter_need_in_memory) };
            main_filter_need_in_memory as u64
        });
        __bindgen_bitfield_unit.set(101usize, 1u8, {
            let filter_need_in_memory: u32 =
                unsafe { ::std::mem::transmute(filter_need_in_memory) };
            filter_need_in_memory as u64
        });
        __bindgen_bitfield_unit.set(102usize, 1u8, {
            let filter_need_temporary: u32 =
                unsafe { ::std::mem::transmute(filter_need_temporary) };
            filter_need_temporary as u64
        });
        __bindgen_bitfield_unit.set(103usize, 1u8, {
            let preserve_body: u32 = unsafe { ::std::mem::transmute(preserve_body) };
            preserve_body as u64
        });
        __bindgen_bitfield_unit.set(104usize, 1u8, {
            let allow_ranges: u32 = unsafe { ::std::mem::transmute(allow_ranges) };
            allow_ranges as u64
        });
        __bindgen_bitfield_unit.set(105usize, 1u8, {
            let subrequest_ranges: u32 = unsafe { ::std::mem::transmute(subrequest_ranges) };
            subrequest_ranges as u64
        });
        __bindgen_bitfield_unit.set(106usize, 1u8, {
            let single_range: u32 = unsafe { ::std::mem::transmute(single_range) };
            single_range as u64
        });
        __bindgen_bitfield_unit.set(107usize, 1u8, {
            let disable_not_modified: u32 = unsafe { ::std::mem::transmute(disable_not_modified) };
            disable_not_modified as u64
        });
        __bindgen_bitfield_unit.set(108usize, 1u8, {
            let stat_reading: u32 = unsafe { ::std::mem::transmute(stat_reading) };
            stat_reading as u64
        });
        __bindgen_bitfield_unit.set(109usize, 1u8, {
            let stat_writing: u32 = unsafe { ::std::mem::transmute(stat_writing) };
            stat_writing as u64
        });
        __bindgen_bitfield_unit.set(110usize, 1u8, {
            let stat_processing: u32 = unsafe { ::std::mem::transmute(stat_processing) };
            stat_processing as u64
        });
        __bindgen_bitfield_unit.set(111usize, 1u8, {
            let background: u32 = unsafe { ::std::mem::transmute(background) };
            background as u64
        });
        __bindgen_bitfield_unit.set(112usize, 1u8, {
            let health_check: u32 = unsafe { ::std::mem::transmute(health_check) };
            health_check as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn http_minor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_http_minor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn http_major(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_http_major(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        http_minor: ::std::os::raw::c_uint,
        http_major: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let http_minor: u32 = unsafe { ::std::mem::transmute(http_minor) };
            http_minor as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let http_major: u32 = unsafe { ::std::mem::transmute(http_major) };
            http_major as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_ephemeral_t {
    pub terminal_posted_request: ngx_http_posted_request_t,
}
#[test]
fn bindgen_test_layout_ngx_http_ephemeral_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_ephemeral_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_ephemeral_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_ephemeral_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_ephemeral_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_ephemeral_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).terminal_posted_request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ephemeral_t),
            "::",
            stringify!(terminal_posted_request)
        )
    );
}
extern "C" {
    pub static mut ngx_http_headers_in: [ngx_http_header_t; 0usize];
}
extern "C" {
    pub static mut ngx_http_headers_out: [ngx_http_header_out_t; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_engine_t {
    pub ip: *mut u_char,
    pub pos: *mut u_char,
    pub sp: *mut ngx_http_variable_value_t,
    pub buf: ngx_str_t,
    pub line: ngx_str_t,
    pub args: *mut u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub status: ngx_int_t,
    pub request: *mut ngx_http_request_t,
}
#[test]
fn bindgen_test_layout_ngx_http_script_engine_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_engine_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_engine_t>(),
        88usize,
        concat!("Size of: ", stringify!(ngx_http_script_engine_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_engine_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_engine_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_engine_t),
            "::",
            stringify!(request)
        )
    );
}
impl ngx_http_script_engine_t {
    #[inline]
    pub fn flushed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flushed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quote(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quote(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_log(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flushed: ::std::os::raw::c_uint,
        skip: ::std::os::raw::c_uint,
        quote: ::std::os::raw::c_uint,
        is_args: ::std::os::raw::c_uint,
        log: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let flushed: u32 = unsafe { ::std::mem::transmute(flushed) };
            flushed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let skip: u32 = unsafe { ::std::mem::transmute(skip) };
            skip as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let quote: u32 = unsafe { ::std::mem::transmute(quote) };
            quote as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_args: u32 = unsafe { ::std::mem::transmute(is_args) };
            is_args as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let log: u32 = unsafe { ::std::mem::transmute(log) };
            log as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_compile_t {
    pub cf: *mut ngx_conf_t,
    pub source: *mut ngx_str_t,
    pub flushes: *mut *mut ngx_array_t,
    pub lengths: *mut *mut ngx_array_t,
    pub values: *mut *mut ngx_array_t,
    pub variables: ngx_uint_t,
    pub ncaptures: ngx_uint_t,
    pub captures_mask: ngx_uint_t,
    pub size: ngx_uint_t,
    pub main: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_script_compile_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_compile_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_compile_t>(),
        88usize,
        concat!("Size of: ", stringify!(ngx_http_script_compile_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_compile_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_compile_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flushes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(flushes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengths) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures_mask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(captures_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_compile_t),
            "::",
            stringify!(main)
        )
    );
}
impl ngx_http_script_compile_t {
    #[inline]
    pub fn compile_args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_compile_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn complete_lengths(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complete_lengths(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn complete_values(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complete_values(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conf_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conf_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn root_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_root_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dup_capture(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dup_capture(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        compile_args: ::std::os::raw::c_uint,
        complete_lengths: ::std::os::raw::c_uint,
        complete_values: ::std::os::raw::c_uint,
        zero: ::std::os::raw::c_uint,
        conf_prefix: ::std::os::raw::c_uint,
        root_prefix: ::std::os::raw::c_uint,
        dup_capture: ::std::os::raw::c_uint,
        args: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let compile_args: u32 = unsafe { ::std::mem::transmute(compile_args) };
            compile_args as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let complete_lengths: u32 = unsafe { ::std::mem::transmute(complete_lengths) };
            complete_lengths as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let complete_values: u32 = unsafe { ::std::mem::transmute(complete_values) };
            complete_values as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let zero: u32 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let conf_prefix: u32 = unsafe { ::std::mem::transmute(conf_prefix) };
            conf_prefix as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let root_prefix: u32 = unsafe { ::std::mem::transmute(root_prefix) };
            root_prefix as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let dup_capture: u32 = unsafe { ::std::mem::transmute(dup_capture) };
            dup_capture as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let args: u32 = unsafe { ::std::mem::transmute(args) };
            args as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_http_complex_value_t {
    pub value: ngx_str_t,
    pub flushes: *mut ngx_uint_t,
    pub lengths: *mut ::std::os::raw::c_void,
    pub values: *mut ::std::os::raw::c_void,
    pub u: ngx_http_complex_value_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_http_complex_value_t__bindgen_ty_1 {
    pub size: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_complex_value_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_complex_value_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_complex_value_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ngx_http_complex_value_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_complex_value_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_complex_value_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_complex_value_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
}
#[test]
fn bindgen_test_layout_ngx_http_complex_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_complex_value_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_complex_value_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_http_complex_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_complex_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_complex_value_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_complex_value_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flushes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_complex_value_t),
            "::",
            stringify!(flushes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengths) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_complex_value_t),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_complex_value_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_complex_value_t),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_compile_complex_value_t {
    pub cf: *mut ngx_conf_t,
    pub value: *mut ngx_str_t,
    pub complex_value: *mut ngx_http_complex_value_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_compile_complex_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_compile_complex_value_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_compile_complex_value_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_compile_complex_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_compile_complex_value_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_compile_complex_value_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_compile_complex_value_t),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_compile_complex_value_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).complex_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_compile_complex_value_t),
            "::",
            stringify!(complex_value)
        )
    );
}
impl ngx_http_compile_complex_value_t {
    #[inline]
    pub fn zero(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conf_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conf_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn root_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_root_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        zero: ::std::os::raw::c_uint,
        conf_prefix: ::std::os::raw::c_uint,
        root_prefix: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let zero: u32 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let conf_prefix: u32 = unsafe { ::std::mem::transmute(conf_prefix) };
            conf_prefix as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let root_prefix: u32 = unsafe { ::std::mem::transmute(root_prefix) };
            root_prefix as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_http_script_code_pt =
    ::std::option::Option<unsafe extern "C" fn(e: *mut ngx_http_script_engine_t)>;
pub type ngx_http_script_len_code_pt =
    ::std::option::Option<unsafe extern "C" fn(e: *mut ngx_http_script_engine_t) -> usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_copy_code_t {
    pub code: ngx_http_script_code_pt,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_copy_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_copy_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_copy_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_script_copy_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_copy_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_copy_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_copy_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_copy_code_t),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_var_code_t {
    pub code: ngx_http_script_code_pt,
    pub index: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_var_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_var_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_var_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_script_var_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_var_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_var_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_var_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_var_code_t),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_var_handler_code_t {
    pub code: ngx_http_script_code_pt,
    pub handler: ngx_http_set_variable_pt,
    pub data: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_var_handler_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_var_handler_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_var_handler_code_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_script_var_handler_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_var_handler_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_script_var_handler_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_var_handler_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_var_handler_code_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_var_handler_code_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_copy_capture_code_t {
    pub code: ngx_http_script_code_pt,
    pub n: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_copy_capture_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_copy_capture_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_copy_capture_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_script_copy_capture_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_copy_capture_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_script_copy_capture_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_copy_capture_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_copy_capture_code_t),
            "::",
            stringify!(n)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_regex_code_t {
    pub code: ngx_http_script_code_pt,
    pub regex: *mut ngx_http_regex_t,
    pub lengths: *mut ngx_array_t,
    pub size: usize,
    pub status: usize,
    pub next: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub name: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_script_regex_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_regex_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_regex_code_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_http_script_regex_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_regex_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_regex_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengths) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_code_t),
            "::",
            stringify!(name)
        )
    );
}
impl ngx_http_script_regex_code_t {
    #[inline]
    pub fn test(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_test(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn negative_test(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_negative_test(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn add_args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_add_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redirect(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redirect(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn break_cycle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_break_cycle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        test: ::std::os::raw::c_uint,
        negative_test: ::std::os::raw::c_uint,
        uri: ::std::os::raw::c_uint,
        args: ::std::os::raw::c_uint,
        add_args: ::std::os::raw::c_uint,
        redirect: ::std::os::raw::c_uint,
        break_cycle: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let test: u32 = unsafe { ::std::mem::transmute(test) };
            test as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let negative_test: u32 = unsafe { ::std::mem::transmute(negative_test) };
            negative_test as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let uri: u32 = unsafe { ::std::mem::transmute(uri) };
            uri as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let args: u32 = unsafe { ::std::mem::transmute(args) };
            args as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let add_args: u32 = unsafe { ::std::mem::transmute(add_args) };
            add_args as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let redirect: u32 = unsafe { ::std::mem::transmute(redirect) };
            redirect as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let break_cycle: u32 = unsafe { ::std::mem::transmute(break_cycle) };
            break_cycle as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_regex_end_code_t {
    pub code: ngx_http_script_code_pt,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_script_regex_end_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_regex_end_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_regex_end_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_script_regex_end_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_regex_end_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_script_regex_end_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_regex_end_code_t),
            "::",
            stringify!(code)
        )
    );
}
impl ngx_http_script_regex_end_code_t {
    #[inline]
    pub fn uri(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uri(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn add_args(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_add_args(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redirect(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redirect(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        uri: ::std::os::raw::c_uint,
        args: ::std::os::raw::c_uint,
        add_args: ::std::os::raw::c_uint,
        redirect: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let uri: u32 = unsafe { ::std::mem::transmute(uri) };
            uri as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let args: u32 = unsafe { ::std::mem::transmute(args) };
            args as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let add_args: u32 = unsafe { ::std::mem::transmute(add_args) };
            add_args as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let redirect: u32 = unsafe { ::std::mem::transmute(redirect) };
            redirect as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_full_name_code_t {
    pub code: ngx_http_script_code_pt,
    pub conf_prefix: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_full_name_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_full_name_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_full_name_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_script_full_name_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_full_name_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_script_full_name_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_full_name_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_prefix) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_full_name_code_t),
            "::",
            stringify!(conf_prefix)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_http_script_return_code_t {
    pub code: ngx_http_script_code_pt,
    pub status: usize,
    pub text: ngx_http_complex_value_t,
}
#[test]
fn bindgen_test_layout_ngx_http_script_return_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_return_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_return_code_t>(),
        64usize,
        concat!("Size of: ", stringify!(ngx_http_script_return_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_return_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_return_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_return_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_return_code_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_return_code_t),
            "::",
            stringify!(text)
        )
    );
}
pub const ngx_http_script_file_op_e_ngx_http_script_file_plain: ngx_http_script_file_op_e = 0;
pub const ngx_http_script_file_op_e_ngx_http_script_file_not_plain: ngx_http_script_file_op_e = 1;
pub const ngx_http_script_file_op_e_ngx_http_script_file_dir: ngx_http_script_file_op_e = 2;
pub const ngx_http_script_file_op_e_ngx_http_script_file_not_dir: ngx_http_script_file_op_e = 3;
pub const ngx_http_script_file_op_e_ngx_http_script_file_exists: ngx_http_script_file_op_e = 4;
pub const ngx_http_script_file_op_e_ngx_http_script_file_not_exists: ngx_http_script_file_op_e = 5;
pub const ngx_http_script_file_op_e_ngx_http_script_file_exec: ngx_http_script_file_op_e = 6;
pub const ngx_http_script_file_op_e_ngx_http_script_file_not_exec: ngx_http_script_file_op_e = 7;
pub type ngx_http_script_file_op_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_file_code_t {
    pub code: ngx_http_script_code_pt,
    pub op: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_file_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_file_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_file_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_script_file_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_file_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_file_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_file_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_file_code_t),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_if_code_t {
    pub code: ngx_http_script_code_pt,
    pub next: usize,
    pub loc_conf: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_http_script_if_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_if_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_if_code_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_script_if_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_if_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_if_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_if_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_if_code_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_if_code_t),
            "::",
            stringify!(loc_conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_complex_value_code_t {
    pub code: ngx_http_script_code_pt,
    pub lengths: *mut ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_http_script_complex_value_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_complex_value_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_complex_value_code_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ngx_http_script_complex_value_code_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_complex_value_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_script_complex_value_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_complex_value_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengths) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_complex_value_code_t),
            "::",
            stringify!(lengths)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_script_value_code_t {
    pub code: ngx_http_script_code_pt,
    pub value: usize,
    pub text_len: usize,
    pub text_data: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_script_value_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_script_value_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_script_value_code_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_script_value_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_script_value_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_script_value_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_value_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_value_code_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_value_code_t),
            "::",
            stringify!(text_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_script_value_code_t),
            "::",
            stringify!(text_data)
        )
    );
}
extern "C" {
    pub fn ngx_http_script_flush_complex_value(
        r: *mut ngx_http_request_t,
        val: *mut ngx_http_complex_value_t,
    );
}
extern "C" {
    pub fn ngx_http_complex_value(
        r: *mut ngx_http_request_t,
        val: *mut ngx_http_complex_value_t,
        value: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_complex_value_size(
        r: *mut ngx_http_request_t,
        val: *mut ngx_http_complex_value_t,
        default_value: usize,
    ) -> usize;
}
extern "C" {
    pub fn ngx_http_compile_complex_value(ccv: *mut ngx_http_compile_complex_value_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_set_complex_value_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_set_complex_value_zero_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_set_complex_value_size_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_test_predicates(
        r: *mut ngx_http_request_t,
        predicates: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_test_required_predicates(
        r: *mut ngx_http_request_t,
        predicates: *mut ngx_array_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_set_predicate_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_script_variables_count(value: *mut ngx_str_t) -> ngx_uint_t;
}
extern "C" {
    pub fn ngx_http_script_compile(sc: *mut ngx_http_script_compile_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_script_run(
        r: *mut ngx_http_request_t,
        value: *mut ngx_str_t,
        code_lengths: *mut ::std::os::raw::c_void,
        reserved: usize,
        code_values: *mut ::std::os::raw::c_void,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_http_script_flush_no_cacheable_variables(
        r: *mut ngx_http_request_t,
        indices: *mut ngx_array_t,
    );
}
extern "C" {
    pub fn ngx_http_script_start_code(
        pool: *mut ngx_pool_t,
        codes: *mut *mut ngx_array_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_http_script_add_code(
        codes: *mut ngx_array_t,
        size: usize,
        code: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_http_script_copy_len_code(e: *mut ngx_http_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_http_script_copy_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_copy_var_len_code(e: *mut ngx_http_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_http_script_copy_var_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_copy_capture_len_code(e: *mut ngx_http_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_http_script_copy_capture_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_mark_args_code(e: *mut ngx_http_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_http_script_start_args_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_regex_start_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_regex_end_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_return_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_break_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_if_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_equal_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_not_equal_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_file_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_complex_value_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_value_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_set_var_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_var_set_handler_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_var_code(e: *mut ngx_http_script_engine_t);
}
extern "C" {
    pub fn ngx_http_script_nop_code(e: *mut ngx_http_script_engine_t);
}
pub type ngx_peer_connection_t = ngx_peer_connection_s;
pub type ngx_event_get_peer_pt = ::std::option::Option<
    unsafe extern "C" fn(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t,
>;
pub type ngx_event_free_peer_pt = ::std::option::Option<
    unsafe extern "C" fn(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
        state: ngx_uint_t,
    ),
>;
pub type ngx_event_notify_peer_pt = ::std::option::Option<
    unsafe extern "C" fn(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
        type_: ngx_uint_t,
    ),
>;
pub type ngx_event_set_peer_session_pt = ::std::option::Option<
    unsafe extern "C" fn(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t,
>;
pub type ngx_event_save_peer_session_pt = ::std::option::Option<
    unsafe extern "C" fn(pc: *mut ngx_peer_connection_t, data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_peer_connection_s {
    pub connection: *mut ngx_connection_t,
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: *mut ngx_str_t,
    pub tries: ngx_uint_t,
    pub start_time: ngx_msec_t,
    pub get: ngx_event_get_peer_pt,
    pub free: ngx_event_free_peer_pt,
    pub notify: ngx_event_notify_peer_pt,
    pub data: *mut ::std::os::raw::c_void,
    pub set_session: ngx_event_set_peer_session_pt,
    pub save_session: ngx_event_save_peer_session_pt,
    pub local: *mut ngx_addr_t,
    pub type_: ::std::os::raw::c_int,
    pub rcvbuf: ::std::os::raw::c_int,
    pub log: *mut ngx_log_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub spare: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_ngx_peer_connection_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_peer_connection_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_peer_connection_s>(),
        144usize,
        concat!("Size of: ", stringify!(ngx_peer_connection_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_peer_connection_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_peer_connection_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(tries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_session) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(set_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_session) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(save_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).local) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcvbuf) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(rcvbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_peer_connection_s),
            "::",
            stringify!(spare)
        )
    );
}
impl ngx_peer_connection_s {
    #[inline]
    pub fn cached(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cached(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transparent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transparent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn so_keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_so_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn down(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_down(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cached: ::std::os::raw::c_uint,
        transparent: ::std::os::raw::c_uint,
        so_keepalive: ::std::os::raw::c_uint,
        down: ::std::os::raw::c_uint,
        log_error: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cached: u32 = unsafe { ::std::mem::transmute(cached) };
            cached as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let transparent: u32 = unsafe { ::std::mem::transmute(transparent) };
            transparent as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let so_keepalive: u32 = unsafe { ::std::mem::transmute(so_keepalive) };
            so_keepalive as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let down: u32 = unsafe { ::std::mem::transmute(down) };
            down as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let log_error: u32 = unsafe { ::std::mem::transmute(log_error) };
            log_error as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_event_connect_peer(pc: *mut ngx_peer_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_event_get_peer(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
pub type ngx_event_pipe_t = ngx_event_pipe_s;
pub type ngx_event_pipe_input_filter_pt = ::std::option::Option<
    unsafe extern "C" fn(p: *mut ngx_event_pipe_t, buf: *mut ngx_buf_t) -> ngx_int_t,
>;
pub type ngx_event_pipe_output_filter_pt = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, chain: *mut ngx_chain_t) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_event_pipe_s {
    pub upstream: *mut ngx_connection_t,
    pub downstream: *mut ngx_connection_t,
    pub free_raw_bufs: *mut ngx_chain_t,
    pub in_: *mut ngx_chain_t,
    pub last_in: *mut *mut ngx_chain_t,
    pub writing: *mut ngx_chain_t,
    pub out: *mut ngx_chain_t,
    pub free: *mut ngx_chain_t,
    pub busy: *mut ngx_chain_t,
    pub input_filter: ngx_event_pipe_input_filter_pt,
    pub input_ctx: *mut ::std::os::raw::c_void,
    pub output_filter: ngx_event_pipe_output_filter_pt,
    pub output_ctx: *mut ::std::os::raw::c_void,
    pub thread_handler: ::std::option::Option<
        unsafe extern "C" fn(task: *mut ngx_thread_task_t, file: *mut ngx_file_t) -> ngx_int_t,
    >,
    pub thread_ctx: *mut ::std::os::raw::c_void,
    pub thread_task: *mut ngx_thread_task_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub allocated: ngx_int_t,
    pub bufs: ngx_bufs_t,
    pub tag: ngx_buf_tag_t,
    pub busy_size: isize,
    pub read_length: off_t,
    pub length: off_t,
    pub max_temp_file_size: off_t,
    pub temp_file_write_size: isize,
    pub read_timeout: ngx_msec_t,
    pub send_timeout: ngx_msec_t,
    pub send_lowat: isize,
    pub pool: *mut ngx_pool_t,
    pub log: *mut ngx_log_t,
    pub preread_bufs: *mut ngx_chain_t,
    pub preread_size: usize,
    pub buf_to_file: *mut ngx_buf_t,
    pub limit_rate: usize,
    pub start_sec: time_t,
    pub temp_file: *mut ngx_temp_file_t,
    pub num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ngx_event_pipe_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_event_pipe_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_event_pipe_s>(),
        304usize,
        concat!("Size of: ", stringify!(ngx_event_pipe_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_event_pipe_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_event_pipe_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downstream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(downstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_raw_bufs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(free_raw_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_in) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(last_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writing) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(writing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_filter) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(input_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_ctx) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(input_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_filter) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(output_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_ctx) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(output_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_handler) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(thread_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_ctx) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(thread_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_task) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(thread_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy_size) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(busy_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_length) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(read_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_temp_file_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(max_temp_file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_file_write_size) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(temp_file_write_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_timeout) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(read_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_timeout) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(send_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_lowat) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(send_lowat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preread_bufs) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(preread_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preread_size) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(preread_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_to_file) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(buf_to_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_rate) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(limit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_sec) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(start_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_file) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(temp_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_event_pipe_s),
            "::",
            stringify!(num)
        )
    );
}
impl ngx_event_pipe_s {
    #[inline]
    pub fn read(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cacheable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cacheable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn single_buf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_single_buf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn free_bufs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_free_bufs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn upstream_done(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_upstream_done(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn upstream_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_upstream_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn upstream_eof(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_upstream_eof(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn upstream_blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_upstream_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn downstream_done(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_downstream_done(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn downstream_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_downstream_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cyclic_temp_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cyclic_temp_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aio(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aio(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        read: ::std::os::raw::c_uint,
        cacheable: ::std::os::raw::c_uint,
        single_buf: ::std::os::raw::c_uint,
        free_bufs: ::std::os::raw::c_uint,
        upstream_done: ::std::os::raw::c_uint,
        upstream_error: ::std::os::raw::c_uint,
        upstream_eof: ::std::os::raw::c_uint,
        upstream_blocked: ::std::os::raw::c_uint,
        downstream_done: ::std::os::raw::c_uint,
        downstream_error: ::std::os::raw::c_uint,
        cyclic_temp_file: ::std::os::raw::c_uint,
        aio: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let read: u32 = unsafe { ::std::mem::transmute(read) };
            read as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cacheable: u32 = unsafe { ::std::mem::transmute(cacheable) };
            cacheable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let single_buf: u32 = unsafe { ::std::mem::transmute(single_buf) };
            single_buf as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let free_bufs: u32 = unsafe { ::std::mem::transmute(free_bufs) };
            free_bufs as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let upstream_done: u32 = unsafe { ::std::mem::transmute(upstream_done) };
            upstream_done as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let upstream_error: u32 = unsafe { ::std::mem::transmute(upstream_error) };
            upstream_error as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let upstream_eof: u32 = unsafe { ::std::mem::transmute(upstream_eof) };
            upstream_eof as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let upstream_blocked: u32 = unsafe { ::std::mem::transmute(upstream_blocked) };
            upstream_blocked as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let downstream_done: u32 = unsafe { ::std::mem::transmute(downstream_done) };
            downstream_done as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let downstream_error: u32 = unsafe { ::std::mem::transmute(downstream_error) };
            downstream_error as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let cyclic_temp_file: u32 = unsafe { ::std::mem::transmute(cyclic_temp_file) };
            cyclic_temp_file as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let aio: u32 = unsafe { ::std::mem::transmute(aio) };
            aio as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_event_pipe(p: *mut ngx_event_pipe_t, do_write: ngx_int_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_event_pipe_copy_input_filter(
        p: *mut ngx_event_pipe_t,
        buf: *mut ngx_buf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_event_pipe_add_free_buf(p: *mut ngx_event_pipe_t, b: *mut ngx_buf_t) -> ngx_int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_state_t {
    pub status: ngx_uint_t,
    pub response_time: ngx_msec_t,
    pub connect_time: ngx_msec_t,
    pub header_time: ngx_msec_t,
    pub queue_time: ngx_msec_t,
    pub response_length: off_t,
    pub bytes_received: off_t,
    pub bytes_sent: off_t,
    pub peer: *mut ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_state_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_state_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(response_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(connect_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(header_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(queue_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(response_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_received) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(bytes_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_sent) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(bytes_sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_state_t),
            "::",
            stringify!(peer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_main_conf_t {
    pub headers_in_hash: ngx_hash_t,
    pub upstreams: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_main_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_main_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_main_conf_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_main_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_main_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_main_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_in_hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_main_conf_t),
            "::",
            stringify!(headers_in_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstreams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_main_conf_t),
            "::",
            stringify!(upstreams)
        )
    );
}
pub type ngx_http_upstream_srv_conf_t = ngx_http_upstream_srv_conf_s;
pub type ngx_http_upstream_init_pt = ::std::option::Option<
    unsafe extern "C" fn(cf: *mut ngx_conf_t, us: *mut ngx_http_upstream_srv_conf_t) -> ngx_int_t,
>;
pub type ngx_http_upstream_init_peer_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        us: *mut ngx_http_upstream_srv_conf_t,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_peer_t {
    pub init_upstream: ngx_http_upstream_init_pt,
    pub init: ngx_http_upstream_init_peer_pt,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_peer_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_peer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_peer_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_peer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_peer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_peer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_upstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_peer_t),
            "::",
            stringify!(init_upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_peer_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_peer_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_server_t {
    pub name: ngx_str_t,
    pub addrs: *mut ngx_addr_t,
    pub naddrs: ngx_uint_t,
    pub weight: ngx_uint_t,
    pub max_conns: ngx_uint_t,
    pub max_fails: ngx_uint_t,
    pub fail_timeout: time_t,
    pub slow_start: ngx_msec_t,
    pub down: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub spare: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_server_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_server_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_server_t>(),
        136usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_server_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_server_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_server_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_conns) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(max_conns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fails) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(max_fails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_timeout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(fail_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slow_start) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(slow_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_server_t),
            "::",
            stringify!(spare)
        )
    );
}
impl ngx_http_upstream_server_t {
    #[inline]
    pub fn backup(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_backup(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(backup: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let backup: u32 = unsafe { ::std::mem::transmute(backup) };
            backup as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_srv_conf_s {
    pub peer: ngx_http_upstream_peer_t,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
    pub servers: *mut ngx_array_t,
    pub flags: ngx_uint_t,
    pub host: ngx_str_t,
    pub file_name: *mut u_char,
    pub line: ngx_uint_t,
    pub port: in_port_t,
    pub no_port: ngx_uint_t,
    pub shm_zone: *mut ngx_shm_zone_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_srv_conf_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_srv_conf_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_srv_conf_s>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_srv_conf_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_srv_conf_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_srv_conf_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(servers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_port) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(no_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_zone) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_srv_conf_s),
            "::",
            stringify!(shm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_local_t {
    pub addr: *mut ngx_addr_t,
    pub value: *mut ngx_http_complex_value_t,
    pub transparent: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_local_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_local_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_local_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_local_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_local_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_local_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_local_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_local_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transparent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_local_t),
            "::",
            stringify!(transparent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_conf_t {
    pub upstream: *mut ngx_http_upstream_srv_conf_t,
    pub connect_timeout: ngx_msec_t,
    pub send_timeout: ngx_msec_t,
    pub read_timeout: ngx_msec_t,
    pub next_upstream_timeout: ngx_msec_t,
    pub send_lowat: usize,
    pub buffer_size: usize,
    pub limit_rate: usize,
    pub busy_buffers_size: usize,
    pub max_temp_file_size: usize,
    pub temp_file_write_size: usize,
    pub busy_buffers_size_conf: usize,
    pub max_temp_file_size_conf: usize,
    pub temp_file_write_size_conf: usize,
    pub bufs: ngx_bufs_t,
    pub ignore_headers: ngx_uint_t,
    pub next_upstream: ngx_uint_t,
    pub store_access: ngx_uint_t,
    pub next_upstream_tries: ngx_uint_t,
    pub buffering: ngx_flag_t,
    pub request_buffering: ngx_flag_t,
    pub pass_request_headers: ngx_flag_t,
    pub pass_request_body: ngx_flag_t,
    pub ignore_client_abort: ngx_flag_t,
    pub intercept_errors: ngx_flag_t,
    pub cyclic_temp_file: ngx_flag_t,
    pub force_ranges: ngx_flag_t,
    pub temp_path: *mut ngx_path_t,
    pub hide_headers_hash: ngx_hash_t,
    pub hide_headers: *mut ngx_array_t,
    pub pass_headers: *mut ngx_array_t,
    pub local: *mut ngx_http_upstream_local_t,
    pub socket_keepalive: ngx_flag_t,
    pub cache_zone: *mut ngx_shm_zone_t,
    pub cache_value: *mut ngx_http_complex_value_t,
    pub cache_min_uses: ngx_uint_t,
    pub cache_use_stale: ngx_uint_t,
    pub cache_methods: ngx_uint_t,
    pub cache_max_range_offset: off_t,
    pub cache_lock: ngx_flag_t,
    pub cache_lock_timeout: ngx_msec_t,
    pub cache_lock_age: ngx_msec_t,
    pub cache_revalidate: ngx_flag_t,
    pub cache_convert_head: ngx_flag_t,
    pub cache_background_update: ngx_flag_t,
    pub cache_valid: *mut ngx_array_t,
    pub cache_bypass: *mut ngx_array_t,
    pub cache_purge: *mut ngx_array_t,
    pub no_cache: *mut ngx_array_t,
    pub store_lengths: *mut ngx_array_t,
    pub store_values: *mut ngx_array_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ssl: *mut ngx_ssl_t,
    pub ssl_session_reuse: ngx_flag_t,
    pub ssl_name: *mut ngx_http_complex_value_t,
    pub ssl_server_name: ngx_flag_t,
    pub ssl_verify: ngx_flag_t,
    pub ssl_certificate: *mut ngx_http_complex_value_t,
    pub ssl_certificate_key: *mut ngx_http_complex_value_t,
    pub ssl_passwords: *mut ngx_array_t,
    pub module: ngx_str_t,
    pub spare: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_conf_t>(),
        528usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect_timeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(connect_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_timeout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(send_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(read_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_upstream_timeout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(next_upstream_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_lowat) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(send_lowat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_rate) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(limit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy_buffers_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(busy_buffers_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_temp_file_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(max_temp_file_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_file_write_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(temp_file_write_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy_buffers_size_conf) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(busy_buffers_size_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_temp_file_size_conf) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(max_temp_file_size_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_file_write_size_conf) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(temp_file_write_size_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufs) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_headers) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ignore_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_upstream) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(next_upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store_access) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(store_access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_upstream_tries) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(next_upstream_tries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffering) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(buffering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_buffering) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(request_buffering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_request_headers) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(pass_request_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_request_body) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(pass_request_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_client_abort) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ignore_client_abort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intercept_errors) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(intercept_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cyclic_temp_file) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cyclic_temp_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_ranges) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(force_ranges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_path) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(temp_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hide_headers_hash) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(hide_headers_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hide_headers) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(hide_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_headers) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(pass_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).local) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socket_keepalive) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(socket_keepalive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_zone) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_zone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_value) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_min_uses) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_min_uses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_use_stale) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_use_stale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_methods) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_max_range_offset) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_max_range_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_lock) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_lock_timeout) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_lock_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_lock_age) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_lock_age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_revalidate) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_revalidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_convert_head) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_convert_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_background_update) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_background_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_valid) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_bypass) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_bypass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_purge) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(cache_purge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_cache) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(no_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store_lengths) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(store_lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store_values) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(store_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_session_reuse) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_session_reuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_name) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_server_name) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_server_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_verify) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_verify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_certificate) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_certificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_certificate_key) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_certificate_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_passwords) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(ssl_passwords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_conf_t),
            "::",
            stringify!(spare)
        )
    );
}
impl ngx_http_upstream_conf_t {
    #[inline]
    pub fn cache(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_cache(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn store(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_store(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn intercept_404(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intercept_404(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn change_buffering(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_change_buffering(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pass_trailers(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pass_trailers(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn preserve_output(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_preserve_output(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cache: ::std::os::raw::c_int,
        store: ::std::os::raw::c_int,
        intercept_404: ::std::os::raw::c_uint,
        change_buffering: ::std::os::raw::c_uint,
        pass_trailers: ::std::os::raw::c_uint,
        preserve_output: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let cache: u32 = unsafe { ::std::mem::transmute(cache) };
            cache as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let store: u32 = unsafe { ::std::mem::transmute(store) };
            store as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let intercept_404: u32 = unsafe { ::std::mem::transmute(intercept_404) };
            intercept_404 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let change_buffering: u32 = unsafe { ::std::mem::transmute(change_buffering) };
            change_buffering as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pass_trailers: u32 = unsafe { ::std::mem::transmute(pass_trailers) };
            pass_trailers as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let preserve_output: u32 = unsafe { ::std::mem::transmute(preserve_output) };
            preserve_output as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_header_t {
    pub name: ngx_str_t,
    pub handler: ngx_http_header_handler_pt,
    pub offset: ngx_uint_t,
    pub copy_handler: ngx_http_header_handler_pt,
    pub conf: ngx_uint_t,
    pub redirect: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_header_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_header_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_header_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_header_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_header_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_header_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_header_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_handler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_header_t),
            "::",
            stringify!(copy_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_header_t),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redirect) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_header_t),
            "::",
            stringify!(redirect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_headers_in_t {
    pub headers: ngx_list_t,
    pub trailers: ngx_list_t,
    pub status_n: ngx_uint_t,
    pub status_line: ngx_str_t,
    pub status: *mut ngx_table_elt_t,
    pub date: *mut ngx_table_elt_t,
    pub server: *mut ngx_table_elt_t,
    pub connection: *mut ngx_table_elt_t,
    pub expires: *mut ngx_table_elt_t,
    pub etag: *mut ngx_table_elt_t,
    pub x_accel_expires: *mut ngx_table_elt_t,
    pub x_accel_redirect: *mut ngx_table_elt_t,
    pub x_accel_limit_rate: *mut ngx_table_elt_t,
    pub content_type: *mut ngx_table_elt_t,
    pub content_length: *mut ngx_table_elt_t,
    pub last_modified: *mut ngx_table_elt_t,
    pub location: *mut ngx_table_elt_t,
    pub refresh: *mut ngx_table_elt_t,
    pub www_authenticate: *mut ngx_table_elt_t,
    pub transfer_encoding: *mut ngx_table_elt_t,
    pub vary: *mut ngx_table_elt_t,
    pub cache_control: *mut ngx_table_elt_t,
    pub set_cookie: *mut ngx_table_elt_t,
    pub content_length_n: off_t,
    pub last_modified_time: time_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_headers_in_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_headers_in_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_headers_in_t>(),
        312usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_headers_in_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_headers_in_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_headers_in_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(trailers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_n) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(status_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status_line) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(status_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expires) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(expires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_accel_expires) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(x_accel_expires)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_accel_redirect) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(x_accel_redirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_accel_limit_rate) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(x_accel_limit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_type) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(content_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_modified) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(last_modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(refresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).www_authenticate) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(www_authenticate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_encoding) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(transfer_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vary) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(vary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_control) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(cache_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_cookie) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(set_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_length_n) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(content_length_n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_modified_time) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_headers_in_t),
            "::",
            stringify!(last_modified_time)
        )
    );
}
impl ngx_http_upstream_headers_in_t {
    #[inline]
    pub fn connection_close(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_connection_close(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chunked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chunked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn expired(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_expired(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        connection_close: ::std::os::raw::c_uint,
        chunked: ::std::os::raw::c_uint,
        no_cache: ::std::os::raw::c_uint,
        expired: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let connection_close: u32 = unsafe { ::std::mem::transmute(connection_close) };
            connection_close as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let chunked: u32 = unsafe { ::std::mem::transmute(chunked) };
            chunked as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_cache: u32 = unsafe { ::std::mem::transmute(no_cache) };
            no_cache as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let expired: u32 = unsafe { ::std::mem::transmute(expired) };
            expired as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_resolved_t {
    pub host: ngx_str_t,
    pub port: in_port_t,
    pub no_port: ngx_uint_t,
    pub naddrs: ngx_uint_t,
    pub addrs: *mut ngx_resolver_addr_t,
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: ngx_str_t,
    pub ctx: *mut ngx_resolver_ctx_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_resolved_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_resolved_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_resolved_t>(),
        88usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_resolved_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_resolved_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_resolved_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_port) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(no_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_resolved_t),
            "::",
            stringify!(ctx)
        )
    );
}
pub type ngx_http_upstream_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(r: *mut ngx_http_request_t, u: *mut ngx_http_upstream_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_s {
    pub read_event_handler: ngx_http_upstream_handler_pt,
    pub write_event_handler: ngx_http_upstream_handler_pt,
    pub peer: ngx_peer_connection_t,
    pub pipe: *mut ngx_event_pipe_t,
    pub request_bufs: *mut ngx_chain_t,
    pub output: ngx_output_chain_ctx_t,
    pub writer: ngx_chain_writer_ctx_t,
    pub conf: *mut ngx_http_upstream_conf_t,
    pub upstream: *mut ngx_http_upstream_srv_conf_t,
    pub caches: *mut ngx_array_t,
    pub headers_in: ngx_http_upstream_headers_in_t,
    pub resolved: *mut ngx_http_upstream_resolved_t,
    pub from_client: ngx_buf_t,
    pub buffer: ngx_buf_t,
    pub length: off_t,
    pub out_bufs: *mut ngx_chain_t,
    pub busy_bufs: *mut ngx_chain_t,
    pub free_bufs: *mut ngx_chain_t,
    pub input_filter_init:
        ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ngx_int_t>,
    pub input_filter: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, bytes: isize) -> ngx_int_t,
    >,
    pub input_filter_ctx: *mut ::std::os::raw::c_void,
    pub create_key:
        ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t) -> ngx_int_t>,
    pub create_request:
        ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t) -> ngx_int_t>,
    pub reinit_request:
        ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t) -> ngx_int_t>,
    pub process_header:
        ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t) -> ngx_int_t>,
    pub abort_request: ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t)>,
    pub finalize_request:
        ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t, rc: ngx_int_t)>,
    pub rewrite_redirect: ::std::option::Option<
        unsafe extern "C" fn(
            r: *mut ngx_http_request_t,
            h: *mut ngx_table_elt_t,
            prefix: usize,
        ) -> ngx_int_t,
    >,
    pub rewrite_cookie: ::std::option::Option<
        unsafe extern "C" fn(r: *mut ngx_http_request_t, h: *mut ngx_table_elt_t) -> ngx_int_t,
    >,
    pub start_time: ngx_msec_t,
    pub state: *mut ngx_http_upstream_state_t,
    pub method: ngx_str_t,
    pub schema: ngx_str_t,
    pub uri: ngx_str_t,
    pub ssl_name: ngx_str_t,
    pub cleanup: *mut ngx_http_cleanup_pt,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_s>(),
        1064usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_event_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(read_event_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_event_handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(write_event_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipe) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(pipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_bufs) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(request_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writer) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).caches) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(caches)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_in) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(headers_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolved) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_client) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(from_client)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_bufs) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(out_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy_bufs) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(busy_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_bufs) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(free_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_filter_init) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(input_filter_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_filter) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(input_filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_filter_ctx) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(input_filter_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_key) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(create_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_request) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(create_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reinit_request) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(reinit_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_header) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(process_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_request) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(abort_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalize_request) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(finalize_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewrite_redirect) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(rewrite_redirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewrite_cookie) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(rewrite_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).schema) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(schema)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_name) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(ssl_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_s),
            "::",
            stringify!(cleanup)
        )
    );
}
impl ngx_http_upstream_s {
    #[inline]
    pub fn store(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_store(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cacheable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cacheable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn accel(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_accel(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_status(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_cache_status(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn buffering(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buffering(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn upgrade(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_upgrade(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn request_body_blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_request_body_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn header_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_header_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        store: ::std::os::raw::c_uint,
        cacheable: ::std::os::raw::c_uint,
        accel: ::std::os::raw::c_uint,
        ssl: ::std::os::raw::c_uint,
        cache_status: ::std::os::raw::c_uint,
        buffering: ::std::os::raw::c_uint,
        keepalive: ::std::os::raw::c_uint,
        upgrade: ::std::os::raw::c_uint,
        error: ::std::os::raw::c_uint,
        request_sent: ::std::os::raw::c_uint,
        request_body_sent: ::std::os::raw::c_uint,
        request_body_blocked: ::std::os::raw::c_uint,
        header_sent: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let store: u32 = unsafe { ::std::mem::transmute(store) };
            store as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cacheable: u32 = unsafe { ::std::mem::transmute(cacheable) };
            cacheable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let accel: u32 = unsafe { ::std::mem::transmute(accel) };
            accel as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let cache_status: u32 = unsafe { ::std::mem::transmute(cache_status) };
            cache_status as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let buffering: u32 = unsafe { ::std::mem::transmute(buffering) };
            buffering as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let keepalive: u32 = unsafe { ::std::mem::transmute(keepalive) };
            keepalive as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let upgrade: u32 = unsafe { ::std::mem::transmute(upgrade) };
            upgrade as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let error: u32 = unsafe { ::std::mem::transmute(error) };
            error as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let request_sent: u32 = unsafe { ::std::mem::transmute(request_sent) };
            request_sent as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let request_body_sent: u32 = unsafe { ::std::mem::transmute(request_body_sent) };
            request_body_sent as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let request_body_blocked: u32 = unsafe { ::std::mem::transmute(request_body_blocked) };
            request_body_blocked as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let header_sent: u32 = unsafe { ::std::mem::transmute(header_sent) };
            header_sent as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_next_t {
    pub status: ngx_uint_t,
    pub mask: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_next_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_next_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_next_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_next_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_next_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_next_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_next_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_next_t),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_param_t {
    pub key: ngx_str_t,
    pub value: ngx_str_t,
    pub skip_empty: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_param_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_param_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_param_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_param_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_param_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_param_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_param_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_param_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_empty) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_param_t),
            "::",
            stringify!(skip_empty)
        )
    );
}
extern "C" {
    pub fn ngx_http_upstream_create(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_init(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_upstream_non_buffered_filter_init(
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_non_buffered_filter(
        data: *mut ::std::os::raw::c_void,
        bytes: isize,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_add(
        cf: *mut ngx_conf_t,
        u: *mut ngx_url_t,
        flags: ngx_uint_t,
    ) -> *mut ngx_http_upstream_srv_conf_t;
}
extern "C" {
    pub fn ngx_http_upstream_bind_set_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_upstream_param_set_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_upstream_hide_headers_hash(
        cf: *mut ngx_conf_t,
        conf: *mut ngx_http_upstream_conf_t,
        prev: *mut ngx_http_upstream_conf_t,
        default_hide_headers: *mut ngx_str_t,
        hash: *mut ngx_hash_init_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_http_upstream_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_http_upstream_cache_method_mask: [ngx_conf_bitmask_t; 0usize];
}
extern "C" {
    pub static mut ngx_http_upstream_ignore_headers_masks: [ngx_conf_bitmask_t; 0usize];
}
pub type ngx_http_upstream_rr_peer_t = ngx_http_upstream_rr_peer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_rr_peer_s {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: ngx_str_t,
    pub server: ngx_str_t,
    pub current_weight: ngx_int_t,
    pub effective_weight: ngx_int_t,
    pub weight: ngx_int_t,
    pub conns: ngx_uint_t,
    pub max_conns: ngx_uint_t,
    pub fails: ngx_uint_t,
    pub accessed: time_t,
    pub checked: time_t,
    pub max_fails: ngx_uint_t,
    pub fail_timeout: time_t,
    pub slow_start: ngx_msec_t,
    pub start_time: ngx_msec_t,
    pub down: ngx_uint_t,
    pub ssl_session: *mut ::std::os::raw::c_void,
    pub ssl_session_len: ::std::os::raw::c_int,
    pub lock: ngx_atomic_t,
    pub next: *mut ngx_http_upstream_rr_peer_t,
    pub spare: [u64; 32usize],
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_rr_peer_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_rr_peer_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_rr_peer_s>(),
        440usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_rr_peer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_rr_peer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_rr_peer_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_weight) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(current_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).effective_weight) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(effective_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conns) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(conns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_conns) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(max_conns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fails) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(fails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessed) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(accessed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checked) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(checked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fails) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(max_fails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_timeout) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(fail_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slow_start) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(slow_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_session) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(ssl_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_session_len) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(ssl_session_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_s),
            "::",
            stringify!(spare)
        )
    );
}
pub type ngx_http_upstream_rr_peers_t = ngx_http_upstream_rr_peers_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_rr_peers_s {
    pub number: ngx_uint_t,
    pub shpool: *mut ngx_slab_pool_t,
    pub rwlock: ngx_atomic_t,
    pub zone_next: *mut ngx_http_upstream_rr_peers_t,
    pub total_weight: ngx_uint_t,
    pub tries: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub name: *mut ngx_str_t,
    pub next: *mut ngx_http_upstream_rr_peers_t,
    pub peer: *mut ngx_http_upstream_rr_peer_t,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_rr_peers_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_rr_peers_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_rr_peers_s>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_rr_peers_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_rr_peers_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_upstream_rr_peers_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shpool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(shpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rwlock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(rwlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zone_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(zone_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_weight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(total_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tries) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(tries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peers_s),
            "::",
            stringify!(peer)
        )
    );
}
impl ngx_http_upstream_rr_peers_s {
    #[inline]
    pub fn single(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_single(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        single: ::std::os::raw::c_uint,
        weighted: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let single: u32 = unsafe { ::std::mem::transmute(single) };
            single as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let weighted: u32 = unsafe { ::std::mem::transmute(weighted) };
            weighted as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_upstream_rr_peer_data_t {
    pub config: ngx_uint_t,
    pub peers: *mut ngx_http_upstream_rr_peers_t,
    pub current: *mut ngx_http_upstream_rr_peer_t,
    pub tried: *mut usize,
    pub data: usize,
}
#[test]
fn bindgen_test_layout_ngx_http_upstream_rr_peer_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_upstream_rr_peer_data_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_upstream_rr_peer_data_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_http_upstream_rr_peer_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_upstream_rr_peer_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_http_upstream_rr_peer_data_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_data_t),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_data_t),
            "::",
            stringify!(peers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_data_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tried) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_data_t),
            "::",
            stringify!(tried)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_upstream_rr_peer_data_t),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn ngx_http_upstream_init_round_robin(
        cf: *mut ngx_conf_t,
        us: *mut ngx_http_upstream_srv_conf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_init_round_robin_peer(
        r: *mut ngx_http_request_t,
        us: *mut ngx_http_upstream_srv_conf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_create_round_robin_peer(
        r: *mut ngx_http_request_t,
        ur: *mut ngx_http_upstream_resolved_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_get_round_robin_peer(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_free_round_robin_peer(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
        state: ngx_uint_t,
    );
}
extern "C" {
    pub fn ngx_http_upstream_set_round_robin_peer_session(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_upstream_save_round_robin_peer_session(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_thread_task_s {
    pub next: *mut ngx_thread_task_t,
    pub id: ngx_uint_t,
    pub ctx: *mut ::std::os::raw::c_void,
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, log: *mut ngx_log_t),
    >,
    pub event: ngx_event_t,
}
#[test]
fn bindgen_test_layout_ngx_thread_task_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_thread_task_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_thread_task_s>(),
        128usize,
        concat!("Size of: ", stringify!(ngx_thread_task_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_thread_task_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_thread_task_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_thread_task_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_thread_task_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_thread_task_s),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_thread_task_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_thread_task_s),
            "::",
            stringify!(event)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_thread_pool_s {
    _unused: [u8; 0],
}
pub type ngx_thread_pool_t = ngx_thread_pool_s;
extern "C" {
    pub fn ngx_thread_pool_add(cf: *mut ngx_conf_t, name: *mut ngx_str_t)
        -> *mut ngx_thread_pool_t;
}
extern "C" {
    pub fn ngx_thread_pool_get(
        cycle: *mut ngx_cycle_t,
        name: *mut ngx_str_t,
    ) -> *mut ngx_thread_pool_t;
}
extern "C" {
    pub fn ngx_thread_task_alloc(pool: *mut ngx_pool_t, size: usize) -> *mut ngx_thread_task_t;
}
extern "C" {
    pub fn ngx_thread_task_post(
        tp: *mut ngx_thread_pool_t,
        task: *mut ngx_thread_task_t,
    ) -> ngx_int_t;
}
pub type ngx_http_location_tree_node_t = ngx_http_location_tree_node_s;
pub type ngx_http_core_loc_conf_t = ngx_http_core_loc_conf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_listen_opt_t {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub addr_text: ngx_str_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub backlog: ::std::os::raw::c_int,
    pub rcvbuf: ::std::os::raw::c_int,
    pub sndbuf: ::std::os::raw::c_int,
    pub fastopen: ::std::os::raw::c_int,
    pub tcp_keepidle: ::std::os::raw::c_int,
    pub tcp_keepintvl: ::std::os::raw::c_int,
    pub tcp_keepcnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ngx_http_listen_opt_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_listen_opt_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_listen_opt_t>(),
        64usize,
        concat!("Size of: ", stringify!(ngx_http_listen_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_listen_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_listen_opt_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(addr_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(backlog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcvbuf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(rcvbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sndbuf) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(sndbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastopen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(fastopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepidle) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(tcp_keepidle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepintvl) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(tcp_keepintvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepcnt) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_listen_opt_t),
            "::",
            stringify!(tcp_keepcnt)
        )
    );
}
impl ngx_http_listen_opt_t {
    #[inline]
    pub fn set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn default_server(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_default_server(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wildcard(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wildcard(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn http2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_http2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipv6only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv6only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deferred_accept(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deferred_accept(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reuseport(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reuseport(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn so_keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_so_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        set: ::std::os::raw::c_uint,
        default_server: ::std::os::raw::c_uint,
        bind: ::std::os::raw::c_uint,
        wildcard: ::std::os::raw::c_uint,
        ssl: ::std::os::raw::c_uint,
        http2: ::std::os::raw::c_uint,
        ipv6only: ::std::os::raw::c_uint,
        deferred_accept: ::std::os::raw::c_uint,
        reuseport: ::std::os::raw::c_uint,
        so_keepalive: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let set: u32 = unsafe { ::std::mem::transmute(set) };
            set as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let default_server: u32 = unsafe { ::std::mem::transmute(default_server) };
            default_server as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bind: u32 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let wildcard: u32 = unsafe { ::std::mem::transmute(wildcard) };
            wildcard as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let http2: u32 = unsafe { ::std::mem::transmute(http2) };
            http2 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ipv6only: u32 = unsafe { ::std::mem::transmute(ipv6only) };
            ipv6only as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let deferred_accept: u32 = unsafe { ::std::mem::transmute(deferred_accept) };
            deferred_accept as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let reuseport: u32 = unsafe { ::std::mem::transmute(reuseport) };
            reuseport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let so_keepalive: u32 = unsafe { ::std::mem::transmute(so_keepalive) };
            so_keepalive as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ngx_http_phases_NGX_HTTP_POST_READ_PHASE: ngx_http_phases = 0;
pub const ngx_http_phases_NGX_HTTP_SERVER_REWRITE_PHASE: ngx_http_phases = 1;
pub const ngx_http_phases_NGX_HTTP_FIND_CONFIG_PHASE: ngx_http_phases = 2;
pub const ngx_http_phases_NGX_HTTP_REWRITE_PHASE: ngx_http_phases = 3;
pub const ngx_http_phases_NGX_HTTP_POST_REWRITE_PHASE: ngx_http_phases = 4;
pub const ngx_http_phases_NGX_HTTP_PREACCESS_PHASE: ngx_http_phases = 5;
pub const ngx_http_phases_NGX_HTTP_ACCESS_PHASE: ngx_http_phases = 6;
pub const ngx_http_phases_NGX_HTTP_POST_ACCESS_PHASE: ngx_http_phases = 7;
pub const ngx_http_phases_NGX_HTTP_PRECONTENT_PHASE: ngx_http_phases = 8;
pub const ngx_http_phases_NGX_HTTP_CONTENT_PHASE: ngx_http_phases = 9;
pub const ngx_http_phases_NGX_HTTP_LOG_PHASE: ngx_http_phases = 10;
pub type ngx_http_phases = ::std::os::raw::c_uint;
pub type ngx_http_phase_handler_t = ngx_http_phase_handler_s;
pub type ngx_http_phase_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_phase_handler_s {
    pub checker: ngx_http_phase_handler_pt,
    pub handler: ngx_http_handler_pt,
    pub next: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_phase_handler_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_phase_handler_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_phase_handler_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_phase_handler_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_phase_handler_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_phase_handler_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checker) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_handler_s),
            "::",
            stringify!(checker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_handler_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_handler_s),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_phase_engine_t {
    pub handlers: *mut ngx_http_phase_handler_t,
    pub server_rewrite_index: ngx_uint_t,
    pub location_rewrite_index: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_phase_engine_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_phase_engine_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_phase_engine_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_phase_engine_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_phase_engine_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_phase_engine_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_engine_t),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_rewrite_index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_engine_t),
            "::",
            stringify!(server_rewrite_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location_rewrite_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_engine_t),
            "::",
            stringify!(location_rewrite_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_phase_t {
    pub handlers: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_http_phase_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_phase_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_phase_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_http_phase_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_phase_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_phase_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_phase_t),
            "::",
            stringify!(handlers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_core_main_conf_t {
    pub servers: ngx_array_t,
    pub phase_engine: ngx_http_phase_engine_t,
    pub headers_in_hash: ngx_hash_t,
    pub variables_hash: ngx_hash_t,
    pub variables: ngx_array_t,
    pub prefix_variables: ngx_array_t,
    pub ncaptures: ngx_uint_t,
    pub server_names_hash_max_size: ngx_uint_t,
    pub server_names_hash_bucket_size: ngx_uint_t,
    pub variables_hash_max_size: ngx_uint_t,
    pub variables_hash_bucket_size: ngx_uint_t,
    pub variables_keys: *mut ngx_hash_keys_arrays_t,
    pub ports: *mut ngx_array_t,
    pub phases: [ngx_http_phase_t; 11usize],
}
#[test]
fn bindgen_test_layout_ngx_http_core_main_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_core_main_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_core_main_conf_t>(),
        672usize,
        concat!("Size of: ", stringify!(ngx_http_core_main_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_core_main_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_core_main_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(servers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase_engine) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(phase_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headers_in_hash) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(headers_in_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_hash) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(variables_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix_variables) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(prefix_variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_names_hash_max_size) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(server_names_hash_max_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).server_names_hash_bucket_size) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(server_names_hash_bucket_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_hash_max_size) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(variables_hash_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_hash_bucket_size) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(variables_hash_bucket_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_keys) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(variables_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ports) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(ports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phases) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_main_conf_t),
            "::",
            stringify!(phases)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_core_srv_conf_t {
    pub server_names: ngx_array_t,
    pub ctx: *mut ngx_http_conf_ctx_t,
    pub file_name: *mut u_char,
    pub line: ngx_uint_t,
    pub server_name: ngx_str_t,
    pub connection_pool_size: usize,
    pub request_pool_size: usize,
    pub client_header_buffer_size: usize,
    pub large_client_header_buffers: ngx_bufs_t,
    pub client_header_timeout: ngx_msec_t,
    pub ignore_invalid_headers: ngx_flag_t,
    pub merge_slashes: ngx_flag_t,
    pub underscores_in_headers: ngx_flag_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub named_locations: *mut *mut ngx_http_core_loc_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_http_core_srv_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_core_srv_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_core_srv_conf_t>(),
        168usize,
        concat!("Size of: ", stringify!(ngx_http_core_srv_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_core_srv_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_core_srv_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(server_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(server_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_pool_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(connection_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_pool_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(request_pool_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_header_buffer_size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(client_header_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_client_header_buffers) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(large_client_header_buffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_header_timeout) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(client_header_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_invalid_headers) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(ignore_invalid_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_slashes) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(merge_slashes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).underscores_in_headers) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(underscores_in_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).named_locations) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_srv_conf_t),
            "::",
            stringify!(named_locations)
        )
    );
}
impl ngx_http_core_srv_conf_t {
    #[inline]
    pub fn listen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_listen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn captures(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_captures(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        listen: ::std::os::raw::c_uint,
        captures: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let listen: u32 = unsafe { ::std::mem::transmute(listen) };
            listen as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let captures: u32 = unsafe { ::std::mem::transmute(captures) };
            captures as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_server_name_t {
    pub regex: *mut ngx_http_regex_t,
    pub server: *mut ngx_http_core_srv_conf_t,
    pub name: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_server_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_server_name_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_server_name_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_server_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_server_name_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_server_name_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_server_name_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_server_name_t),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_server_name_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_virtual_names_t {
    pub names: ngx_hash_combined_t,
    pub nregex: ngx_uint_t,
    pub regex: *mut ngx_http_server_name_t,
}
#[test]
fn bindgen_test_layout_ngx_http_virtual_names_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_virtual_names_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_virtual_names_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_http_virtual_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_virtual_names_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_virtual_names_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_virtual_names_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nregex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_virtual_names_t),
            "::",
            stringify!(nregex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_virtual_names_t),
            "::",
            stringify!(regex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_addr_conf_s {
    pub default_server: *mut ngx_http_core_srv_conf_t,
    pub virtual_names: *mut ngx_http_virtual_names_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_addr_conf_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_addr_conf_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_addr_conf_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_addr_conf_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_addr_conf_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_addr_conf_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_server) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_addr_conf_s),
            "::",
            stringify!(default_server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_names) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_addr_conf_s),
            "::",
            stringify!(virtual_names)
        )
    );
}
impl ngx_http_addr_conf_s {
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn http2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_http2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ssl: ::std::os::raw::c_uint,
        http2: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let http2: u32 = unsafe { ::std::mem::transmute(http2) };
            http2 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_in_addr_t {
    pub addr: in_addr_t,
    pub conf: ngx_http_addr_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_http_in_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_in_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_in_addr_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_in_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_in_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_in_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_in_addr_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_in_addr_t),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_http_in6_addr_t {
    pub addr6: in6_addr,
    pub conf: ngx_http_addr_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_http_in6_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_in6_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_in6_addr_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_http_in6_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_in6_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_in6_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_in6_addr_t),
            "::",
            stringify!(addr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_in6_addr_t),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_port_t {
    pub addrs: *mut ::std::os::raw::c_void,
    pub naddrs: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_port_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_port_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_port_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_port_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_port_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_port_t),
            "::",
            stringify!(naddrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_conf_port_t {
    pub family: ngx_int_t,
    pub port: in_port_t,
    pub addrs: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_http_conf_port_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_conf_port_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_conf_port_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_http_conf_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_conf_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_conf_port_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_port_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_port_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_port_t),
            "::",
            stringify!(addrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_conf_addr_t {
    pub opt: ngx_http_listen_opt_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub hash: ngx_hash_t,
    pub wc_head: *mut ngx_hash_wildcard_t,
    pub wc_tail: *mut ngx_hash_wildcard_t,
    pub nregex: ngx_uint_t,
    pub regex: *mut ngx_http_server_name_t,
    pub default_server: *mut ngx_http_core_srv_conf_t,
    pub servers: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_http_conf_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_conf_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_conf_addr_t>(),
        168usize,
        concat!("Size of: ", stringify!(ngx_http_conf_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_conf_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_conf_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_head) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(wc_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_tail) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(wc_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nregex) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(nregex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_server) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(default_server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_conf_addr_t),
            "::",
            stringify!(servers)
        )
    );
}
impl ngx_http_conf_addr_t {
    #[inline]
    pub fn protocols(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_protocols(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn protocols_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_protocols_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn protocols_changed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_protocols_changed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        protocols: ::std::os::raw::c_uint,
        protocols_set: ::std::os::raw::c_uint,
        protocols_changed: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let protocols: u32 = unsafe { ::std::mem::transmute(protocols) };
            protocols as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let protocols_set: u32 = unsafe { ::std::mem::transmute(protocols_set) };
            protocols_set as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let protocols_changed: u32 = unsafe { ::std::mem::transmute(protocols_changed) };
            protocols_changed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_http_err_page_t {
    pub status: ngx_int_t,
    pub overwrite: ngx_int_t,
    pub value: ngx_http_complex_value_t,
    pub args: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_err_page_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_err_page_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_err_page_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_http_err_page_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_err_page_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_err_page_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_err_page_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overwrite) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_err_page_t),
            "::",
            stringify!(overwrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_err_page_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_err_page_t),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_core_loc_conf_s {
    pub name: ngx_str_t,
    pub escaped_name: ngx_str_t,
    pub regex: *mut ngx_http_regex_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub static_locations: *mut ngx_http_location_tree_node_t,
    pub regex_locations: *mut *mut ngx_http_core_loc_conf_t,
    pub loc_conf: *mut *mut ::std::os::raw::c_void,
    pub limit_except: u32,
    pub limit_except_loc_conf: *mut *mut ::std::os::raw::c_void,
    pub handler: ngx_http_handler_pt,
    pub alias: usize,
    pub root: ngx_str_t,
    pub post_action: ngx_str_t,
    pub root_lengths: *mut ngx_array_t,
    pub root_values: *mut ngx_array_t,
    pub types: *mut ngx_array_t,
    pub types_hash: ngx_hash_t,
    pub default_type: ngx_str_t,
    pub client_max_body_size: off_t,
    pub directio: off_t,
    pub directio_alignment: off_t,
    pub client_body_buffer_size: usize,
    pub send_lowat: usize,
    pub postpone_output: usize,
    pub sendfile_max_chunk: usize,
    pub read_ahead: usize,
    pub subrequest_output_buffer_size: usize,
    pub limit_rate: *mut ngx_http_complex_value_t,
    pub limit_rate_after: *mut ngx_http_complex_value_t,
    pub client_body_timeout: ngx_msec_t,
    pub send_timeout: ngx_msec_t,
    pub keepalive_time: ngx_msec_t,
    pub keepalive_timeout: ngx_msec_t,
    pub lingering_time: ngx_msec_t,
    pub lingering_timeout: ngx_msec_t,
    pub resolver_timeout: ngx_msec_t,
    pub auth_delay: ngx_msec_t,
    pub resolver: *mut ngx_resolver_t,
    pub keepalive_header: time_t,
    pub keepalive_requests: ngx_uint_t,
    pub keepalive_disable: ngx_uint_t,
    pub satisfy: ngx_uint_t,
    pub lingering_close: ngx_uint_t,
    pub if_modified_since: ngx_uint_t,
    pub max_ranges: ngx_uint_t,
    pub client_body_in_file_only: ngx_uint_t,
    pub client_body_in_single_buffer: ngx_flag_t,
    pub internal: ngx_flag_t,
    pub sendfile: ngx_flag_t,
    pub aio: ngx_flag_t,
    pub aio_write: ngx_flag_t,
    pub tcp_nopush: ngx_flag_t,
    pub tcp_nodelay: ngx_flag_t,
    pub reset_timedout_connection: ngx_flag_t,
    pub absolute_redirect: ngx_flag_t,
    pub server_name_in_redirect: ngx_flag_t,
    pub port_in_redirect: ngx_flag_t,
    pub msie_padding: ngx_flag_t,
    pub msie_refresh: ngx_flag_t,
    pub log_not_found: ngx_flag_t,
    pub log_subrequest: ngx_flag_t,
    pub recursive_error_pages: ngx_flag_t,
    pub server_tokens: ngx_uint_t,
    pub chunked_transfer_encoding: ngx_flag_t,
    pub etag: ngx_flag_t,
    pub gzip_vary: ngx_flag_t,
    pub gzip_http_version: ngx_uint_t,
    pub gzip_proxied: ngx_uint_t,
    pub gzip_disable: *mut ngx_array_t,
    pub thread_pool: *mut ngx_thread_pool_t,
    pub thread_pool_value: *mut ngx_http_complex_value_t,
    pub disable_symlinks: ngx_uint_t,
    pub disable_symlinks_from: *mut ngx_http_complex_value_t,
    pub error_pages: *mut ngx_array_t,
    pub client_body_temp_path: *mut ngx_path_t,
    pub open_file_cache: *mut ngx_open_file_cache_t,
    pub open_file_cache_valid: time_t,
    pub open_file_cache_min_uses: ngx_uint_t,
    pub open_file_cache_errors: ngx_flag_t,
    pub open_file_cache_events: ngx_flag_t,
    pub error_log: *mut ngx_log_t,
    pub types_hash_max_size: ngx_uint_t,
    pub types_hash_bucket_size: ngx_uint_t,
    pub locations: *mut ngx_queue_t,
}
#[test]
fn bindgen_test_layout_ngx_http_core_loc_conf_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_core_loc_conf_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_core_loc_conf_s>(),
        720usize,
        concat!("Size of: ", stringify!(ngx_http_core_loc_conf_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_core_loc_conf_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_core_loc_conf_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).escaped_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(escaped_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_locations) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(static_locations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex_locations) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(regex_locations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc_conf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(loc_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_except) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(limit_except)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_except_loc_conf) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(limit_except_loc_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_action) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(post_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_lengths) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(root_lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_values) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(root_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types_hash) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(types_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_type) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(default_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_max_body_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(client_max_body_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directio) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(directio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).directio_alignment) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(directio_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_body_buffer_size) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(client_body_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_lowat) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(send_lowat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postpone_output) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(postpone_output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendfile_max_chunk) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(sendfile_max_chunk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_ahead) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(read_ahead)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).subrequest_output_buffer_size) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(subrequest_output_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_rate) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(limit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_rate_after) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(limit_rate_after)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_body_timeout) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(client_body_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_timeout) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(send_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalive_time) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(keepalive_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalive_timeout) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(keepalive_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lingering_time) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(lingering_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lingering_timeout) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(lingering_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver_timeout) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(resolver_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_delay) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(auth_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(resolver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalive_header) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(keepalive_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalive_requests) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(keepalive_requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalive_disable) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(keepalive_disable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satisfy) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(satisfy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lingering_close) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(lingering_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_modified_since) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(if_modified_since)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ranges) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(max_ranges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_body_in_file_only) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(client_body_in_file_only)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).client_body_in_single_buffer) as usize - ptr as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(client_body_in_single_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendfile) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(sendfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(aio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aio_write) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(aio_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_nopush) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(tcp_nopush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_nodelay) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(tcp_nodelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset_timedout_connection) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(reset_timedout_connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolute_redirect) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(absolute_redirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_name_in_redirect) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(server_name_in_redirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_in_redirect) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(port_in_redirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msie_padding) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(msie_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msie_refresh) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(msie_refresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_not_found) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(log_not_found)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_subrequest) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(log_subrequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursive_error_pages) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(recursive_error_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_tokens) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(server_tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunked_transfer_encoding) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(chunked_transfer_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_vary) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(gzip_vary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_http_version) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(gzip_http_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_proxied) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(gzip_proxied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_disable) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(gzip_disable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_pool) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(thread_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_pool_value) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(thread_pool_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_symlinks) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(disable_symlinks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_symlinks_from) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(disable_symlinks_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_pages) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(error_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_body_temp_path) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(client_body_temp_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_file_cache) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(open_file_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_file_cache_valid) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(open_file_cache_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_file_cache_min_uses) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(open_file_cache_min_uses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_file_cache_errors) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(open_file_cache_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_file_cache_events) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(open_file_cache_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_log) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(error_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types_hash_max_size) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(types_hash_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types_hash_bucket_size) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(types_hash_bucket_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locations) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_core_loc_conf_s),
            "::",
            stringify!(locations)
        )
    );
}
impl ngx_http_core_loc_conf_s {
    #[inline]
    pub fn noname(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_noname(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lmt_excpt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lmt_excpt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn named(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_named(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exact_match(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exact_match(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn noregex(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_noregex(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_redirect(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_auto_redirect(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gzip_disable_msie6(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_gzip_disable_msie6(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn gzip_disable_degradation(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_gzip_disable_degradation(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        noname: ::std::os::raw::c_uint,
        lmt_excpt: ::std::os::raw::c_uint,
        named: ::std::os::raw::c_uint,
        exact_match: ::std::os::raw::c_uint,
        noregex: ::std::os::raw::c_uint,
        auto_redirect: ::std::os::raw::c_uint,
        gzip_disable_msie6: ::std::os::raw::c_uint,
        gzip_disable_degradation: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let noname: u32 = unsafe { ::std::mem::transmute(noname) };
            noname as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lmt_excpt: u32 = unsafe { ::std::mem::transmute(lmt_excpt) };
            lmt_excpt as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let named: u32 = unsafe { ::std::mem::transmute(named) };
            named as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let exact_match: u32 = unsafe { ::std::mem::transmute(exact_match) };
            exact_match as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let noregex: u32 = unsafe { ::std::mem::transmute(noregex) };
            noregex as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let auto_redirect: u32 = unsafe { ::std::mem::transmute(auto_redirect) };
            auto_redirect as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let gzip_disable_msie6: u32 = unsafe { ::std::mem::transmute(gzip_disable_msie6) };
            gzip_disable_msie6 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let gzip_disable_degradation: u32 =
                unsafe { ::std::mem::transmute(gzip_disable_degradation) };
            gzip_disable_degradation as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_location_queue_t {
    pub queue: ngx_queue_t,
    pub exact: *mut ngx_http_core_loc_conf_t,
    pub inclusive: *mut ngx_http_core_loc_conf_t,
    pub name: *mut ngx_str_t,
    pub file_name: *mut u_char,
    pub line: ngx_uint_t,
    pub list: ngx_queue_t,
}
#[test]
fn bindgen_test_layout_ngx_http_location_queue_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_location_queue_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_location_queue_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_http_location_queue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_location_queue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_location_queue_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exact) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(exact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusive) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(inclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_queue_t),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_location_tree_node_s {
    pub left: *mut ngx_http_location_tree_node_t,
    pub right: *mut ngx_http_location_tree_node_t,
    pub tree: *mut ngx_http_location_tree_node_t,
    pub exact: *mut ngx_http_core_loc_conf_t,
    pub inclusive: *mut ngx_http_core_loc_conf_t,
    pub len: u_short,
    pub auto_redirect: u_char,
    pub name: [u_char; 1usize],
}
#[test]
fn bindgen_test_layout_ngx_http_location_tree_node_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_location_tree_node_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_location_tree_node_s>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_http_location_tree_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_location_tree_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_location_tree_node_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exact) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(exact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inclusive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(inclusive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auto_redirect) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(auto_redirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_location_tree_node_s),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn ngx_http_core_run_phases(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_core_generic_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_core_rewrite_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_core_find_config_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_core_post_rewrite_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_core_access_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_core_post_access_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_core_content_phase(
        r: *mut ngx_http_request_t,
        ph: *mut ngx_http_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_test_content_type(
        r: *mut ngx_http_request_t,
        types_hash: *mut ngx_hash_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_http_set_content_type(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_set_exten(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_set_etag(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_weak_etag(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_send_response(
        r: *mut ngx_http_request_t,
        status: ngx_uint_t,
        ct: *mut ngx_str_t,
        cv: *mut ngx_http_complex_value_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_map_uri_to_path(
        r: *mut ngx_http_request_t,
        name: *mut ngx_str_t,
        root_length: *mut usize,
        reserved: usize,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_http_auth_basic_user(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_gzip_ok(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_subrequest(
        r: *mut ngx_http_request_t,
        uri: *mut ngx_str_t,
        args: *mut ngx_str_t,
        psr: *mut *mut ngx_http_request_t,
        ps: *mut ngx_http_post_subrequest_t,
        flags: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_internal_redirect(
        r: *mut ngx_http_request_t,
        uri: *mut ngx_str_t,
        args: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_named_location(r: *mut ngx_http_request_t, name: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_cleanup_add(r: *mut ngx_http_request_t, size: usize)
        -> *mut ngx_http_cleanup_t;
}
pub type ngx_http_output_header_filter_pt =
    ::std::option::Option<unsafe extern "C" fn(r: *mut ngx_http_request_t) -> ngx_int_t>;
pub type ngx_http_output_body_filter_pt = ::std::option::Option<
    unsafe extern "C" fn(r: *mut ngx_http_request_t, chain: *mut ngx_chain_t) -> ngx_int_t,
>;
pub type ngx_http_request_body_filter_pt = ::std::option::Option<
    unsafe extern "C" fn(r: *mut ngx_http_request_t, chain: *mut ngx_chain_t) -> ngx_int_t,
>;
extern "C" {
    pub fn ngx_http_output_filter(r: *mut ngx_http_request_t, chain: *mut ngx_chain_t)
        -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_write_filter(r: *mut ngx_http_request_t, chain: *mut ngx_chain_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_request_body_save_filter(
        r: *mut ngx_http_request_t,
        chain: *mut ngx_chain_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_set_disable_symlinks(
        r: *mut ngx_http_request_t,
        clcf: *mut ngx_http_core_loc_conf_t,
        path: *mut ngx_str_t,
        of: *mut ngx_open_file_info_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_get_forwarded_addr(
        r: *mut ngx_http_request_t,
        addr: *mut ngx_addr_t,
        headers: *mut ngx_table_elt_t,
        value: *mut ngx_str_t,
        proxies: *mut ngx_array_t,
        recursive: ::std::os::raw::c_int,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_link_multi_headers(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_http_core_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_http_max_module: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_http_core_get_method: ngx_str_t;
}
pub type ngx_http_v2_connection_t = ngx_http_v2_connection_s;
pub type ngx_http_v2_node_t = ngx_http_v2_node_s;
pub type ngx_http_v2_out_frame_t = ngx_http_v2_out_frame_s;
pub type ngx_http_v2_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        h2c: *mut ngx_http_v2_connection_t,
        pos: *mut u_char,
        end: *mut u_char,
    ) -> *mut u_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_header_t {
    pub name: ngx_str_t,
    pub value: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_v2_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_header_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_header_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_v2_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_header_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_header_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_header_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_header_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_state_t {
    pub sid: ngx_uint_t,
    pub length: usize,
    pub padding: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub header: ngx_http_v2_header_t,
    pub header_limit: usize,
    pub field_state: u_char,
    pub field_start: *mut u_char,
    pub field_end: *mut u_char,
    pub field_rest: usize,
    pub pool: *mut ngx_pool_t,
    pub stream: *mut ngx_http_v2_stream_t,
    pub buffer: [u_char; 16usize],
    pub buffer_used: usize,
    pub handler: ngx_http_v2_handler_pt,
}
#[test]
fn bindgen_test_layout_ngx_http_v2_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_state_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_state_t>(),
        152usize,
        concat!("Size of: ", stringify!(ngx_http_v2_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_limit) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(header_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(field_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_start) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(field_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(field_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_rest) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(field_rest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_used) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(buffer_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_state_t),
            "::",
            stringify!(handler)
        )
    );
}
impl ngx_http_v2_state_t {
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn incomplete(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_incomplete(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_pool(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keep_pool(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn parse_name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_parse_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn parse_value(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_parse_value(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn index(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_index(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: ::std::os::raw::c_uint,
        incomplete: ::std::os::raw::c_uint,
        keep_pool: ::std::os::raw::c_uint,
        parse_name: ::std::os::raw::c_uint,
        parse_value: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let incomplete: u32 = unsafe { ::std::mem::transmute(incomplete) };
            incomplete as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let keep_pool: u32 = unsafe { ::std::mem::transmute(keep_pool) };
            keep_pool as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let parse_name: u32 = unsafe { ::std::mem::transmute(parse_name) };
            parse_name as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let parse_value: u32 = unsafe { ::std::mem::transmute(parse_value) };
            parse_value as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let index: u32 = unsafe { ::std::mem::transmute(index) };
            index as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_hpack_t {
    pub entries: *mut *mut ngx_http_v2_header_t,
    pub added: ngx_uint_t,
    pub deleted: ngx_uint_t,
    pub reused: ngx_uint_t,
    pub allocated: ngx_uint_t,
    pub size: usize,
    pub free: usize,
    pub storage: *mut u_char,
    pub pos: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_http_v2_hpack_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_hpack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_hpack_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_http_v2_hpack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_hpack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_hpack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).added) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(added)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(deleted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reused) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(reused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_hpack_t),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_connection_s {
    pub connection: *mut ngx_connection_t,
    pub http_connection: *mut ngx_http_connection_t,
    pub total_bytes: off_t,
    pub payload_bytes: off_t,
    pub processing: ngx_uint_t,
    pub frames: ngx_uint_t,
    pub idle: ngx_uint_t,
    pub priority_limit: ngx_uint_t,
    pub pushing: ngx_uint_t,
    pub concurrent_pushes: ngx_uint_t,
    pub send_window: usize,
    pub recv_window: usize,
    pub init_window: usize,
    pub frame_size: usize,
    pub waiting: ngx_queue_t,
    pub state: ngx_http_v2_state_t,
    pub hpack: ngx_http_v2_hpack_t,
    pub pool: *mut ngx_pool_t,
    pub free_frames: *mut ngx_http_v2_out_frame_t,
    pub free_fake_connections: *mut ngx_connection_t,
    pub streams_index: *mut *mut ngx_http_v2_node_t,
    pub last_out: *mut ngx_http_v2_out_frame_t,
    pub dependencies: ngx_queue_t,
    pub closed: ngx_queue_t,
    pub closed_nodes: ngx_uint_t,
    pub last_sid: ngx_uint_t,
    pub last_push: ngx_uint_t,
    pub lingering_time: time_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_v2_connection_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_connection_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_connection_s>(),
        464usize,
        concat!("Size of: ", stringify!(ngx_http_v2_connection_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_connection_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_connection_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_connection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(http_connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_bytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(payload_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processing) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(processing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frames) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(idle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority_limit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(priority_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushing) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(pushing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).concurrent_pushes) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(concurrent_pushes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_window) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(send_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_window) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(recv_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_window) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(init_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_size) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(frame_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waiting) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(waiting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hpack) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(hpack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_frames) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(free_frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fake_connections) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(free_fake_connections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streams_index) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(streams_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_out) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(last_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(closed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closed_nodes) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(closed_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_sid) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(last_sid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_push) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(last_push)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lingering_time) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_connection_s),
            "::",
            stringify!(lingering_time)
        )
    );
}
impl ngx_http_v2_connection_s {
    #[inline]
    pub fn settings_ack(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_settings_ack(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn table_update(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_table_update(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn goaway(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_goaway(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn push_disabled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_push_disabled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        settings_ack: ::std::os::raw::c_uint,
        table_update: ::std::os::raw::c_uint,
        blocked: ::std::os::raw::c_uint,
        goaway: ::std::os::raw::c_uint,
        push_disabled: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let settings_ack: u32 = unsafe { ::std::mem::transmute(settings_ack) };
            settings_ack as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let table_update: u32 = unsafe { ::std::mem::transmute(table_update) };
            table_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let goaway: u32 = unsafe { ::std::mem::transmute(goaway) };
            goaway as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let push_disabled: u32 = unsafe { ::std::mem::transmute(push_disabled) };
            push_disabled as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_node_s {
    pub id: ngx_uint_t,
    pub index: *mut ngx_http_v2_node_t,
    pub parent: *mut ngx_http_v2_node_t,
    pub queue: ngx_queue_t,
    pub children: ngx_queue_t,
    pub reuse: ngx_queue_t,
    pub rank: ngx_uint_t,
    pub weight: ngx_uint_t,
    pub rel_weight: f64,
    pub stream: *mut ngx_http_v2_stream_t,
}
#[test]
fn bindgen_test_layout_ngx_http_v2_node_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_node_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_node_s>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_http_v2_node_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_node_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_node_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(children)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reuse) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(reuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rel_weight) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(rel_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_node_s),
            "::",
            stringify!(stream)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_stream_s {
    pub request: *mut ngx_http_request_t,
    pub connection: *mut ngx_http_v2_connection_t,
    pub node: *mut ngx_http_v2_node_t,
    pub queued: ngx_uint_t,
    pub send_window: isize,
    pub recv_window: usize,
    pub preread: *mut ngx_buf_t,
    pub frames: ngx_uint_t,
    pub free_frames: *mut ngx_http_v2_out_frame_t,
    pub free_frame_headers: *mut ngx_chain_t,
    pub free_bufs: *mut ngx_chain_t,
    pub queue: ngx_queue_t,
    pub cookies: *mut ngx_array_t,
    pub pool: *mut ngx_pool_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_v2_stream_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_stream_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_stream_s>(),
        128usize,
        concat!("Size of: ", stringify!(ngx_http_v2_stream_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_stream_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_stream_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queued) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(queued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_window) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(send_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_window) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(recv_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preread) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(preread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frames) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_frames) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(free_frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_frame_headers) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(free_frame_headers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_bufs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(free_bufs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookies) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(cookies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_stream_s),
            "::",
            stringify!(pool)
        )
    );
}
impl ngx_http_v2_stream_s {
    #[inline]
    pub fn waiting(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_waiting(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exhausted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exhausted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_closed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_closed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_closed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_out_closed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rst_sent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rst_sent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_flow_control(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_flow_control(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_data(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_data(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        waiting: ::std::os::raw::c_uint,
        blocked: ::std::os::raw::c_uint,
        exhausted: ::std::os::raw::c_uint,
        in_closed: ::std::os::raw::c_uint,
        out_closed: ::std::os::raw::c_uint,
        rst_sent: ::std::os::raw::c_uint,
        no_flow_control: ::std::os::raw::c_uint,
        skip_data: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let waiting: u32 = unsafe { ::std::mem::transmute(waiting) };
            waiting as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let exhausted: u32 = unsafe { ::std::mem::transmute(exhausted) };
            exhausted as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let in_closed: u32 = unsafe { ::std::mem::transmute(in_closed) };
            in_closed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let out_closed: u32 = unsafe { ::std::mem::transmute(out_closed) };
            out_closed as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let rst_sent: u32 = unsafe { ::std::mem::transmute(rst_sent) };
            rst_sent as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let no_flow_control: u32 = unsafe { ::std::mem::transmute(no_flow_control) };
            no_flow_control as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let skip_data: u32 = unsafe { ::std::mem::transmute(skip_data) };
            skip_data as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_v2_out_frame_s {
    pub next: *mut ngx_http_v2_out_frame_t,
    pub first: *mut ngx_chain_t,
    pub last: *mut ngx_chain_t,
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(
            h2c: *mut ngx_http_v2_connection_t,
            frame: *mut ngx_http_v2_out_frame_t,
        ) -> ngx_int_t,
    >,
    pub stream: *mut ngx_http_v2_stream_t,
    pub length: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_v2_out_frame_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_v2_out_frame_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_v2_out_frame_s>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_http_v2_out_frame_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_v2_out_frame_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_v2_out_frame_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_out_frame_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_out_frame_s),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_out_frame_s),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_out_frame_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_out_frame_s),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_v2_out_frame_s),
            "::",
            stringify!(length)
        )
    );
}
impl ngx_http_v2_out_frame_s {
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fin(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fin(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        blocked: ::std::os::raw::c_uint,
        fin: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fin: u32 = unsafe { ::std::mem::transmute(fin) };
            fin as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_http_v2_init(rev: *mut ngx_event_t);
}
extern "C" {
    pub fn ngx_http_v2_read_request_body(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_v2_read_unbuffered_request_body(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_v2_push_stream(
        parent: *mut ngx_http_v2_stream_t,
        path: *mut ngx_str_t,
    ) -> *mut ngx_http_v2_stream_t;
}
extern "C" {
    pub fn ngx_http_v2_close_stream(stream: *mut ngx_http_v2_stream_t, rc: ngx_int_t);
}
extern "C" {
    pub fn ngx_http_v2_send_output_queue(h2c: *mut ngx_http_v2_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_v2_get_static_name(index: ngx_uint_t) -> *mut ngx_str_t;
}
extern "C" {
    pub fn ngx_http_v2_get_static_value(index: ngx_uint_t) -> *mut ngx_str_t;
}
extern "C" {
    pub fn ngx_http_v2_get_indexed_header(
        h2c: *mut ngx_http_v2_connection_t,
        index: ngx_uint_t,
        name_only: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_v2_add_header(
        h2c: *mut ngx_http_v2_connection_t,
        header: *mut ngx_http_v2_header_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_v2_table_size(h2c: *mut ngx_http_v2_connection_t, size: usize) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_v2_string_encode(
        dst: *mut u_char,
        src: *mut u_char,
        len: usize,
        tmp: *mut u_char,
        lower: ngx_uint_t,
    ) -> *mut u_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_cache_valid_t {
    pub status: ngx_uint_t,
    pub valid: time_t,
}
#[test]
fn bindgen_test_layout_ngx_http_cache_valid_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_cache_valid_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_cache_valid_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_http_cache_valid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_cache_valid_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_cache_valid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_valid_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_valid_t),
            "::",
            stringify!(valid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_file_cache_node_t {
    pub node: ngx_rbtree_node_t,
    pub queue: ngx_queue_t,
    pub key: [u_char; 8usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 7usize]>,
    pub uniq: ngx_file_uniq_t,
    pub expire: time_t,
    pub valid_sec: time_t,
    pub body_start: usize,
    pub fs_size: off_t,
    pub lock_time: ngx_msec_t,
}
#[test]
fn bindgen_test_layout_ngx_http_file_cache_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_file_cache_node_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_file_cache_node_t>(),
        120usize,
        concat!("Size of: ", stringify!(ngx_http_file_cache_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_file_cache_node_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_file_cache_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniq) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(uniq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expire) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid_sec) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(valid_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_start) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(body_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_size) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(fs_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_time) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_node_t),
            "::",
            stringify!(lock_time)
        )
    );
}
impl ngx_http_file_cache_node_t {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn uses(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_uses(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn valid_msec(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_valid_msec(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn exists(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(52usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exists(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(52usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn updating(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(53usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_updating(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(53usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deleting(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(54usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deleting(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(54usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn purged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(55usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_purged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(55usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        uses: ::std::os::raw::c_uint,
        valid_msec: ::std::os::raw::c_uint,
        error: ::std::os::raw::c_uint,
        exists: ::std::os::raw::c_uint,
        updating: ::std::os::raw::c_uint,
        deleting: ::std::os::raw::c_uint,
        purged: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 7usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 7usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(20usize, 10u8, {
            let uses: u32 = unsafe { ::std::mem::transmute(uses) };
            uses as u64
        });
        __bindgen_bitfield_unit.set(32usize, 10u8, {
            let valid_msec: u32 = unsafe { ::std::mem::transmute(valid_msec) };
            valid_msec as u64
        });
        __bindgen_bitfield_unit.set(42usize, 10u8, {
            let error: u32 = unsafe { ::std::mem::transmute(error) };
            error as u64
        });
        __bindgen_bitfield_unit.set(52usize, 1u8, {
            let exists: u32 = unsafe { ::std::mem::transmute(exists) };
            exists as u64
        });
        __bindgen_bitfield_unit.set(53usize, 1u8, {
            let updating: u32 = unsafe { ::std::mem::transmute(updating) };
            updating as u64
        });
        __bindgen_bitfield_unit.set(54usize, 1u8, {
            let deleting: u32 = unsafe { ::std::mem::transmute(deleting) };
            deleting as u64
        });
        __bindgen_bitfield_unit.set(55usize, 1u8, {
            let purged: u32 = unsafe { ::std::mem::transmute(purged) };
            purged as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_cache_s {
    pub file: ngx_file_t,
    pub keys: ngx_array_t,
    pub crc32: u32,
    pub key: [u_char; 16usize],
    pub main: [u_char; 16usize],
    pub uniq: ngx_file_uniq_t,
    pub valid_sec: time_t,
    pub updating_sec: time_t,
    pub error_sec: time_t,
    pub last_modified: time_t,
    pub date: time_t,
    pub etag: ngx_str_t,
    pub vary: ngx_str_t,
    pub variant: [u_char; 16usize],
    pub buffer_size: usize,
    pub header_start: usize,
    pub body_start: usize,
    pub length: off_t,
    pub fs_size: off_t,
    pub min_uses: ngx_uint_t,
    pub error: ngx_uint_t,
    pub valid_msec: ngx_uint_t,
    pub vary_tag: ngx_uint_t,
    pub buf: *mut ngx_buf_t,
    pub file_cache: *mut ngx_http_file_cache_t,
    pub node: *mut ngx_http_file_cache_node_t,
    pub thread_task: *mut ngx_thread_task_t,
    pub lock_timeout: ngx_msec_t,
    pub lock_age: ngx_msec_t,
    pub lock_time: ngx_msec_t,
    pub wait_time: ngx_msec_t,
    pub wait_event: ngx_event_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_ngx_http_cache_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_cache_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_cache_s>(),
        648usize,
        concat!("Size of: ", stringify!(ngx_http_cache_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_cache_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_cache_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(crc32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniq) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(uniq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid_sec) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(valid_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updating_sec) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(updating_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_sec) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(error_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_modified) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(last_modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vary) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(vary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(variant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_start) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(header_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_start) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(body_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_size) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(fs_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_uses) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(min_uses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid_msec) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(valid_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vary_tag) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(vary_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_cache) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(file_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_task) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(thread_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_timeout) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(lock_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_age) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(lock_age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_time) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(lock_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_time) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(wait_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait_event) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_cache_s),
            "::",
            stringify!(wait_event)
        )
    );
}
impl ngx_http_cache_s {
    #[inline]
    pub fn lock(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lock(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn waiting(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_waiting(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn updated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_updated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn updating(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_updating(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exists(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exists(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn temp_file(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_temp_file(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn purged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_purged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reading(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reading(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn secondary(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_secondary(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_variant(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_variant(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn background(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_background(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stale_updating(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stale_updating(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stale_error(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stale_error(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lock: ::std::os::raw::c_uint,
        waiting: ::std::os::raw::c_uint,
        updated: ::std::os::raw::c_uint,
        updating: ::std::os::raw::c_uint,
        exists: ::std::os::raw::c_uint,
        temp_file: ::std::os::raw::c_uint,
        purged: ::std::os::raw::c_uint,
        reading: ::std::os::raw::c_uint,
        secondary: ::std::os::raw::c_uint,
        update_variant: ::std::os::raw::c_uint,
        background: ::std::os::raw::c_uint,
        stale_updating: ::std::os::raw::c_uint,
        stale_error: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lock: u32 = unsafe { ::std::mem::transmute(lock) };
            lock as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let waiting: u32 = unsafe { ::std::mem::transmute(waiting) };
            waiting as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let updated: u32 = unsafe { ::std::mem::transmute(updated) };
            updated as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let updating: u32 = unsafe { ::std::mem::transmute(updating) };
            updating as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let exists: u32 = unsafe { ::std::mem::transmute(exists) };
            exists as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let temp_file: u32 = unsafe { ::std::mem::transmute(temp_file) };
            temp_file as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let purged: u32 = unsafe { ::std::mem::transmute(purged) };
            purged as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reading: u32 = unsafe { ::std::mem::transmute(reading) };
            reading as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let secondary: u32 = unsafe { ::std::mem::transmute(secondary) };
            secondary as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let update_variant: u32 = unsafe { ::std::mem::transmute(update_variant) };
            update_variant as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let background: u32 = unsafe { ::std::mem::transmute(background) };
            background as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let stale_updating: u32 = unsafe { ::std::mem::transmute(stale_updating) };
            stale_updating as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let stale_error: u32 = unsafe { ::std::mem::transmute(stale_error) };
            stale_error as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_file_cache_header_t {
    pub version: ngx_uint_t,
    pub valid_sec: time_t,
    pub updating_sec: time_t,
    pub error_sec: time_t,
    pub last_modified: time_t,
    pub date: time_t,
    pub crc32: u32,
    pub valid_msec: u_short,
    pub header_start: u_short,
    pub body_start: u_short,
    pub etag_len: u_char,
    pub etag: [u_char; 128usize],
    pub vary_len: u_char,
    pub vary: [u_char; 128usize],
    pub variant: [u_char; 16usize],
}
#[test]
fn bindgen_test_layout_ngx_http_file_cache_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_file_cache_header_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_file_cache_header_t>(),
        336usize,
        concat!("Size of: ", stringify!(ngx_http_file_cache_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_file_cache_header_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_file_cache_header_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid_sec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(valid_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updating_sec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(updating_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_sec) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(error_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_modified) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(last_modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(crc32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid_msec) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(valid_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header_start) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(header_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_start) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(body_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag_len) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(etag_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vary_len) as usize - ptr as usize },
        187usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(vary_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vary) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(vary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_header_t),
            "::",
            stringify!(variant)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_file_cache_sh_t {
    pub rbtree: ngx_rbtree_t,
    pub sentinel: ngx_rbtree_node_t,
    pub queue: ngx_queue_t,
    pub cold: ngx_atomic_t,
    pub loading: ngx_atomic_t,
    pub size: off_t,
    pub count: ngx_uint_t,
    pub watermark: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_file_cache_sh_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_file_cache_sh_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_file_cache_sh_t>(),
        120usize,
        concat!("Size of: ", stringify!(ngx_http_file_cache_sh_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_file_cache_sh_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_file_cache_sh_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rbtree) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(rbtree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sentinel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(sentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cold) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(cold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loading) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(loading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).watermark) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_sh_t),
            "::",
            stringify!(watermark)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_file_cache_s {
    pub sh: *mut ngx_http_file_cache_sh_t,
    pub shpool: *mut ngx_slab_pool_t,
    pub path: *mut ngx_path_t,
    pub min_free: off_t,
    pub max_size: off_t,
    pub bsize: usize,
    pub inactive: time_t,
    pub fail_time: time_t,
    pub files: ngx_uint_t,
    pub loader_files: ngx_uint_t,
    pub last: ngx_msec_t,
    pub loader_sleep: ngx_msec_t,
    pub loader_threshold: ngx_msec_t,
    pub manager_files: ngx_uint_t,
    pub manager_sleep: ngx_msec_t,
    pub manager_threshold: ngx_msec_t,
    pub shm_zone: *mut ngx_shm_zone_t,
    pub use_temp_path: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_file_cache_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_file_cache_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_file_cache_s>(),
        144usize,
        concat!("Size of: ", stringify!(ngx_http_file_cache_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_file_cache_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_file_cache_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(sh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shpool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(shpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(min_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(inactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(fail_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_files) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(loader_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_sleep) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(loader_sleep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loader_threshold) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(loader_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manager_files) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(manager_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manager_sleep) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(manager_sleep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manager_threshold) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(manager_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_zone) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(shm_zone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_temp_path) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_file_cache_s),
            "::",
            stringify!(use_temp_path)
        )
    );
}
extern "C" {
    pub fn ngx_http_file_cache_new(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_file_cache_create(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_file_cache_create_key(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_file_cache_open(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_file_cache_set_header(
        r: *mut ngx_http_request_t,
        buf: *mut u_char,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_file_cache_update(r: *mut ngx_http_request_t, tf: *mut ngx_temp_file_t);
}
extern "C" {
    pub fn ngx_http_file_cache_update_header(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_cache_send(arg1: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_file_cache_free(c: *mut ngx_http_cache_t, tf: *mut ngx_temp_file_t);
}
extern "C" {
    pub fn ngx_http_file_cache_valid(cache_valid: *mut ngx_array_t, status: ngx_uint_t) -> time_t;
}
extern "C" {
    pub fn ngx_http_file_cache_set_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_file_cache_valid_set_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ngx_http_cache_status: [ngx_str_t; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_ssi_main_conf_t {
    pub hash: ngx_hash_t,
    pub commands: ngx_hash_keys_arrays_t,
}
#[test]
fn bindgen_test_layout_ngx_http_ssi_main_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_ssi_main_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_ssi_main_conf_t>(),
        184usize,
        concat!("Size of: ", stringify!(ngx_http_ssi_main_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_ssi_main_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_ssi_main_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_main_conf_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_main_conf_t),
            "::",
            stringify!(commands)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_ssi_ctx_t {
    pub buf: *mut ngx_buf_t,
    pub pos: *mut u_char,
    pub copy_start: *mut u_char,
    pub copy_end: *mut u_char,
    pub key: ngx_uint_t,
    pub command: ngx_str_t,
    pub params: ngx_array_t,
    pub param: *mut ngx_table_elt_t,
    pub params_array: [ngx_table_elt_t; 4usize],
    pub in_: *mut ngx_chain_t,
    pub out: *mut ngx_chain_t,
    pub last_out: *mut *mut ngx_chain_t,
    pub busy: *mut ngx_chain_t,
    pub free: *mut ngx_chain_t,
    pub state: ngx_uint_t,
    pub saved_state: ngx_uint_t,
    pub saved: usize,
    pub looked: usize,
    pub value_len: usize,
    pub variables: *mut ngx_list_t,
    pub blocks: *mut ngx_array_t,
    pub ncaptures: ngx_uint_t,
    pub captures: *mut ::std::os::raw::c_int,
    pub captures_data: *mut u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub wait: *mut ngx_http_request_t,
    pub value_buf: *mut ::std::os::raw::c_void,
    pub timefmt: ngx_str_t,
    pub errmsg: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_http_ssi_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_ssi_ctx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_ssi_ctx_t>(),
        504usize,
        concat!("Size of: ", stringify!(ngx_http_ssi_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_ssi_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_ssi_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(copy_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(copy_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_array) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(params_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_out) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(last_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved_state) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(saved_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).looked) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(looked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_len) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(value_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(captures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures_data) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(captures_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wait) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_buf) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(value_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timefmt) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(timefmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errmsg) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_ctx_t),
            "::",
            stringify!(errmsg)
        )
    );
}
impl ngx_http_ssi_ctx_t {
    #[inline]
    pub fn shared(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shared(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conditional(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_conditional(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn encoding(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_encoding(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn block(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_block(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn output(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn output_chosen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output_chosen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        shared: ::std::os::raw::c_uint,
        conditional: ::std::os::raw::c_uint,
        encoding: ::std::os::raw::c_uint,
        block: ::std::os::raw::c_uint,
        output: ::std::os::raw::c_uint,
        output_chosen: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let shared: u32 = unsafe { ::std::mem::transmute(shared) };
            shared as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let conditional: u32 = unsafe { ::std::mem::transmute(conditional) };
            conditional as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let encoding: u32 = unsafe { ::std::mem::transmute(encoding) };
            encoding as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let block: u32 = unsafe { ::std::mem::transmute(block) };
            block as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let output: u32 = unsafe { ::std::mem::transmute(output) };
            output as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let output_chosen: u32 = unsafe { ::std::mem::transmute(output_chosen) };
            output_chosen as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_http_ssi_command_pt = ::std::option::Option<
    unsafe extern "C" fn(
        r: *mut ngx_http_request_t,
        ctx: *mut ngx_http_ssi_ctx_t,
        arg1: *mut *mut ngx_str_t,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_ssi_param_t {
    pub name: ngx_str_t,
    pub index: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_ssi_param_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_ssi_param_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_ssi_param_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_http_ssi_param_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_ssi_param_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_ssi_param_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_param_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_param_t),
            "::",
            stringify!(index)
        )
    );
}
impl ngx_http_ssi_param_t {
    #[inline]
    pub fn mandatory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mandatory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn multiple(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multiple(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mandatory: ::std::os::raw::c_uint,
        multiple: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mandatory: u32 = unsafe { ::std::mem::transmute(mandatory) };
            mandatory as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let multiple: u32 = unsafe { ::std::mem::transmute(multiple) };
            multiple as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_ssi_command_t {
    pub name: ngx_str_t,
    pub handler: ngx_http_ssi_command_pt,
    pub params: *mut ngx_http_ssi_param_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_http_ssi_command_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_ssi_command_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_ssi_command_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_http_ssi_command_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_ssi_command_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_ssi_command_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_command_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_command_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssi_command_t),
            "::",
            stringify!(params)
        )
    );
}
impl ngx_http_ssi_command_t {
    #[inline]
    pub fn conditional(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_conditional(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn block(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_block(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flush(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flush(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        conditional: ::std::os::raw::c_uint,
        block: ::std::os::raw::c_uint,
        flush: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let conditional: u32 = unsafe { ::std::mem::transmute(conditional) };
            conditional as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let block: u32 = unsafe { ::std::mem::transmute(block) };
            block as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let flush: u32 = unsafe { ::std::mem::transmute(flush) };
            flush as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut ngx_http_ssi_filter_module: ngx_module_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_ssl_srv_conf_t {
    pub enable: ngx_flag_t,
    pub ssl: ngx_ssl_t,
    pub prefer_server_ciphers: ngx_flag_t,
    pub early_data: ngx_flag_t,
    pub reject_handshake: ngx_flag_t,
    pub protocols: ngx_uint_t,
    pub verify: ngx_uint_t,
    pub verify_depth: ngx_uint_t,
    pub buffer_size: usize,
    pub builtin_session_cache: isize,
    pub session_timeout: time_t,
    pub certificates: *mut ngx_array_t,
    pub certificate_keys: *mut ngx_array_t,
    pub certificate_values: *mut ngx_array_t,
    pub certificate_key_values: *mut ngx_array_t,
    pub dhparam: ngx_str_t,
    pub ecdh_curve: ngx_str_t,
    pub client_certificate: ngx_str_t,
    pub trusted_certificate: ngx_str_t,
    pub crl: ngx_str_t,
    pub ciphers: ngx_str_t,
    pub passwords: *mut ngx_array_t,
    pub conf_commands: *mut ngx_array_t,
    pub shm_zone: *mut ngx_shm_zone_t,
    pub session_tickets: ngx_flag_t,
    pub session_ticket_keys: *mut ngx_array_t,
    pub ocsp: ngx_uint_t,
    pub ocsp_responder: ngx_str_t,
    pub ocsp_cache_zone: *mut ngx_shm_zone_t,
    pub stapling: ngx_flag_t,
    pub stapling_verify: ngx_flag_t,
    pub stapling_file: ngx_str_t,
    pub stapling_responder: ngx_str_t,
    pub file: *mut u_char,
    pub line: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_http_ssl_srv_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_ssl_srv_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_ssl_srv_conf_t>(),
        368usize,
        concat!("Size of: ", stringify!(ngx_http_ssl_srv_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_ssl_srv_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_ssl_srv_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(ssl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefer_server_ciphers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(prefer_server_ciphers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).early_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(early_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reject_handshake) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(reject_handshake)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocols) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(protocols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify_depth) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(verify_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).builtin_session_cache) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(builtin_session_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_timeout) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(session_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificates) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(certificates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_keys) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(certificate_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_values) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(certificate_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_key_values) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(certificate_key_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dhparam) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(dhparam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecdh_curve) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(ecdh_curve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_certificate) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(client_certificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trusted_certificate) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(trusted_certificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crl) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(crl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ciphers) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(ciphers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passwords) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(passwords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_commands) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(conf_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_zone) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(shm_zone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_tickets) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(session_tickets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_ticket_keys) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(session_ticket_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ocsp) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(ocsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ocsp_responder) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(ocsp_responder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ocsp_cache_zone) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(ocsp_cache_zone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stapling) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(stapling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stapling_verify) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(stapling_verify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stapling_file) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(stapling_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stapling_responder) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(stapling_responder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_ssl_srv_conf_t),
            "::",
            stringify!(line)
        )
    );
}
extern "C" {
    pub static mut ngx_http_ssl_module: ngx_module_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_log_ctx_s {
    pub connection: *mut ngx_connection_t,
    pub request: *mut ngx_http_request_t,
    pub current_request: *mut ngx_http_request_t,
}
#[test]
fn bindgen_test_layout_ngx_http_log_ctx_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_log_ctx_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_log_ctx_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_log_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_log_ctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_log_ctx_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_log_ctx_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_log_ctx_s),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_request) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_log_ctx_s),
            "::",
            stringify!(current_request)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_chunked_s {
    pub state: ngx_uint_t,
    pub size: off_t,
    pub length: off_t,
}
#[test]
fn bindgen_test_layout_ngx_http_chunked_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_chunked_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_chunked_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_http_chunked_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_chunked_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_chunked_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_chunked_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_chunked_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_chunked_s),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_http_status_t {
    pub http_version: ngx_uint_t,
    pub code: ngx_uint_t,
    pub count: ngx_uint_t,
    pub start: *mut u_char,
    pub end: *mut u_char,
}
#[test]
fn bindgen_test_layout_ngx_http_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_http_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_http_status_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_http_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_http_status_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_http_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).http_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_status_t),
            "::",
            stringify!(http_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_status_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_status_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_status_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_http_status_t),
            "::",
            stringify!(end)
        )
    );
}
extern "C" {
    pub fn ngx_http_add_location(
        cf: *mut ngx_conf_t,
        locations: *mut *mut ngx_queue_t,
        clcf: *mut ngx_http_core_loc_conf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_add_listen(
        cf: *mut ngx_conf_t,
        cscf: *mut ngx_http_core_srv_conf_t,
        lsopt: *mut ngx_http_listen_opt_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_init_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_http_close_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_http_ssl_servername(
        ssl_conn: *mut SSL,
        ad: *mut ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngx_http_ssl_certificate(
        ssl_conn: *mut SSL,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngx_http_parse_request_line(r: *mut ngx_http_request_t, b: *mut ngx_buf_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_parse_uri(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_parse_complex_uri(
        r: *mut ngx_http_request_t,
        merge_slashes: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_parse_status_line(
        r: *mut ngx_http_request_t,
        b: *mut ngx_buf_t,
        status: *mut ngx_http_status_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_parse_unsafe_uri(
        r: *mut ngx_http_request_t,
        uri: *mut ngx_str_t,
        args: *mut ngx_str_t,
        flags: *mut ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_parse_header_line(
        r: *mut ngx_http_request_t,
        b: *mut ngx_buf_t,
        allow_underscores: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_parse_multi_header_lines(
        r: *mut ngx_http_request_t,
        headers: *mut ngx_table_elt_t,
        name: *mut ngx_str_t,
        value: *mut ngx_str_t,
    ) -> *mut ngx_table_elt_t;
}
extern "C" {
    pub fn ngx_http_parse_set_cookie_lines(
        r: *mut ngx_http_request_t,
        headers: *mut ngx_table_elt_t,
        name: *mut ngx_str_t,
        value: *mut ngx_str_t,
    ) -> *mut ngx_table_elt_t;
}
extern "C" {
    pub fn ngx_http_arg(
        r: *mut ngx_http_request_t,
        name: *mut u_char,
        len: usize,
        value: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_split_args(
        r: *mut ngx_http_request_t,
        uri: *mut ngx_str_t,
        args: *mut ngx_str_t,
    );
}
extern "C" {
    pub fn ngx_http_parse_chunked(
        r: *mut ngx_http_request_t,
        b: *mut ngx_buf_t,
        ctx: *mut ngx_http_chunked_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_create_request(c: *mut ngx_connection_t) -> *mut ngx_http_request_t;
}
extern "C" {
    pub fn ngx_http_process_request_uri(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_process_request_header(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_process_request(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_update_location_config(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_handler(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_run_posted_requests(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_http_post_request(
        r: *mut ngx_http_request_t,
        pr: *mut ngx_http_posted_request_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_finalize_request(r: *mut ngx_http_request_t, rc: ngx_int_t);
}
extern "C" {
    pub fn ngx_http_free_request(r: *mut ngx_http_request_t, rc: ngx_int_t);
}
extern "C" {
    pub fn ngx_http_empty_handler(wev: *mut ngx_event_t);
}
extern "C" {
    pub fn ngx_http_request_empty_handler(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_send_special(r: *mut ngx_http_request_t, flags: ngx_uint_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_read_client_request_body(
        r: *mut ngx_http_request_t,
        post_handler: ngx_http_client_body_handler_pt,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_read_unbuffered_request_body(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_send_header(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_special_response_handler(
        r: *mut ngx_http_request_t,
        error: ngx_int_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_filter_finalize_request(
        r: *mut ngx_http_request_t,
        m: *mut ngx_module_t,
        error: ngx_int_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_clean_header(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_discard_request_body(r: *mut ngx_http_request_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_discarded_request_body_handler(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_block_reading(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_test_reading(r: *mut ngx_http_request_t);
}
extern "C" {
    pub fn ngx_http_types_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_merge_types(
        cf: *mut ngx_conf_t,
        keys: *mut *mut ngx_array_t,
        types_hash: *mut ngx_hash_t,
        prev_keys: *mut *mut ngx_array_t,
        prev_types_hash: *mut ngx_hash_t,
        default_types: *mut ngx_str_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_http_set_default_types(
        cf: *mut ngx_conf_t,
        types: *mut *mut ngx_array_t,
        default_type: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_huff_decode(
        state: *mut u_char,
        src: *mut u_char,
        len: usize,
        dst: *mut *mut u_char,
        last: ngx_uint_t,
        log: *mut ngx_log_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_http_huff_encode(
        src: *mut u_char,
        len: usize,
        dst: *mut u_char,
        lower: ngx_uint_t,
    ) -> usize;
}
extern "C" {
    pub static mut ngx_http_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_http_html_default_types: [ngx_str_t; 0usize];
}
extern "C" {
    pub static mut ngx_http_top_header_filter: ngx_http_output_header_filter_pt;
}
extern "C" {
    pub static mut ngx_http_top_body_filter: ngx_http_output_body_filter_pt;
}
extern "C" {
    pub static mut ngx_http_top_request_body_filter: ngx_http_request_body_filter_pt;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_conf_ctx_t {
    pub main_conf: *mut *mut ::std::os::raw::c_void,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_mail_conf_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_conf_ctx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_conf_ctx_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_mail_conf_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_conf_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_conf_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_conf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_conf_ctx_t),
            "::",
            stringify!(main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_conf_ctx_t),
            "::",
            stringify!(srv_conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_listen_t {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub addr_text: ngx_str_t,
    pub ctx: *mut ngx_mail_conf_ctx_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tcp_keepidle: ::std::os::raw::c_int,
    pub tcp_keepintvl: ::std::os::raw::c_int,
    pub tcp_keepcnt: ::std::os::raw::c_int,
    pub backlog: ::std::os::raw::c_int,
    pub rcvbuf: ::std::os::raw::c_int,
    pub sndbuf: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ngx_mail_listen_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_listen_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_listen_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_mail_listen_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_listen_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_listen_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(addr_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepidle) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(tcp_keepidle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepintvl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(tcp_keepintvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepcnt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(tcp_keepcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(backlog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcvbuf) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(rcvbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sndbuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_listen_t),
            "::",
            stringify!(sndbuf)
        )
    );
}
impl ngx_mail_listen_t {
    #[inline]
    pub fn bind(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wildcard(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wildcard(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipv6only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv6only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn so_keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_so_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bind: ::std::os::raw::c_uint,
        wildcard: ::std::os::raw::c_uint,
        ssl: ::std::os::raw::c_uint,
        ipv6only: ::std::os::raw::c_uint,
        so_keepalive: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bind: u32 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wildcard: u32 = unsafe { ::std::mem::transmute(wildcard) };
            wildcard as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ipv6only: u32 = unsafe { ::std::mem::transmute(ipv6only) };
            ipv6only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let so_keepalive: u32 = unsafe { ::std::mem::transmute(so_keepalive) };
            so_keepalive as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_addr_conf_t {
    pub ctx: *mut ngx_mail_conf_ctx_t,
    pub addr_text: ngx_str_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_mail_addr_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_addr_conf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_addr_conf_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_mail_addr_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_addr_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_addr_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_addr_conf_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_addr_conf_t),
            "::",
            stringify!(addr_text)
        )
    );
}
impl ngx_mail_addr_conf_t {
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ssl: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_in_addr_t {
    pub addr: in_addr_t,
    pub conf: ngx_mail_addr_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_in_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_in_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_in_addr_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_mail_in_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_in_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_in_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_in_addr_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_in_addr_t),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_mail_in6_addr_t {
    pub addr6: in6_addr,
    pub conf: ngx_mail_addr_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_in6_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_in6_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_in6_addr_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_mail_in6_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_in6_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_in6_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_in6_addr_t),
            "::",
            stringify!(addr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_in6_addr_t),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_port_t {
    pub addrs: *mut ::std::os::raw::c_void,
    pub naddrs: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_port_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_port_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_port_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_mail_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_port_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_port_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_port_t),
            "::",
            stringify!(naddrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_conf_port_t {
    pub family: ::std::os::raw::c_int,
    pub port: in_port_t,
    pub addrs: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_conf_port_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_conf_port_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_conf_port_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_mail_conf_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_conf_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_conf_port_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_conf_port_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_conf_port_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_conf_port_t),
            "::",
            stringify!(addrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_conf_addr_t {
    pub opt: ngx_mail_listen_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_conf_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_conf_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_conf_addr_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_mail_conf_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_conf_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_conf_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_conf_addr_t),
            "::",
            stringify!(opt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_core_main_conf_t {
    pub servers: ngx_array_t,
    pub listen: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_core_main_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_core_main_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_core_main_conf_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_mail_core_main_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_core_main_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_core_main_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_main_conf_t),
            "::",
            stringify!(servers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_main_conf_t),
            "::",
            stringify!(listen)
        )
    );
}
pub type ngx_mail_protocol_t = ngx_mail_protocol_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_core_srv_conf_t {
    pub protocol: *mut ngx_mail_protocol_t,
    pub timeout: ngx_msec_t,
    pub resolver_timeout: ngx_msec_t,
    pub max_errors: ngx_uint_t,
    pub server_name: ngx_str_t,
    pub file_name: *mut u_char,
    pub line: ngx_uint_t,
    pub resolver: *mut ngx_resolver_t,
    pub error_log: *mut ngx_log_t,
    pub ctx: *mut ngx_mail_conf_ctx_t,
    pub listen: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_core_srv_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_core_srv_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_core_srv_conf_t>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_mail_core_srv_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_core_srv_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_core_srv_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver_timeout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(resolver_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_errors) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(max_errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(server_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(resolver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_log) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(error_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listen) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_core_srv_conf_t),
            "::",
            stringify!(listen)
        )
    );
}
pub const ngx_pop3_state_e_ngx_pop3_start: ngx_pop3_state_e = 0;
pub const ngx_pop3_state_e_ngx_pop3_user: ngx_pop3_state_e = 1;
pub const ngx_pop3_state_e_ngx_pop3_passwd: ngx_pop3_state_e = 2;
pub const ngx_pop3_state_e_ngx_pop3_auth_login_username: ngx_pop3_state_e = 3;
pub const ngx_pop3_state_e_ngx_pop3_auth_login_password: ngx_pop3_state_e = 4;
pub const ngx_pop3_state_e_ngx_pop3_auth_plain: ngx_pop3_state_e = 5;
pub const ngx_pop3_state_e_ngx_pop3_auth_cram_md5: ngx_pop3_state_e = 6;
pub const ngx_pop3_state_e_ngx_pop3_auth_external: ngx_pop3_state_e = 7;
pub type ngx_pop3_state_e = ::std::os::raw::c_uint;
pub const ngx_imap_state_e_ngx_imap_start: ngx_imap_state_e = 0;
pub const ngx_imap_state_e_ngx_imap_auth_login_username: ngx_imap_state_e = 1;
pub const ngx_imap_state_e_ngx_imap_auth_login_password: ngx_imap_state_e = 2;
pub const ngx_imap_state_e_ngx_imap_auth_plain: ngx_imap_state_e = 3;
pub const ngx_imap_state_e_ngx_imap_auth_cram_md5: ngx_imap_state_e = 4;
pub const ngx_imap_state_e_ngx_imap_auth_external: ngx_imap_state_e = 5;
pub const ngx_imap_state_e_ngx_imap_login: ngx_imap_state_e = 6;
pub const ngx_imap_state_e_ngx_imap_user: ngx_imap_state_e = 7;
pub const ngx_imap_state_e_ngx_imap_passwd: ngx_imap_state_e = 8;
pub type ngx_imap_state_e = ::std::os::raw::c_uint;
pub const ngx_smtp_state_e_ngx_smtp_start: ngx_smtp_state_e = 0;
pub const ngx_smtp_state_e_ngx_smtp_auth_login_username: ngx_smtp_state_e = 1;
pub const ngx_smtp_state_e_ngx_smtp_auth_login_password: ngx_smtp_state_e = 2;
pub const ngx_smtp_state_e_ngx_smtp_auth_plain: ngx_smtp_state_e = 3;
pub const ngx_smtp_state_e_ngx_smtp_auth_cram_md5: ngx_smtp_state_e = 4;
pub const ngx_smtp_state_e_ngx_smtp_auth_external: ngx_smtp_state_e = 5;
pub const ngx_smtp_state_e_ngx_smtp_helo: ngx_smtp_state_e = 6;
pub const ngx_smtp_state_e_ngx_smtp_helo_xclient: ngx_smtp_state_e = 7;
pub const ngx_smtp_state_e_ngx_smtp_helo_auth: ngx_smtp_state_e = 8;
pub const ngx_smtp_state_e_ngx_smtp_helo_from: ngx_smtp_state_e = 9;
pub const ngx_smtp_state_e_ngx_smtp_xclient: ngx_smtp_state_e = 10;
pub const ngx_smtp_state_e_ngx_smtp_xclient_from: ngx_smtp_state_e = 11;
pub const ngx_smtp_state_e_ngx_smtp_xclient_helo: ngx_smtp_state_e = 12;
pub const ngx_smtp_state_e_ngx_smtp_xclient_auth: ngx_smtp_state_e = 13;
pub const ngx_smtp_state_e_ngx_smtp_from: ngx_smtp_state_e = 14;
pub const ngx_smtp_state_e_ngx_smtp_to: ngx_smtp_state_e = 15;
pub type ngx_smtp_state_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_proxy_ctx_t {
    pub upstream: ngx_peer_connection_t,
    pub buffer: *mut ngx_buf_t,
    pub proxy_protocol: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_proxy_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_proxy_ctx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_proxy_ctx_t>(),
        160usize,
        concat!("Size of: ", stringify!(ngx_mail_proxy_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_proxy_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_proxy_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_proxy_ctx_t),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_proxy_ctx_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy_protocol) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_proxy_ctx_t),
            "::",
            stringify!(proxy_protocol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_session_t {
    pub signature: u32,
    pub connection: *mut ngx_connection_t,
    pub out: ngx_str_t,
    pub buffer: *mut ngx_buf_t,
    pub ctx: *mut *mut ::std::os::raw::c_void,
    pub main_conf: *mut *mut ::std::os::raw::c_void,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
    pub resolver_ctx: *mut ngx_resolver_ctx_t,
    pub proxy: *mut ngx_mail_proxy_ctx_t,
    pub mail_state: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub login: ngx_str_t,
    pub passwd: ngx_str_t,
    pub salt: ngx_str_t,
    pub tag: ngx_str_t,
    pub tagged_line: ngx_str_t,
    pub text: ngx_str_t,
    pub addr_text: *mut ngx_str_t,
    pub host: ngx_str_t,
    pub smtp_helo: ngx_str_t,
    pub smtp_from: ngx_str_t,
    pub smtp_to: ngx_str_t,
    pub cmd: ngx_str_t,
    pub command: ngx_uint_t,
    pub args: ngx_array_t,
    pub errors: ngx_uint_t,
    pub login_attempt: ngx_uint_t,
    pub state: ngx_uint_t,
    pub tag_start: *mut u_char,
    pub cmd_start: *mut u_char,
    pub arg_start: *mut u_char,
    pub literal_len: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_session_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_session_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_session_t>(),
        384usize,
        concat!("Size of: ", stringify!(ngx_mail_session_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_session_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_session_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_conf) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver_ctx) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(resolver_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(proxy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mail_state) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(mail_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).login) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(login)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passwd) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).salt) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(salt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagged_line) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(tagged_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(addr_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smtp_helo) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(smtp_helo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smtp_from) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(smtp_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smtp_to) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(smtp_to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(errors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).login_attempt) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(login_attempt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag_start) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(tag_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_start) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(cmd_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_start) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(arg_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).literal_len) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_session_t),
            "::",
            stringify!(literal_len)
        )
    );
}
impl ngx_mail_session_t {
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quoted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quoted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn backslash(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_backslash(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_sync_literal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_sync_literal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn starttls(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_starttls(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn esmtp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_esmtp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth_method(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_auth_method(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn auth_wait(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_auth_wait(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ssl: ::std::os::raw::c_uint,
        protocol: ::std::os::raw::c_uint,
        blocked: ::std::os::raw::c_uint,
        quit: ::std::os::raw::c_uint,
        quoted: ::std::os::raw::c_uint,
        backslash: ::std::os::raw::c_uint,
        no_sync_literal: ::std::os::raw::c_uint,
        starttls: ::std::os::raw::c_uint,
        esmtp: ::std::os::raw::c_uint,
        auth_method: ::std::os::raw::c_uint,
        auth_wait: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let protocol: u32 = unsafe { ::std::mem::transmute(protocol) };
            protocol as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let quit: u32 = unsafe { ::std::mem::transmute(quit) };
            quit as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let quoted: u32 = unsafe { ::std::mem::transmute(quoted) };
            quoted as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let backslash: u32 = unsafe { ::std::mem::transmute(backslash) };
            backslash as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let no_sync_literal: u32 = unsafe { ::std::mem::transmute(no_sync_literal) };
            no_sync_literal as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let starttls: u32 = unsafe { ::std::mem::transmute(starttls) };
            starttls as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let esmtp: u32 = unsafe { ::std::mem::transmute(esmtp) };
            esmtp as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let auth_method: u32 = unsafe { ::std::mem::transmute(auth_method) };
            auth_method as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let auth_wait: u32 = unsafe { ::std::mem::transmute(auth_wait) };
            auth_wait as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_log_ctx_t {
    pub client: *mut ngx_str_t,
    pub session: *mut ngx_mail_session_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_log_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_log_ctx_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_log_ctx_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_mail_log_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_log_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_log_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_log_ctx_t),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_log_ctx_t),
            "::",
            stringify!(session)
        )
    );
}
pub type ngx_mail_init_session_pt = ::std::option::Option<
    unsafe extern "C" fn(s: *mut ngx_mail_session_t, c: *mut ngx_connection_t),
>;
pub type ngx_mail_init_protocol_pt =
    ::std::option::Option<unsafe extern "C" fn(rev: *mut ngx_event_t)>;
pub type ngx_mail_auth_state_pt =
    ::std::option::Option<unsafe extern "C" fn(rev: *mut ngx_event_t)>;
pub type ngx_mail_parse_command_pt =
    ::std::option::Option<unsafe extern "C" fn(s: *mut ngx_mail_session_t) -> ngx_int_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_protocol_s {
    pub name: ngx_str_t,
    pub alpn: ngx_str_t,
    pub port: [in_port_t; 4usize],
    pub type_: ngx_uint_t,
    pub init_session: ngx_mail_init_session_pt,
    pub init_protocol: ngx_mail_init_protocol_pt,
    pub parse_command: ngx_mail_parse_command_pt,
    pub auth_state: ngx_mail_auth_state_pt,
    pub internal_server_error: ngx_str_t,
    pub cert_error: ngx_str_t,
    pub no_cert: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_mail_protocol_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_protocol_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_protocol_s>(),
        128usize,
        concat!("Size of: ", stringify!(ngx_mail_protocol_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_protocol_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_protocol_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(alpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_session) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(init_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_protocol) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(init_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_command) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(parse_command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(auth_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_server_error) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(internal_server_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cert_error) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(cert_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_cert) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_protocol_s),
            "::",
            stringify!(no_cert)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_mail_module_t {
    pub protocol: *mut ngx_mail_protocol_t,
    pub create_main_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub init_main_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub create_srv_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub merge_srv_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            prev: *mut ::std::os::raw::c_void,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_ngx_mail_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_mail_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_mail_module_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_mail_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_mail_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_mail_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_module_t),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_main_conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_module_t),
            "::",
            stringify!(create_main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_main_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_module_t),
            "::",
            stringify!(init_main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_srv_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_module_t),
            "::",
            stringify!(create_srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_srv_conf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_mail_module_t),
            "::",
            stringify!(merge_srv_conf)
        )
    );
}
extern "C" {
    pub fn ngx_mail_init_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_mail_salt(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
        cscf: *mut ngx_mail_core_srv_conf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_plain(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
        n: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_login_username(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
        n: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_login_password(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_cram_md5_salt(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
        prefix: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_cram_md5(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_external(
        s: *mut ngx_mail_session_t,
        c: *mut ngx_connection_t,
        n: ngx_uint_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth_parse(s: *mut ngx_mail_session_t, c: *mut ngx_connection_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_send(wev: *mut ngx_event_t);
}
extern "C" {
    pub fn ngx_mail_read_command(s: *mut ngx_mail_session_t, c: *mut ngx_connection_t)
        -> ngx_int_t;
}
extern "C" {
    pub fn ngx_mail_auth(s: *mut ngx_mail_session_t, c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_mail_close_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_mail_session_internal_server_error(s: *mut ngx_mail_session_t);
}
extern "C" {
    pub fn ngx_mail_log_error(log: *mut ngx_log_t, buf: *mut u_char, len: usize) -> *mut u_char;
}
extern "C" {
    pub fn ngx_mail_capabilities(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_mail_proxy_init(s: *mut ngx_mail_session_t, peer: *mut ngx_addr_t);
}
extern "C" {
    pub fn ngx_mail_auth_http_init(s: *mut ngx_mail_session_t);
}
extern "C" {
    pub fn ngx_mail_realip_handler(s: *mut ngx_mail_session_t) -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_mail_max_module: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_mail_core_module: ngx_module_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_ssl_conf_t {
    pub handshake_timeout: ngx_msec_t,
    pub prefer_server_ciphers: ngx_flag_t,
    pub ssl: ngx_ssl_t,
    pub listen: ngx_uint_t,
    pub protocols: ngx_uint_t,
    pub verify: ngx_uint_t,
    pub verify_depth: ngx_uint_t,
    pub builtin_session_cache: isize,
    pub session_timeout: time_t,
    pub certificates: *mut ngx_array_t,
    pub certificate_keys: *mut ngx_array_t,
    pub certificate_values: *mut ngx_array_t,
    pub certificate_key_values: *mut ngx_array_t,
    pub dhparam: ngx_str_t,
    pub ecdh_curve: ngx_str_t,
    pub client_certificate: ngx_str_t,
    pub trusted_certificate: ngx_str_t,
    pub crl: ngx_str_t,
    pub alpn: ngx_str_t,
    pub ciphers: ngx_str_t,
    pub passwords: *mut ngx_array_t,
    pub conf_commands: *mut ngx_array_t,
    pub shm_zone: *mut ngx_shm_zone_t,
    pub session_tickets: ngx_flag_t,
    pub session_ticket_keys: *mut ngx_array_t,
    pub file: *mut u_char,
    pub line: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_ssl_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_ssl_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_ssl_conf_t>(),
        288usize,
        concat!("Size of: ", stringify!(ngx_stream_ssl_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_ssl_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_ssl_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handshake_timeout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(handshake_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefer_server_ciphers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(prefer_server_ciphers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(ssl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(listen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocols) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(protocols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify_depth) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(verify_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).builtin_session_cache) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(builtin_session_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_timeout) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(session_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificates) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(certificates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_keys) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(certificate_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_values) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(certificate_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificate_key_values) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(certificate_key_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dhparam) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(dhparam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecdh_curve) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(ecdh_curve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_certificate) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(client_certificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trusted_certificate) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(trusted_certificate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crl) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(crl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpn) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(alpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ciphers) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(ciphers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passwords) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(passwords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_commands) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(conf_commands)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_zone) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(shm_zone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_tickets) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(session_tickets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_ticket_keys) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(session_ticket_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_ssl_conf_t),
            "::",
            stringify!(line)
        )
    );
}
extern "C" {
    pub static mut ngx_stream_ssl_module: ngx_module_t;
}
pub type ngx_stream_session_t = ngx_stream_session_s;
pub type ngx_stream_variable_value_t = ngx_variable_value_t;
pub type ngx_stream_variable_t = ngx_stream_variable_s;
pub type ngx_stream_set_variable_pt = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ngx_stream_session_t,
        v: *mut ngx_stream_variable_value_t,
        data: usize,
    ),
>;
pub type ngx_stream_get_variable_pt = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ngx_stream_session_t,
        v: *mut ngx_stream_variable_value_t,
        data: usize,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_variable_s {
    pub name: ngx_str_t,
    pub set_handler: ngx_stream_set_variable_pt,
    pub get_handler: ngx_stream_get_variable_pt,
    pub data: usize,
    pub flags: ngx_uint_t,
    pub index: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_variable_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_variable_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_variable_s>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_stream_variable_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_variable_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_variable_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_variable_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_variable_s),
            "::",
            stringify!(set_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_variable_s),
            "::",
            stringify!(get_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_variable_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_variable_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_variable_s),
            "::",
            stringify!(index)
        )
    );
}
extern "C" {
    pub fn ngx_stream_add_variable(
        cf: *mut ngx_conf_t,
        name: *mut ngx_str_t,
        flags: ngx_uint_t,
    ) -> *mut ngx_stream_variable_t;
}
extern "C" {
    pub fn ngx_stream_get_variable_index(cf: *mut ngx_conf_t, name: *mut ngx_str_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_get_indexed_variable(
        s: *mut ngx_stream_session_t,
        index: ngx_uint_t,
    ) -> *mut ngx_stream_variable_value_t;
}
extern "C" {
    pub fn ngx_stream_get_flushed_variable(
        s: *mut ngx_stream_session_t,
        index: ngx_uint_t,
    ) -> *mut ngx_stream_variable_value_t;
}
extern "C" {
    pub fn ngx_stream_get_variable(
        s: *mut ngx_stream_session_t,
        name: *mut ngx_str_t,
        key: ngx_uint_t,
    ) -> *mut ngx_stream_variable_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_regex_variable_t {
    pub capture: ngx_uint_t,
    pub index: ngx_int_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_regex_variable_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_regex_variable_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_regex_variable_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_regex_variable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_regex_variable_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_regex_variable_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_variable_t),
            "::",
            stringify!(capture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_variable_t),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_regex_t {
    pub regex: *mut ngx_regex_t,
    pub ncaptures: ngx_uint_t,
    pub variables: *mut ngx_stream_regex_variable_t,
    pub nvariables: ngx_uint_t,
    pub name: ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_regex_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_regex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_regex_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_stream_regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_regex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvariables) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_t),
            "::",
            stringify!(nvariables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_regex_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_map_regex_t {
    pub regex: *mut ngx_stream_regex_t,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_stream_map_regex_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_map_regex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_map_regex_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_map_regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_map_regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_map_regex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_map_regex_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_map_regex_t),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn ngx_stream_regex_compile(
        cf: *mut ngx_conf_t,
        rc: *mut ngx_regex_compile_t,
    ) -> *mut ngx_stream_regex_t;
}
extern "C" {
    pub fn ngx_stream_regex_exec(
        s: *mut ngx_stream_session_t,
        re: *mut ngx_stream_regex_t,
        str_: *mut ngx_str_t,
    ) -> ngx_int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_map_t {
    pub hash: ngx_hash_combined_t,
    pub regex: *mut ngx_stream_map_regex_t,
    pub nregex: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_map_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_map_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_map_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_stream_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_map_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_map_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_map_t),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nregex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_map_t),
            "::",
            stringify!(nregex)
        )
    );
}
extern "C" {
    pub fn ngx_stream_map_find(
        s: *mut ngx_stream_session_t,
        map: *mut ngx_stream_map_t,
        match_: *mut ngx_str_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_stream_variables_add_core_vars(cf: *mut ngx_conf_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_variables_init_vars(cf: *mut ngx_conf_t) -> ngx_int_t;
}
extern "C" {
    pub static mut ngx_stream_variable_null_value: ngx_stream_variable_value_t;
}
extern "C" {
    pub static mut ngx_stream_variable_true_value: ngx_stream_variable_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_script_engine_t {
    pub ip: *mut u_char,
    pub pos: *mut u_char,
    pub sp: *mut ngx_stream_variable_value_t,
    pub buf: ngx_str_t,
    pub line: ngx_str_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub session: *mut ngx_stream_session_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_script_engine_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_script_engine_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_script_engine_t>(),
        72usize,
        concat!("Size of: ", stringify!(ngx_stream_script_engine_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_script_engine_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_script_engine_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_engine_t),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_engine_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_engine_t),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_engine_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_engine_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_engine_t),
            "::",
            stringify!(session)
        )
    );
}
impl ngx_stream_script_engine_t {
    #[inline]
    pub fn flushed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flushed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flushed: ::std::os::raw::c_uint,
        skip: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let flushed: u32 = unsafe { ::std::mem::transmute(flushed) };
            flushed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let skip: u32 = unsafe { ::std::mem::transmute(skip) };
            skip as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_script_compile_t {
    pub cf: *mut ngx_conf_t,
    pub source: *mut ngx_str_t,
    pub flushes: *mut *mut ngx_array_t,
    pub lengths: *mut *mut ngx_array_t,
    pub values: *mut *mut ngx_array_t,
    pub variables: ngx_uint_t,
    pub ncaptures: ngx_uint_t,
    pub size: ngx_uint_t,
    pub main: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_script_compile_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_script_compile_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_script_compile_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_stream_script_compile_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_script_compile_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_script_compile_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flushes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(flushes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengths) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_compile_t),
            "::",
            stringify!(main)
        )
    );
}
impl ngx_stream_script_compile_t {
    #[inline]
    pub fn complete_lengths(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complete_lengths(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn complete_values(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complete_values(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conf_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conf_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn root_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_root_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        complete_lengths: ::std::os::raw::c_uint,
        complete_values: ::std::os::raw::c_uint,
        zero: ::std::os::raw::c_uint,
        conf_prefix: ::std::os::raw::c_uint,
        root_prefix: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let complete_lengths: u32 = unsafe { ::std::mem::transmute(complete_lengths) };
            complete_lengths as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let complete_values: u32 = unsafe { ::std::mem::transmute(complete_values) };
            complete_values as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let zero: u32 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let conf_prefix: u32 = unsafe { ::std::mem::transmute(conf_prefix) };
            conf_prefix as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let root_prefix: u32 = unsafe { ::std::mem::transmute(root_prefix) };
            root_prefix as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_stream_complex_value_t {
    pub value: ngx_str_t,
    pub flushes: *mut ngx_uint_t,
    pub lengths: *mut ::std::os::raw::c_void,
    pub values: *mut ::std::os::raw::c_void,
    pub u: ngx_stream_complex_value_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ngx_stream_complex_value_t__bindgen_ty_1 {
    pub size: usize,
}
#[test]
fn bindgen_test_layout_ngx_stream_complex_value_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_complex_value_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_complex_value_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ngx_stream_complex_value_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_complex_value_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_stream_complex_value_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_complex_value_t__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
}
#[test]
fn bindgen_test_layout_ngx_stream_complex_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_complex_value_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_complex_value_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_stream_complex_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_complex_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_complex_value_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_complex_value_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flushes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_complex_value_t),
            "::",
            stringify!(flushes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lengths) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_complex_value_t),
            "::",
            stringify!(lengths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_complex_value_t),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_complex_value_t),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_compile_complex_value_t {
    pub cf: *mut ngx_conf_t,
    pub value: *mut ngx_str_t,
    pub complex_value: *mut ngx_stream_complex_value_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_compile_complex_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_compile_complex_value_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_compile_complex_value_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_stream_compile_complex_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_compile_complex_value_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_stream_compile_complex_value_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_compile_complex_value_t),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_compile_complex_value_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).complex_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_compile_complex_value_t),
            "::",
            stringify!(complex_value)
        )
    );
}
impl ngx_stream_compile_complex_value_t {
    #[inline]
    pub fn zero(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conf_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conf_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn root_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_root_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        zero: ::std::os::raw::c_uint,
        conf_prefix: ::std::os::raw::c_uint,
        root_prefix: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let zero: u32 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let conf_prefix: u32 = unsafe { ::std::mem::transmute(conf_prefix) };
            conf_prefix as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let root_prefix: u32 = unsafe { ::std::mem::transmute(root_prefix) };
            root_prefix as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ngx_stream_script_code_pt =
    ::std::option::Option<unsafe extern "C" fn(e: *mut ngx_stream_script_engine_t)>;
pub type ngx_stream_script_len_code_pt =
    ::std::option::Option<unsafe extern "C" fn(e: *mut ngx_stream_script_engine_t) -> usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_script_copy_code_t {
    pub code: ngx_stream_script_code_pt,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_ngx_stream_script_copy_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_script_copy_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_script_copy_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_script_copy_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_script_copy_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_script_copy_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_copy_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_copy_code_t),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_script_var_code_t {
    pub code: ngx_stream_script_code_pt,
    pub index: usize,
}
#[test]
fn bindgen_test_layout_ngx_stream_script_var_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_script_var_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_script_var_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_script_var_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_script_var_code_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_script_var_code_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_var_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_var_code_t),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_script_copy_capture_code_t {
    pub code: ngx_stream_script_code_pt,
    pub n: usize,
}
#[test]
fn bindgen_test_layout_ngx_stream_script_copy_capture_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_script_copy_capture_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_script_copy_capture_code_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ngx_stream_script_copy_capture_code_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_script_copy_capture_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_stream_script_copy_capture_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_copy_capture_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_copy_capture_code_t),
            "::",
            stringify!(n)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_script_full_name_code_t {
    pub code: ngx_stream_script_code_pt,
    pub conf_prefix: usize,
}
#[test]
fn bindgen_test_layout_ngx_stream_script_full_name_code_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_script_full_name_code_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_script_full_name_code_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_script_full_name_code_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_script_full_name_code_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_stream_script_full_name_code_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_full_name_code_t),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_prefix) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_script_full_name_code_t),
            "::",
            stringify!(conf_prefix)
        )
    );
}
extern "C" {
    pub fn ngx_stream_script_flush_complex_value(
        s: *mut ngx_stream_session_t,
        val: *mut ngx_stream_complex_value_t,
    );
}
extern "C" {
    pub fn ngx_stream_complex_value(
        s: *mut ngx_stream_session_t,
        val: *mut ngx_stream_complex_value_t,
        value: *mut ngx_str_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_complex_value_size(
        s: *mut ngx_stream_session_t,
        val: *mut ngx_stream_complex_value_t,
        default_value: usize,
    ) -> usize;
}
extern "C" {
    pub fn ngx_stream_compile_complex_value(
        ccv: *mut ngx_stream_compile_complex_value_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_set_complex_value_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_stream_set_complex_value_zero_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_stream_set_complex_value_size_slot(
        cf: *mut ngx_conf_t,
        cmd: *mut ngx_command_t,
        conf: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ngx_stream_script_variables_count(value: *mut ngx_str_t) -> ngx_uint_t;
}
extern "C" {
    pub fn ngx_stream_script_compile(sc: *mut ngx_stream_script_compile_t) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_script_run(
        s: *mut ngx_stream_session_t,
        value: *mut ngx_str_t,
        code_lengths: *mut ::std::os::raw::c_void,
        reserved: usize,
        code_values: *mut ::std::os::raw::c_void,
    ) -> *mut u_char;
}
extern "C" {
    pub fn ngx_stream_script_flush_no_cacheable_variables(
        s: *mut ngx_stream_session_t,
        indices: *mut ngx_array_t,
    );
}
extern "C" {
    pub fn ngx_stream_script_add_code(
        codes: *mut ngx_array_t,
        size: usize,
        code: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ngx_stream_script_copy_len_code(e: *mut ngx_stream_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_stream_script_copy_code(e: *mut ngx_stream_script_engine_t);
}
extern "C" {
    pub fn ngx_stream_script_copy_var_len_code(e: *mut ngx_stream_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_stream_script_copy_var_code(e: *mut ngx_stream_script_engine_t);
}
extern "C" {
    pub fn ngx_stream_script_copy_capture_len_code(e: *mut ngx_stream_script_engine_t) -> usize;
}
extern "C" {
    pub fn ngx_stream_script_copy_capture_code(e: *mut ngx_stream_script_engine_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_main_conf_t {
    pub upstreams: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_main_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_main_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_main_conf_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_main_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_main_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_main_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstreams) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_main_conf_t),
            "::",
            stringify!(upstreams)
        )
    );
}
pub type ngx_stream_upstream_srv_conf_t = ngx_stream_upstream_srv_conf_s;
pub type ngx_stream_upstream_init_pt = ::std::option::Option<
    unsafe extern "C" fn(cf: *mut ngx_conf_t, us: *mut ngx_stream_upstream_srv_conf_t) -> ngx_int_t,
>;
pub type ngx_stream_upstream_init_peer_pt = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ngx_stream_session_t,
        us: *mut ngx_stream_upstream_srv_conf_t,
    ) -> ngx_int_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_peer_t {
    pub init_upstream: ngx_stream_upstream_init_pt,
    pub init: ngx_stream_upstream_init_peer_pt,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_peer_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_peer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_peer_t>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_peer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_peer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_peer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_upstream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_peer_t),
            "::",
            stringify!(init_upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_peer_t),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_peer_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_server_t {
    pub name: ngx_str_t,
    pub addrs: *mut ngx_addr_t,
    pub naddrs: ngx_uint_t,
    pub weight: ngx_uint_t,
    pub max_conns: ngx_uint_t,
    pub max_fails: ngx_uint_t,
    pub fail_timeout: time_t,
    pub slow_start: ngx_msec_t,
    pub down: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub spare: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_server_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_server_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_server_t>(),
        120usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_server_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_server_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_server_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_conns) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(max_conns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fails) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(max_fails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_timeout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(fail_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slow_start) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(slow_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_server_t),
            "::",
            stringify!(spare)
        )
    );
}
impl ngx_stream_upstream_server_t {
    #[inline]
    pub fn backup(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_backup(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(backup: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let backup: u32 = unsafe { ::std::mem::transmute(backup) };
            backup as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_srv_conf_s {
    pub peer: ngx_stream_upstream_peer_t,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
    pub servers: *mut ngx_array_t,
    pub flags: ngx_uint_t,
    pub host: ngx_str_t,
    pub file_name: *mut u_char,
    pub line: ngx_uint_t,
    pub port: in_port_t,
    pub no_port: ngx_uint_t,
    pub shm_zone: *mut ngx_shm_zone_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_srv_conf_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_srv_conf_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_srv_conf_s>(),
        104usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_srv_conf_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_srv_conf_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_srv_conf_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(servers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_port) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(no_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_zone) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_srv_conf_s),
            "::",
            stringify!(shm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_state_t {
    pub response_time: ngx_msec_t,
    pub connect_time: ngx_msec_t,
    pub first_byte_time: ngx_msec_t,
    pub bytes_sent: off_t,
    pub bytes_received: off_t,
    pub peer: *mut ngx_str_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_state_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_state_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_state_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_state_t),
            "::",
            stringify!(response_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_state_t),
            "::",
            stringify!(connect_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_byte_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_state_t),
            "::",
            stringify!(first_byte_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_sent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_state_t),
            "::",
            stringify!(bytes_sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_received) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_state_t),
            "::",
            stringify!(bytes_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_state_t),
            "::",
            stringify!(peer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_resolved_t {
    pub host: ngx_str_t,
    pub port: in_port_t,
    pub no_port: ngx_uint_t,
    pub naddrs: ngx_uint_t,
    pub addrs: *mut ngx_resolver_addr_t,
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: ngx_str_t,
    pub ctx: *mut ngx_resolver_ctx_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_resolved_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_resolved_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_resolved_t>(),
        88usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_resolved_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_resolved_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_resolved_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).host) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_port) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(no_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(naddrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_resolved_t),
            "::",
            stringify!(ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_t {
    pub peer: ngx_peer_connection_t,
    pub downstream_buf: ngx_buf_t,
    pub upstream_buf: ngx_buf_t,
    pub free: *mut ngx_chain_t,
    pub upstream_out: *mut ngx_chain_t,
    pub upstream_busy: *mut ngx_chain_t,
    pub downstream_out: *mut ngx_chain_t,
    pub downstream_busy: *mut ngx_chain_t,
    pub received: off_t,
    pub start_sec: time_t,
    pub requests: ngx_uint_t,
    pub responses: ngx_uint_t,
    pub start_time: ngx_msec_t,
    pub upload_rate: usize,
    pub download_rate: usize,
    pub ssl_name: ngx_str_t,
    pub upstream: *mut ngx_stream_upstream_srv_conf_t,
    pub resolved: *mut ngx_stream_upstream_resolved_t,
    pub state: *mut ngx_stream_upstream_state_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_t>(),
        448usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downstream_buf) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(downstream_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream_buf) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(upstream_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream_out) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(upstream_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream_busy) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(upstream_busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downstream_out) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(downstream_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downstream_busy) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(downstream_busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_sec) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(start_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requests) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(requests)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).responses) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(responses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upload_rate) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(upload_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).download_rate) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(download_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_name) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(ssl_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolved) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(resolved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_t),
            "::",
            stringify!(state)
        )
    );
}
impl ngx_stream_upstream_t {
    #[inline]
    pub fn connected(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_connected(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn half_closed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_half_closed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        connected: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
        half_closed: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let connected: u32 = unsafe { ::std::mem::transmute(connected) };
            connected as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let half_closed: u32 = unsafe { ::std::mem::transmute(half_closed) };
            half_closed as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ngx_stream_upstream_add(
        cf: *mut ngx_conf_t,
        u: *mut ngx_url_t,
        flags: ngx_uint_t,
    ) -> *mut ngx_stream_upstream_srv_conf_t;
}
extern "C" {
    pub static mut ngx_stream_upstream_module: ngx_module_t;
}
pub type ngx_stream_upstream_rr_peer_t = ngx_stream_upstream_rr_peer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_rr_peer_s {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub name: ngx_str_t,
    pub server: ngx_str_t,
    pub current_weight: ngx_int_t,
    pub effective_weight: ngx_int_t,
    pub weight: ngx_int_t,
    pub conns: ngx_uint_t,
    pub max_conns: ngx_uint_t,
    pub fails: ngx_uint_t,
    pub accessed: time_t,
    pub checked: time_t,
    pub max_fails: ngx_uint_t,
    pub fail_timeout: time_t,
    pub slow_start: ngx_msec_t,
    pub start_time: ngx_msec_t,
    pub down: ngx_uint_t,
    pub ssl_session: *mut ::std::os::raw::c_void,
    pub ssl_session_len: ::std::os::raw::c_int,
    pub lock: ngx_atomic_t,
    pub next: *mut ngx_stream_upstream_rr_peer_t,
    pub spare: [u64; 25usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_rr_peer_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_rr_peer_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_rr_peer_s>(),
        384usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_rr_peer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_rr_peer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_rr_peer_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_weight) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(current_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).effective_weight) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(effective_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conns) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(conns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_conns) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(max_conns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fails) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(fails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessed) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(accessed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checked) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(checked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fails) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(max_fails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fail_timeout) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(fail_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slow_start) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(slow_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_session) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(ssl_session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssl_session_len) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(ssl_session_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_s),
            "::",
            stringify!(spare)
        )
    );
}
pub type ngx_stream_upstream_rr_peers_t = ngx_stream_upstream_rr_peers_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_rr_peers_s {
    pub number: ngx_uint_t,
    pub shpool: *mut ngx_slab_pool_t,
    pub rwlock: ngx_atomic_t,
    pub zone_next: *mut ngx_stream_upstream_rr_peers_t,
    pub total_weight: ngx_uint_t,
    pub tries: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub name: *mut ngx_str_t,
    pub next: *mut ngx_stream_upstream_rr_peers_t,
    pub peer: *mut ngx_stream_upstream_rr_peer_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_rr_peers_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_rr_peers_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_rr_peers_s>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_rr_peers_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_rr_peers_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_upstream_rr_peers_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shpool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(shpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rwlock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(rwlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zone_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(zone_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_weight) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(total_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tries) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(tries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peers_s),
            "::",
            stringify!(peer)
        )
    );
}
impl ngx_stream_upstream_rr_peers_s {
    #[inline]
    pub fn single(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_single(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        single: ::std::os::raw::c_uint,
        weighted: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let single: u32 = unsafe { ::std::mem::transmute(single) };
            single as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let weighted: u32 = unsafe { ::std::mem::transmute(weighted) };
            weighted as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_upstream_rr_peer_data_t {
    pub config: ngx_uint_t,
    pub peers: *mut ngx_stream_upstream_rr_peers_t,
    pub current: *mut ngx_stream_upstream_rr_peer_t,
    pub tried: *mut usize,
    pub data: usize,
}
#[test]
fn bindgen_test_layout_ngx_stream_upstream_rr_peer_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_upstream_rr_peer_data_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_upstream_rr_peer_data_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_stream_upstream_rr_peer_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_upstream_rr_peer_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ngx_stream_upstream_rr_peer_data_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_data_t),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_data_t),
            "::",
            stringify!(peers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_data_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tried) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_data_t),
            "::",
            stringify!(tried)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_upstream_rr_peer_data_t),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn ngx_stream_upstream_init_round_robin(
        cf: *mut ngx_conf_t,
        us: *mut ngx_stream_upstream_srv_conf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_upstream_init_round_robin_peer(
        s: *mut ngx_stream_session_t,
        us: *mut ngx_stream_upstream_srv_conf_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_upstream_create_round_robin_peer(
        s: *mut ngx_stream_session_t,
        ur: *mut ngx_stream_upstream_resolved_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_upstream_get_round_robin_peer(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_upstream_free_round_robin_peer(
        pc: *mut ngx_peer_connection_t,
        data: *mut ::std::os::raw::c_void,
        state: ngx_uint_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_conf_ctx_t {
    pub main_conf: *mut *mut ::std::os::raw::c_void,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ngx_stream_conf_ctx_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_conf_ctx_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_conf_ctx_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_conf_ctx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_conf_ctx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_conf_ctx_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_conf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_ctx_t),
            "::",
            stringify!(main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_ctx_t),
            "::",
            stringify!(srv_conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_listen_t {
    pub sockaddr: *mut sockaddr,
    pub socklen: socklen_t,
    pub addr_text: ngx_str_t,
    pub ctx: *mut ngx_stream_conf_ctx_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tcp_keepidle: ::std::os::raw::c_int,
    pub tcp_keepintvl: ::std::os::raw::c_int,
    pub tcp_keepcnt: ::std::os::raw::c_int,
    pub backlog: ::std::os::raw::c_int,
    pub rcvbuf: ::std::os::raw::c_int,
    pub sndbuf: ::std::os::raw::c_int,
    pub fastopen: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ngx_stream_listen_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_listen_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_listen_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_stream_listen_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_listen_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_listen_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(sockaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socklen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(socklen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(addr_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepidle) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(tcp_keepidle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepintvl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(tcp_keepintvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_keepcnt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(tcp_keepcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backlog) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(backlog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcvbuf) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(rcvbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sndbuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(sndbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastopen) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(fastopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_listen_t),
            "::",
            stringify!(type_)
        )
    );
}
impl ngx_stream_listen_t {
    #[inline]
    pub fn bind(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wildcard(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wildcard(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipv6only(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ipv6only(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reuseport(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reuseport(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn so_keepalive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_so_keepalive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bind: ::std::os::raw::c_uint,
        wildcard: ::std::os::raw::c_uint,
        ssl: ::std::os::raw::c_uint,
        ipv6only: ::std::os::raw::c_uint,
        reuseport: ::std::os::raw::c_uint,
        so_keepalive: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bind: u32 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wildcard: u32 = unsafe { ::std::mem::transmute(wildcard) };
            wildcard as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ipv6only: u32 = unsafe { ::std::mem::transmute(ipv6only) };
            ipv6only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reuseport: u32 = unsafe { ::std::mem::transmute(reuseport) };
            reuseport as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let so_keepalive: u32 = unsafe { ::std::mem::transmute(so_keepalive) };
            so_keepalive as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_addr_conf_t {
    pub ctx: *mut ngx_stream_conf_ctx_t,
    pub addr_text: ngx_str_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_addr_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_addr_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_addr_conf_t>(),
        32usize,
        concat!("Size of: ", stringify!(ngx_stream_addr_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_addr_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_addr_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_addr_conf_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr_text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_addr_conf_t),
            "::",
            stringify!(addr_text)
        )
    );
}
impl ngx_stream_addr_conf_t {
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn proxy_protocol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_proxy_protocol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ssl: ::std::os::raw::c_uint,
        proxy_protocol: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let proxy_protocol: u32 = unsafe { ::std::mem::transmute(proxy_protocol) };
            proxy_protocol as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_in_addr_t {
    pub addr: in_addr_t,
    pub conf: ngx_stream_addr_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_in_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_in_addr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_in_addr_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_stream_in_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_in_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_in_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_in_addr_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_in_addr_t),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ngx_stream_in6_addr_t {
    pub addr6: in6_addr,
    pub conf: ngx_stream_addr_conf_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_in6_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_in6_addr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_in6_addr_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_stream_in6_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_in6_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_in6_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_in6_addr_t),
            "::",
            stringify!(addr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_in6_addr_t),
            "::",
            stringify!(conf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_port_t {
    pub addrs: *mut ::std::os::raw::c_void,
    pub naddrs: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_port_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_port_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_port_t>(),
        16usize,
        concat!("Size of: ", stringify!(ngx_stream_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_port_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_port_t),
            "::",
            stringify!(addrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naddrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_port_t),
            "::",
            stringify!(naddrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_conf_port_t {
    pub family: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub port: in_port_t,
    pub addrs: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_conf_port_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_conf_port_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_conf_port_t>(),
        56usize,
        concat!("Size of: ", stringify!(ngx_stream_conf_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_conf_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_conf_port_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_port_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_port_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_port_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_port_t),
            "::",
            stringify!(addrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_conf_addr_t {
    pub opt: ngx_stream_listen_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_conf_addr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_conf_addr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_conf_addr_t>(),
        80usize,
        concat!("Size of: ", stringify!(ngx_stream_conf_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_conf_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_conf_addr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_conf_addr_t),
            "::",
            stringify!(opt)
        )
    );
}
pub const ngx_stream_phases_NGX_STREAM_POST_ACCEPT_PHASE: ngx_stream_phases = 0;
pub const ngx_stream_phases_NGX_STREAM_PREACCESS_PHASE: ngx_stream_phases = 1;
pub const ngx_stream_phases_NGX_STREAM_ACCESS_PHASE: ngx_stream_phases = 2;
pub const ngx_stream_phases_NGX_STREAM_SSL_PHASE: ngx_stream_phases = 3;
pub const ngx_stream_phases_NGX_STREAM_PREREAD_PHASE: ngx_stream_phases = 4;
pub const ngx_stream_phases_NGX_STREAM_CONTENT_PHASE: ngx_stream_phases = 5;
pub const ngx_stream_phases_NGX_STREAM_LOG_PHASE: ngx_stream_phases = 6;
pub type ngx_stream_phases = ::std::os::raw::c_uint;
pub type ngx_stream_phase_handler_t = ngx_stream_phase_handler_s;
pub type ngx_stream_phase_handler_pt = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ngx_stream_session_t,
        ph: *mut ngx_stream_phase_handler_t,
    ) -> ngx_int_t,
>;
pub type ngx_stream_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(s: *mut ngx_stream_session_t) -> ngx_int_t>;
pub type ngx_stream_content_handler_pt =
    ::std::option::Option<unsafe extern "C" fn(s: *mut ngx_stream_session_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_phase_handler_s {
    pub checker: ngx_stream_phase_handler_pt,
    pub handler: ngx_stream_handler_pt,
    pub next: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_phase_handler_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_phase_handler_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_phase_handler_s>(),
        24usize,
        concat!("Size of: ", stringify!(ngx_stream_phase_handler_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_phase_handler_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_phase_handler_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checker) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_phase_handler_s),
            "::",
            stringify!(checker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_phase_handler_s),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_phase_handler_s),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_phase_engine_t {
    pub handlers: *mut ngx_stream_phase_handler_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_phase_engine_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_phase_engine_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_phase_engine_t>(),
        8usize,
        concat!("Size of: ", stringify!(ngx_stream_phase_engine_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_phase_engine_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_phase_engine_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_phase_engine_t),
            "::",
            stringify!(handlers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_phase_t {
    pub handlers: ngx_array_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_phase_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_phase_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_phase_t>(),
        40usize,
        concat!("Size of: ", stringify!(ngx_stream_phase_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_phase_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_phase_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handlers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_phase_t),
            "::",
            stringify!(handlers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_core_main_conf_t {
    pub servers: ngx_array_t,
    pub listen: ngx_array_t,
    pub phase_engine: ngx_stream_phase_engine_t,
    pub variables_hash: ngx_hash_t,
    pub variables: ngx_array_t,
    pub prefix_variables: ngx_array_t,
    pub ncaptures: ngx_uint_t,
    pub variables_hash_max_size: ngx_uint_t,
    pub variables_hash_bucket_size: ngx_uint_t,
    pub variables_keys: *mut ngx_hash_keys_arrays_t,
    pub phases: [ngx_stream_phase_t; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_core_main_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_core_main_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_core_main_conf_t>(),
        496usize,
        concat!("Size of: ", stringify!(ngx_stream_core_main_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_core_main_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_core_main_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(servers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(listen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase_engine) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(phase_engine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_hash) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(variables_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix_variables) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(prefix_variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_hash_max_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(variables_hash_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_hash_bucket_size) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(variables_hash_bucket_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables_keys) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(variables_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phases) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_main_conf_t),
            "::",
            stringify!(phases)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_core_srv_conf_t {
    pub handler: ngx_stream_content_handler_pt,
    pub ctx: *mut ngx_stream_conf_ctx_t,
    pub file_name: *mut u_char,
    pub line: ngx_uint_t,
    pub tcp_nodelay: ngx_flag_t,
    pub preread_buffer_size: usize,
    pub preread_timeout: ngx_msec_t,
    pub error_log: *mut ngx_log_t,
    pub resolver_timeout: ngx_msec_t,
    pub resolver: *mut ngx_resolver_t,
    pub proxy_protocol_timeout: ngx_msec_t,
    pub listen: ngx_uint_t,
}
#[test]
fn bindgen_test_layout_ngx_stream_core_srv_conf_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_core_srv_conf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_core_srv_conf_t>(),
        96usize,
        concat!("Size of: ", stringify!(ngx_stream_core_srv_conf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_core_srv_conf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_core_srv_conf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_nodelay) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(tcp_nodelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preread_buffer_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(preread_buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preread_timeout) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(preread_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_log) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(error_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver_timeout) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(resolver_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolver) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(resolver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy_protocol_timeout) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(proxy_protocol_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listen) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_core_srv_conf_t),
            "::",
            stringify!(listen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_session_s {
    pub signature: u32,
    pub connection: *mut ngx_connection_t,
    pub received: off_t,
    pub start_sec: time_t,
    pub start_msec: ngx_msec_t,
    pub log_handler: ngx_log_handler_pt,
    pub ctx: *mut *mut ::std::os::raw::c_void,
    pub main_conf: *mut *mut ::std::os::raw::c_void,
    pub srv_conf: *mut *mut ::std::os::raw::c_void,
    pub upstream: *mut ngx_stream_upstream_t,
    pub upstream_states: *mut ngx_array_t,
    pub variables: *mut ngx_stream_variable_value_t,
    pub ncaptures: ngx_uint_t,
    pub captures: *mut ::std::os::raw::c_int,
    pub captures_data: *mut u_char,
    pub phase_handler: ngx_int_t,
    pub status: ngx_uint_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ngx_stream_session_s() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_session_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_session_s>(),
        144usize,
        concat!("Size of: ", stringify!(ngx_stream_session_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_session_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_session_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_sec) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(start_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_msec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(start_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_handler) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(log_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_conf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srv_conf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(upstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upstream_states) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(upstream_states)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variables) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(variables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncaptures) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(ncaptures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(captures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captures_data) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(captures_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase_handler) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(phase_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_session_s),
            "::",
            stringify!(status)
        )
    );
}
impl ngx_stream_session_s {
    #[inline]
    pub fn ssl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ssl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stat_processing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stat_processing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn health_check(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_health_check(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn limit_conn_status(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_limit_conn_status(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ssl: ::std::os::raw::c_uint,
        stat_processing: ::std::os::raw::c_uint,
        health_check: ::std::os::raw::c_uint,
        limit_conn_status: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ssl: u32 = unsafe { ::std::mem::transmute(ssl) };
            ssl as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let stat_processing: u32 = unsafe { ::std::mem::transmute(stat_processing) };
            stat_processing as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let health_check: u32 = unsafe { ::std::mem::transmute(health_check) };
            health_check as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let limit_conn_status: u32 = unsafe { ::std::mem::transmute(limit_conn_status) };
            limit_conn_status as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ngx_stream_module_t {
    pub preconfiguration:
        ::std::option::Option<unsafe extern "C" fn(cf: *mut ngx_conf_t) -> ngx_int_t>,
    pub postconfiguration:
        ::std::option::Option<unsafe extern "C" fn(cf: *mut ngx_conf_t) -> ngx_int_t>,
    pub create_main_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub init_main_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub create_srv_conf: ::std::option::Option<
        unsafe extern "C" fn(cf: *mut ngx_conf_t) -> *mut ::std::os::raw::c_void,
    >,
    pub merge_srv_conf: ::std::option::Option<
        unsafe extern "C" fn(
            cf: *mut ngx_conf_t,
            prev: *mut ::std::os::raw::c_void,
            conf: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_ngx_stream_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<ngx_stream_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ngx_stream_module_t>(),
        48usize,
        concat!("Size of: ", stringify!(ngx_stream_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ngx_stream_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ngx_stream_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preconfiguration) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_module_t),
            "::",
            stringify!(preconfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postconfiguration) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_module_t),
            "::",
            stringify!(postconfiguration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_main_conf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_module_t),
            "::",
            stringify!(create_main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_main_conf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_module_t),
            "::",
            stringify!(init_main_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_srv_conf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_module_t),
            "::",
            stringify!(create_srv_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).merge_srv_conf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ngx_stream_module_t),
            "::",
            stringify!(merge_srv_conf)
        )
    );
}
extern "C" {
    pub fn ngx_stream_core_run_phases(s: *mut ngx_stream_session_t);
}
extern "C" {
    pub fn ngx_stream_core_generic_phase(
        s: *mut ngx_stream_session_t,
        ph: *mut ngx_stream_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_core_preread_phase(
        s: *mut ngx_stream_session_t,
        ph: *mut ngx_stream_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_core_content_phase(
        s: *mut ngx_stream_session_t,
        ph: *mut ngx_stream_phase_handler_t,
    ) -> ngx_int_t;
}
extern "C" {
    pub fn ngx_stream_init_connection(c: *mut ngx_connection_t);
}
extern "C" {
    pub fn ngx_stream_session_handler(rev: *mut ngx_event_t);
}
extern "C" {
    pub fn ngx_stream_finalize_session(s: *mut ngx_stream_session_t, rc: ngx_uint_t);
}
extern "C" {
    pub static mut ngx_stream_module: ngx_module_t;
}
extern "C" {
    pub static mut ngx_stream_max_module: ngx_uint_t;
}
extern "C" {
    pub static mut ngx_stream_core_module: ngx_module_t;
}
pub type ngx_stream_filter_pt = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ngx_stream_session_t,
        chain: *mut ngx_chain_t,
        from_upstream: ngx_uint_t,
    ) -> ngx_int_t,
>;
extern "C" {
    pub static mut ngx_stream_top_filter: ngx_stream_filter_pt;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
